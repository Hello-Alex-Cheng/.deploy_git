<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模块化打包器</title>
    <link href="/post/module-bundler.html"/>
    <url>/post/module-bundler.html</url>
    
    <content type="html"><![CDATA[<h1 id="Webpack5"><a href="#Webpack5" class="headerlink" title="Webpack5"></a>Webpack5</h1><blockquote><p>找出模块之间的依赖关系，按照一定的规则把这些模块组织、合并为一个JavaScript（以下简写为JS）文件。</p></blockquote><p>Webpack认为一切都是模块，如JS文件、CSS文件、jpg和png图片等都是模块。Webpack会把所有这些模块都合并为一个JS文件，这是它最本质的工作。</p><p>当然，我们可能并不想让它把这些模块都合并成一个JS文件，这时我们可以通过一些 <code>规则或工具</code> 来改变它最终打包生成的文件。</p><h2 id="webpack-amp-webpack-cli"><a href="#webpack-amp-webpack-cli" class="headerlink" title="webpack &amp; webpack-cli"></a>webpack &amp; webpack-cli</h2><p>webpack是Webpack核心npm包</p><p>webpack-cli是命令行运行webpack命令所需的npm包</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^5.82.1&quot;</span>,<br><span class="hljs-string">&quot;webpack-cli&quot;</span>: <span class="hljs-string">&quot;^5.1.1&quot;</span>,<br><span class="hljs-string">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^4.15.0&quot;</span><br></code></pre></td></tr></table></figure><h2 id="资源拆分"><a href="#资源拆分" class="headerlink" title="资源拆分"></a>资源拆分</h2><p>我们可以把所有模块打包成一个 js 文件，但是，这样就会导致 js 过于庞大，我们希望可以将其拆分成JS、CSS和图片等资源。</p><p>Webpack提供了对拆分功能的支持，在构建的时候，可以通过Webpack的预处理器和插件等进行干预，把原本要打包成的一个.js文件拆分成JS、CSS和图片等资源。</p><h2 id="打包模式"><a href="#打包模式" class="headerlink" title="打包模式"></a>打包模式</h2><p>Webpack的打包模式共有三种：production、development和none，这三种模式是通过mode参数来指定的。</p><p>production和development这两种模式会分别按照线上生产环境和本地开发环境进行一些优化处理，而none模式会保留原始的打包结果。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Webpack默认的配置文件是项目根目录下的 <code>webpack.config.js</code> 文件，在我们执行<code>npx webpack</code>命令的时候，Webpack会自动寻找该文件并使用其配置信息进行打包，如果找不到该文件就使用默认参数打包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-comment">// 原模原样输出代码</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>), <span class="hljs-comment">// __dirname 是 nodejs 全局变量，表示当前文件的路径，使用 resolve 拼接</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们创建两个 js 文件，一个是 index.js，一个是 test.js。</p><p>然后在 test.js 中创建几个变量和方法，并通过 export 导出，index.js 导入，执行如下命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// terminal</span><br>npx webpack<br></code></pre></td></tr></table></figure><p>控制台输出，表示打包成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">asset bundle.<span class="hljs-property">js</span> <span class="hljs-number">3.18</span> <span class="hljs-title class_">KiB</span> [emitted] (<span class="hljs-attr">name</span>: main)<br>runtime modules <span class="hljs-number">670</span> bytes <span class="hljs-number">3</span> modules<br>cacheable modules <span class="hljs-number">203</span> bytes<br>  ./index.<span class="hljs-property">js</span> <span class="hljs-number">85</span> bytes [built] [code generated]<br>  ./test.<span class="hljs-property">js</span> <span class="hljs-number">118</span> bytes [built] [code generated]<br>webpack <span class="hljs-number">5.82</span><span class="hljs-number">.1</span> compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">76</span> ms<br></code></pre></td></tr></table></figure><h2 id="配置文件资源入口-entry"><a href="#配置文件资源入口-entry" class="headerlink" title="配置文件资源入口 entry"></a>配置文件资源入口 entry</h2><ol><li>入口entry是字符串形式</li></ol><p>字符串形式entry已经在之前使用过了，这是最简单的形式，表示打包的入口JS文件。</p><ol start="2"><li>入口entry是数组形式</li></ol><p>表示数组的最后一个文件是资源的入口文件，数组的其余文件会被预先构建到入口文件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">entry</span>: [<span class="hljs-string">&quot;core-js/stable&quot;</span>, <span class="hljs-string">&quot;./a.js&quot;</span>]<br>  <span class="hljs-comment">//...</span><br>&#125;<br><br>=== 上面的配置和下面的是等效的 ===<br><br><span class="hljs-comment">//a.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;core-js/stable&quot;</span><br><br><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./a.js&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>入口entry是对象形式</li></ol><p>对象形式的entry又被称为多入口配置。之前我们讲的都是单入口配置，就是打包后生成一个JS文件。</p><p>多入口配置就是打包后生成多个JS文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-comment">// 原模原样输出代码</span><br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">bundle</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>    <span class="hljs-attr">vendor</span>: <span class="hljs-string">&#x27;./vendor.js&#x27;</span><br>  &#125;<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>), <span class="hljs-comment">// __dirname 是 nodejs 全局变量，表示当前文件的路径，使用 resolve 拼接</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>入口entry是函数形式</li></ol><p>函数形式的entry，Webpack取函数返回值作为入口配置，返回值是上述三种形式之一即可。</p><p>函数形式的entry可以用来做一些额外的逻辑处理，不过在自己搭脚手架时很少使用。</p><h2 id="资源出口-output"><a href="#资源出口-output" class="headerlink" title="资源出口 output"></a>资源出口 output</h2><p>output就是资源出口配置项。</p><p>output的值是一个对象，它有几个重要的属性filename、path、publicPath和chunkFilename。</p><ul><li>filename</li></ul><p>filename支持类似变量的方式生成动态文件名，如[hash]-bundle.js，其中方括号代表占位符，里面的hash表示特定的动态值。</p><p>webpack5 以前使用hash，webpack5中变成了fullhash，或者考虑使用chunkhash或contenthash。</p><p>特定动态值除了[hash]，还有[name]和[id]等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name]-[fullhash:8].js&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>path</li></ul><p>资源输出的绝对路径，存放在磁盘中。</p><p>如果你不设置它，Webpack默认其为dist目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>publicPath</li></ul><p>配置项output中的publicPath表示的是资源访问路径，在Web开发时其默认值是字符串auto。</p><p>资源存放到磁盘后，浏览器如何知道该资源存放在什么位置呢？这个时候需要我们指定该资源的访问路径，这个访问路径就是用<code>output.publicPath</code>来表示的。</p><p>我们来看个示例，有三个 js 文件 <code>index.js, test.js, test1.js</code>，在 index.js 中，动态导入 test.js 和 test1.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test.js</span><br><span class="hljs-keyword">const</span> myName = <span class="hljs-string">&#x27;alex&#x27;</span><br><span class="hljs-keyword">const</span> age = <span class="hljs-number">18</span><br><span class="hljs-keyword">const</span> sayMe = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName + age)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> sayMe;<br><br><br><span class="hljs-comment">// test1.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是 test1.js&#x27;</span>)<br><br><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./test.css&#x27;</span><br><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./test&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">default</span>()  <br>&#125;)<br><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./test1.js&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后我们 webpack 配置不变，不加 <code>publicPath</code> 进行打包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>      <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>    &#125;]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们会发现生成的 <code>dist</code> 目录下有三个文件，<code>bundle.js, 1.bundle.js, 2.bundle.js</code>。</p><p>bundle.js是从入口文件index.js开始打包生成的output.filename指定的文件，<code>1.bundle.js, 2.bundle.js</code>是动态加载JS模块而生成的异步资源文件，test.js文件被单独打包成1.bundle.js文件，test1.js文件被单独打包成2.bundle.js文件。</p><p>我们打开 index.html 页面，并查看 network，会发现这几个资源文件，都在 dist 目录下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/source/demo/webpack5/dist/bundle.js</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/source/demo/webpack5/dist/1.bundle.js</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/source/demo/webpack5/dist/2.bundle.js</span><br></code></pre></td></tr></table></figure><p>那我们加上 <code>publicPath</code> 属性试试，看看会有什么效果呢。</p><p>其余都不变，给 output 加上 publicPath：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;./assets/&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>打包成功后，刷新页面，会发现控制台里已经报错，<code>1.bundle.js, 2.bundle.js</code> 资源 404。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/source/demo/webpack5/assets/1.bundle.js</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/source/demo/webpack5/assets/2.bundle.js</span><br></code></pre></td></tr></table></figure><img src="./img/publicPath.jpg" /><p>原来，浏览器是从 <code>assets</code> 目录下加载了这两个资源文件，而我们根本没有创建这个 <code>assets</code> 目录，并且 <code>1.bundle.js, 2.bundle.js</code> 是在 <code>dist</code> 目录下，所以找不到资源了。</p><p>在把publicPath设置为<code>assets/</code> 、 <code>./assets/</code> 、<code>../assets/</code>这类路径时，它是相对于当前HTML页面路径取值的。</p><p><strong>如果 publicPath 的值是以 <code>/</code> 开头</strong>，则是相对于服务器地址，表示要访问的资源以当前页面的服务器地址根目录作为基础路径。</p><p>我们来看看示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/assets/&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>打包后，刷新页面，会发现动态加载的资源 404了，因为浏览器是从服务器根路径开始加载的 <code>1.bundle.js &amp; 2.bundle.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/assets/1.bundle.js</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:5500/assets/2.bundle.js</span><br></code></pre></td></tr></table></figure><p><strong>publicPath 也可以直接写绝对HTTP地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;https://www.baidu.com/assets/&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.baidu.com/assets/1.bundle.js</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//www.baidu.com/assets/2.bundle.js</span><br></code></pre></td></tr></table></figure><p><strong>相对HTTP协议地址以//开头</strong></p><p>与绝对HTTP协议地址相比，它省略了前面的https:或http:。</p><p>在使用相对HTTP协议地址的时候，浏览器会将当前页面使用的协议名称与相对协议地址拼接，这样本质上与使用绝对HTTP协议地址是一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;//www.baidu.com/assets/&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><ul><li>chunkFilename</li></ul><p>chunkFilename也用来表示打包后生成的文件名，那么它和filename有什么区别呢？</p><p>chunkFilename表示的是打包过程中非入口文件的chunk名称，通常在使用异步模块的时候，会生成非入口文件的chunk。在前面的例子中，index.js文件里有import（’./test.js’），其中的test.js就是一个异步模块，它被打包成1.bundle.js文件，这个名称就是默认的output.chunkFilename。与output.filename一样，它支持占位符，例如使用[id].js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;./dist/&#x27;</span>,<br>  <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[chunkhash].js&#x27;</span>, <span class="hljs-comment">// 新增</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>打包后，就不会在有 <code>1.bundle.js</code>了，因为我们生成非入口的文件改了名字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">66ba79be0b67ead70ee6.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><h2 id="webpack预处理器-Loader"><a href="#webpack预处理器-Loader" class="headerlink" title="webpack预处理器 Loader"></a>webpack预处理器 Loader</h2><p>Webpack在打包的时候，将所有引入的资源文件都当作模块来处理。</p><p>但Webpack在不进行额外配置时，<code>自身只支持对JS文件JSON文件模块的处理</code>，如果你引入了一个CSS文件或图片文件，那么Webpack在处理该模块的时候，会通过控制台报错：Module parse failed…You may need an appropriate loader to handle this file type。</p><p>Webpack社区也提供了比较成熟的预处理器，我们可以直接拿来使用，例如使用file-loader和url-loader来处理图片等资源，使用babel-loader来对ES6进行转码，使用vue-loader来处理Vue组件。</p><h3 id="处理-CSS"><a href="#处理-CSS" class="headerlink" title="处理 CSS"></a>处理 CSS</h3><p>需要两个 loader, 分别是css-loader与style-loader。</p><p>css-loader是必需的，它的作用是解析CSS文件，包括解析@import等CSS自身的语法。它的作用仅包括解析CSS文件，它会将解析后的CSS文件以字符串的形式打包到JS文件中。不过，此时的CSS样式并不会生效，因为需要把CSS文件插入HTML文件中才会生效。</p><p>此时，style-loader就可以发挥作用了，它可以把JS里的样式代码插入HTML文件中。它的原理很简单，就是通过JS动态生成style标签并将其插入HTML文件的head标签中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123;<br>      <span class="hljs-comment">// 取值是一个正则表达式，表示的含义是当文件名后缀是.css的时候，我们使用对应use项里的预处理器</span><br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>      <span class="hljs-comment">// 取值是一个数组，数组每一项是一个预处理器。预处理器的执行顺序是从后向前执行，先执行css-loader，然后把css-loader的执行结果交给style-loader执行。</span><br>      <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>    &#125;]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./test.css&#x27;</span><br><span class="hljs-keyword">import</span> sayMe <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test&#x27;</span><br><br><span class="hljs-title function_">sayMe</span>()<br><br><br><span class="hljs-comment">// test.css</span><br>.<span class="hljs-property">hello</span> &#123;<br>  <span class="hljs-attr">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Webpack5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="loader配置项"><a href="#loader配置项" class="headerlink" title="loader配置项"></a>loader配置项</h3><p>预处理器本质上是一个函数，它接收一个资源模块，然后将其处理成Webpack能使用的形式。</p><p>用法，以处理 css 为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;./assets/&#x27;</span>,<br>    <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[chunkhash:8].js&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123; <span class="hljs-comment">// 模块</span><br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 处理 css 文件</span><br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>], <span class="hljs-comment">// 如果是单一loader，use 可以是字符串，如果要给 loader 传参，那么 use 可以配置成对象形式</span><br>        <span class="hljs-attr">include</span>: <span class="hljs-regexp">/src/</span>, <span class="hljs-comment">// 只对 src 目录下的文件做处理</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-comment">// 不处理 node_modules 下的文件</span><br>      &#125;,<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="处理-ES6-语法"><a href="#处理-ES6-语法" class="headerlink" title="处理 ES6 语法"></a>处理 ES6 语法</h3><p>安装 babel-loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 需要babel 核心包</span><br>npm install -D @babel/core@<span class="hljs-number">7.13</span><span class="hljs-number">.0</span> babel-loader@<span class="hljs-number">8.2</span><span class="hljs-number">.2</span><br><br><span class="hljs-comment">// 需要presets包，它表示预设插件的集合，对ES6最新语法进行转码</span><br>npm install -D @babel/presets-env@<span class="hljs-number">7.13</span><span class="hljs-number">.10</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 处理 es6，低版本浏览器并不支持 es6 最新语法</span><br>&#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/presets-env&#x27;</span>]<br>          &#125;<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>babel-loader配置项options除了可以设置常规的Babel配置项，还可以开启缓存。可以通过增加cacheDirectory：true属性来开启缓存。在初次打包后再次打包，如果JS文件未发生变化，可以直接使用初次打包后的缓存文件，这样避免了二次转码，可以有效提高打包速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">options</span>: &#123;<br>  cacheDirectory：<span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@babel/presets-env&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h3><blockquote><p>使用file-loader</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> imgSrc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../img/babel.jpg&#x27;</span><br><br><span class="hljs-keyword">const</span> imgDom = <span class="hljs-string">`&lt;img src=&quot;<span class="hljs-subst">$&#123;imgSrc&#125;</span>&quot;/&gt;`</span><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>  img.<span class="hljs-property">innerHTML</span> = imgDom<br>&#125;<br></code></pre></td></tr></table></figure><p>将 file-loader 配置到 webpack.config.js 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>  &#125;, &#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>    <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="处理-css-中的图片资源"><a href="#处理-css-中的图片资源" class="headerlink" title="处理 css 中的图片资源"></a>处理 css 中的图片资源</h3><p>看似什么都不用处理，但是当你打包后，dist 目录下有两个 jpg 的文件，其中一个无法打开，而页面中 css 中引入的图片资源，就是那个无法加载出来图片。</p><p>这是因为 css-loader 会对 @import 和 url() 进行处理，就像 js 解析 import/require() 一样</p><p>所以我们使用 file-loader 时，需要将 css 中的图片采用 commonjs 的方式去引入，而不是 esmodule。</p><p>解决办法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>    <span class="hljs-attr">use</span>: &#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">esModule</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 使用 commonjs 规范</span><br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;javascript/auto&#x27;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><p>重新打包，这时css图片就能正常加载了，而且 dist 目录下，也只有一张图片的资源。</p><h2 id="webpack-插件"><a href="#webpack-插件" class="headerlink" title="webpack 插件"></a>webpack 插件</h2><p>插件是在Webpack编译的某些阶段，通过调用Webpack对外暴露出的API来扩展Webpack的能力的。</p><h3 id="清理打包后文件"><a href="#清理打包后文件" class="headerlink" title="清理打包后文件"></a>清理打包后文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><br><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>()<br>]<br></code></pre></td></tr></table></figure><h2 id="webpack-devServer"><a href="#webpack-devServer" class="headerlink" title="webpack devServer"></a>webpack devServer</h2><p>到目前为止，我们都是通过打包后再查看页面的效果，这样太麻烦了，每次修改后都要打包。</p><p>有两种方式：</p><ol><li>文件监听模式</li></ol><p>只需要加上 –watch 属性即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx webpack --watch<br></code></pre></td></tr></table></figure><p>这时，命令行程序不会退出，当我们修改文件内容，会发现页面刷新了，同时更新了我们最新的代码。</p><ol start="2"><li>webpack-dev-server</li></ol><p>它通过开启一个本地服务器来加载构建完成的资源文件，它还有代理请求等功能。构建完成的资源文件在内存中，而不是存在于磁盘。</p><p>模块热替换是一个非常强大的功能，它可以在不刷新浏览器页面的情况下，直接替换修改代码部分的页面位置，能有效提高我们的开发效率。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8888</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用 模块热替换</span><br>    <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 启用静态资源压缩</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>使用模块热替换功能时，需要使用webpack.HotModuleReplacementPlugin插件的能力。在Webpack 5中，将hot参数设置为true时，会自动添加该插件，不需要我们进行额外的配置。</p><p>在我们的前端项目里，开启了模块热替换功能后，它并不会自动运行，它需要使用者触发。在模块文件里，需要使用module.hot接口来触发该功能。</p><p>示例：</p><p>我们可以在 index.html 文件中写入一个 <code>input</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>Webpack55<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后到 <code>index.js</code> 中，写下这样一段代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 触发 HMR</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>) &#123;<br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>.<span class="hljs-title function_">accept</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>我们做个实验，在 input 标签中输入一些文字，然后修改 index.js 的 console.log 代码，你会发现，页面上并没有刷新，也就是说，input 的内容没有被刷掉。但是 js 打印更新了。</p><p>我们还可以做实验：</p><p>比如，触发 HMR 的逻辑，不放到 index.js 中</p><p>我们创建一个 <code>test.js</code> 文件，将，触发 HMR 的逻辑放进来，然后 <code>index.js</code> 导入 <code>test.js</code>。</p><p>回到页面上，在 input 中输入文字，然后到 index.js 中修改 <code>console.log</code>代码，页面刷新了，input 的内容也清空了。</p><p>我们再到 input 中输入文字，然后回到 <code>test.js</code> 中，修改 console.log 代码，这时，页面不会刷新了，input 内容不会被刷掉，但是 test.js 文件更新了。</p><p>我们可以在需要 HMR 的文件中，加入 HMR 触发逻辑。</p><p>为了方便，也可以直接将 <code>HMR</code> 的触发逻辑，放到项目的入口文件中 <code>main.js</code>，之后其他文件改动，都不会刷新整个页面了。</p><p>为了减轻开发者的负担，社区常用的预处理器提供了支持模块热替换的功能，例如style-loader、vue-loader和react-hot-loader等。在使用这些工具的时候，它们会自动注入module.hot相关代码，完成模块热替换的工作，无须开发者手动调用，极大地减少了开发者的工作量。</p><h3 id="webpack-source-map"><a href="#webpack-source-map" class="headerlink" title="webpack source map"></a>webpack source map</h3><p>如果没有将Webpack配置文件的mode设置为none，那么编译后的代码会对我们的原始代码做压缩、整合等操作。而且如果使用webpack-dev-server开启的服务，打包后的代码中也会包含非常多与业务代码无关的Webpack代码。编译打包后的代码与原始代码差别非常大，我们很难调试，开发效率较低。</p><p>想要在浏览器里直接看到打包前的代码，就需要使用source map。</p><p>source map是一个单独的文件，浏览器可以通过它还原出编译前的原始代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span><br></code></pre></td></tr></table></figure><p>当配置了 source map 之后，我们再执行打包命令，会发现 dist 目录下多了几个 <code>.map</code> 结尾的文件，这就是 source map 文件。</p><p>source-map比较利于定位线上问题和调试代码，但其他人都可以通过浏览器开发者工具看到原始代码，有严重的安全风险，因此不推荐生产环境中用这个类型。基于同样的安全风险考虑，我们也不推荐使用inline-source-map。</p><h2 id="Asset-Modules"><a href="#Asset-Modules" class="headerlink" title="Asset Modules"></a>Asset Modules</h2><p>Asset Modules通常被翻译为资源模块，它指的是图片和字体等这一类型文件模块，它们无须使用额外的预处理器，Webpack通过一些配置就可以完成对它们的解析。</p><p>该功能是Webpack 5新加入的，与file-loader等预处理器的功能很像。</p><p>回顾一下file-loader的作用，它解析文件导入地址并将其替换成访问地址，同时把文件输出到相应位置。导入地址包括了JS和CSS等导入语句的地址，例如JS的import和CSS的url()。</p><p>在 <code>处理 css 中的图片资源</code> 中，我们如果仅仅使用 <code>file-loader</code> 来处理，会发现页面上无法正确显示图片。最后是采用了 <code>esModule: false</code> 以及 <code>type: &#39;javascript/auto&#39;</code> 的方式，使用 commonjs 来加载图片资源。</p><p>在 webpack5 中有了 Asset Modules，我们加上 <code>type: &#39;asset/resource&#39;</code> 配置即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>  &#125;, &#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><p>Asset Modules的几个主要配置项都存放在module.rules里，关键的配置项叫type，它的值有以下四种：</p><ul><li><p>asset/resource：与之前使用的file-loader很像，它处理文件导入地址并将其替换成访问地址，同时把文件输出到相应位置。</p></li><li><p>asset/inline：与之前使用的url-loader很像，它处理文件导入地址并将其替换为data URL，默认是Base64格式编码的URL。</p><p>执行打包命令，文件目录里不会新增图片文件，因为原始图片已经被处理成Base64格式编码的data URL并直接存放于打包生成的资源bundle.js文件里了。</p></li><li><p>asset/source：与raw-loader很像，以字符串形式导出文件资源。</p></li><li><p>asset：Webpack默认对大于8KB的资源会以asset/resource的方式处理，否则会以asset/inline的方式处理。</p></li></ul><h3 id="自定义资源名"><a href="#自定义资源名" class="headerlink" title="自定义资源名"></a>自定义资源名</h3><ol><li>通过generator.filename配置项来配置</li></ol><p>在module.rules里增加了generator.filename配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>    <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>  &#125;, &#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span>,<br>    <span class="hljs-attr">generator</span>: &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;static/[hash:8][ext][query]&#x27;</span> <span class="hljs-comment">// 表示处理生成的图片在static目录下，其名称是8位hash值与后缀名的组合。</span><br>    &#125;<br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在output里配置</li></ol><p>在output里增加了assetModuleFilename配置项，该配置项用来表示资源模块处理文件后的名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">output</span>: &#123;<br>  <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  <span class="hljs-attr">assetModuleFilename</span>: <span class="hljs-string">&#x27;static/[hash:8][ext][query]&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>这两种方式配置资源文件名称的效果是一样的，并且<code>仅可用于type取值是asset和asset/resource的情况</code>。</p><h2 id="生产环境配置"><a href="#生产环境配置" class="headerlink" title="生产环境配置"></a>生产环境配置</h2><p>实际开发中，开发环境的配置和生产环境的配置有很多是相同的。</p><p>相同的配置要分别与开发环境和生产环境合并，我们会用到 <code>webpack-merge</code> 这个工具，它类似于Object.assign方法，但它比Object.assign更加强大，非常适合对Webpack的配置项进行合并。</p><p>那我们在构建时，如何区分生产环境和开发环境呢？</p><p>使用环境变量。</p><p>在我们使用Webpack的过程中，会遇到以下两种环境变量。</p><ol><li><p>Node.js环境里的环境变量。（执行JS代码时可以获取到的环境变量，它们存放在process.env模块中）</p></li><li><p>Webpack打包模块里的环境变量。</p></li></ol><h3 id="Nodejs-环境变量"><a href="#Nodejs-环境变量" class="headerlink" title="Nodejs 环境变量"></a>Nodejs 环境变量</h3><p>在实际开发中，我们一般需要设置跨操作系统的环境变量。通常，在npm的package.json文件中，我们可以通过跨操作系统的cross-env MY_ENV=dev这种方式进行环境变量的设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><br><span class="hljs-string">&quot;script&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;cross_env MY_ENV=dev webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>本地开发环境可以使用 <code>cross-env NODE_ENV=development</code>，生产环境可以使用cross-env NODE_ENV=production。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;环境变量 &#x27;</span>, process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span>)<br></code></pre></td></tr></table></figure><p>注意：我们配置的 Nodejs 环境变量，在 js 脚本文件中是无法被获取到的，因为 js 脚本通过 html 引入，无法获取 Nodejs 中的环境变量。</p><h3 id="webpack-环境变量"><a href="#webpack-环境变量" class="headerlink" title="webpack 环境变量"></a>webpack 环境变量</h3><p>在实际开发中，我们有时候需要在业务逻辑代码里根据此代码是运行在本地开发环境还是线上生产环境里做区分，这个时候就需要在业务模块文件里注入环境变量。</p><p>我们通过DefinePlugin插件来设置打包模块里的环境变量，它是Webpack自带的一个插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DefinePlugin</span>(&#123;<br>    <span class="hljs-attr">isMe</span>: <span class="hljs-string">&quot;&#x27;YES&#x27;&quot;</span>,<br>    <span class="hljs-attr">env</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;development&#x27;</span>)<br>  &#125;)<br>]<br></code></pre></td></tr></table></figure><p>需要注意的是，我们在设置一个字符串值的时候，需要在外层再包裹一层引号，或者使用JSON.stringify()方法。如果不进行一层额外包裹，Webpack会把该字符串当成一个变量来处理。</p><p>然后到 <code>index.js</code> 文件中，直接获取定义的变量即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;webpack : &#x27;</span>, isMe, env)<br></code></pre></td></tr></table></figure><h3 id="样式文件提取"><a href="#样式文件提取" class="headerlink" title="样式文件提取"></a>样式文件提取</h3><p>Webpack 3及之前的版本里常用到的插件是extract-text-webpack-plugin，Webpack 3之后的版本里一般用的插件是mini-css-extract-plugin。</p><p>使用mini-css-extract-plugin插件时有以下两个关键点：</p><p>一是它自身带有一个预处理器，在用css-loader处理完CSS模块后，需要紧接着使用MiniCssExtractPlugin.loader这个预处理器。</p><p>二是它需要在Webpack配置文件的插件列表进行配置，执行new MiniCssExtractPlugin命令时需要传入一个对象，filename表示同步代码里提取的CSS文件名称，chunkFilename表示<code>异步代码</code>里提取的CSS文件名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>    <span class="hljs-attr">use</span>: [<br>      <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>      <span class="hljs-string">&#x27;css-loader&#x27;</span><br>    ]<br>  &#125;, &#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span><br>  &#125;]<br>&#125;,<br><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(), <span class="hljs-comment">// 清空 dist</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLWebpackPlugin</span>(&#123; <span class="hljs-comment">// 自动帮我们引入脚本和 css 文件</span><br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span><br>  &#125;),<br>  <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DefinePlugin</span>(&#123;<br>    <span class="hljs-attr">isMe</span>: <span class="hljs-string">&quot;&#x27;YES&#x27;&quot;</span>,<br>    <span class="hljs-attr">env</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;development&#x27;</span>)<br>  &#125;),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name]-[contenthash:8].css&#x27;</span>, <span class="hljs-comment">// 同步代码里提取的CSS文件名称。</span><br>    <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[id].css&#x27;</span> <span class="hljs-comment">// 异步代码里提取的CSS文件名称。</span><br>  &#125;)<br>]<br></code></pre></td></tr></table></figure><h3 id="处理-sass"><a href="#处理-sass" class="headerlink" title="处理 sass"></a>处理 sass</h3><p>在业务开发中，我们通常会采用Sass或Less来书写样式文件，本节介绍Sass样式文件如何进行处理，Less样式文件的处理也是类似的。</p><p>处理Sass样式文件需要使用sass-loader预处理器，使用它需要先安装sass-loader这个npm包。sass-loader底层依赖于Node Sass或Dart Sass进行处理，它们对应的npm包的名称分别是node-sass和sass。因为node-sass包在安装使用过程中容易遇到一些问题，所以我们推荐使用sass这个npm包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -D sass@<span class="hljs-number">1.32</span><span class="hljs-number">.8</span> sass-loader@<span class="hljs-number">11.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p>Sass有两种书写样式的方式，分别是Sass和Scss，这里我们采用Scss的书写方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">// test<span class="hljs-selector-class">.scss</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: pink <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../../img/home.jpg&#x27;</span>);<br><br>  <span class="hljs-selector-class">.hello</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在入口文件中引入 <code>test.scss</code></p><p>修改 <code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|css)$/</span>,<br>    <span class="hljs-attr">use</span>: [<br>      <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>      <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>      <span class="hljs-string">&#x27;sass-loader&#x27;</span><br>    ]<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h3><p>PostCSS是一个转换CSS的工具，但它本身没有提供具体的样式处理能力。我们可以认为它是一个<code>插件平台</code>，具体的样式处理能力由它转交给专门的样式插件来处理。</p><p>在Webpack中使用PostCSS，需要安装<code>postcss-loader</code>这个npm包。在Webpack文件里配置处理样式模块规则时，让postcss-loader在css-loader之前进行处理即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -D postcss-loader@<span class="hljs-number">5.1</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>在使用PostCSS的时候也需要增加相应的配置文件，我们在工程根目录下增加<code>postcss.config.js</code>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|css)$/</span>,<br>    <span class="hljs-attr">use</span>: [<br>      <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>      <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>      <span class="hljs-string">&#x27;postcss-loader&#x27;</span>, <span class="hljs-comment">// 新增</span><br>      <span class="hljs-string">&#x27;sass-loader&#x27;</span><br>    ]<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>我们css 中加入 <code>flex</code> 样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: pink <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../../img/home.jpg&#x27;</span>);<br><br>  <span class="hljs-selector-class">.hello</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们不配置 <code>postcss.config.js</code>，那么打包后跟之前打包的结果没有任何区别。</p><p>在开发过程中，我们使用PostCSS最重要的一个功能就是提供CSS样式浏览器厂商私有前缀，它是通过Autoprefixer来实现的。我们也可以通过postcss-preset-env来实现该功能，postcss-preset-env里包含了Autoprefixer，我们先使用Autoprefixer。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -D autoprefixer@<span class="hljs-number">10.2</span><span class="hljs-number">.5</span><br></code></pre></td></tr></table></figure><p>配置 <code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> autoprefixer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">autoprefixer</span>(&#123;<br>      <span class="hljs-attr">browsers</span>: [<br>        <span class="hljs-string">&#x27;chrome &gt;= 18&#x27;</span><br>      ]<br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>其实这个 <code>browsers</code> 也可以在 package.json 中配置 <code>browserslist</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;browserslist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;chrome &gt;= 18&quot;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>我们再重启项目，查看样式代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.hello</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>  <span class="hljs-attribute">display</span>: -webkit-flex;<br>  <span class="hljs-attribute">display</span>: flex;<br>  -webkit-box-pack: center;<br>  -webkit-<span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="合并配置-webpack-merge"><a href="#合并配置-webpack-merge" class="headerlink" title="合并配置 webpack-merge"></a>合并配置 webpack-merge</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -D webpack-merge@<span class="hljs-number">5.7</span><span class="hljs-number">.3</span><br></code></pre></td></tr></table></figure><p>我们在package.json文件里配置了两个npm命令，分别对应本地开发环境打包和生产环境打包。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=development webpack serve&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=production webpack&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>我们可以直接在 <code>webpack.config.js</code> 中通过环境变量的判断，来应对生产环境和开发环境，但是当项目庞大起来了，配置越来越多且复杂的时候，这种方式就不优雅了。</p><p>业界流行的解决办法是把开发环境与生产环境公共的配置提取到一个单独的文件里，然后分别维护一份开发环境的配置文件和一份生产环境的配置文件，并将公共配置文件的JS代码合并到这两个文件里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.common.js</span><br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HTMLWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./index.js&#x27;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8888</span>,<br>    <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;&#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./index.html&#x27;</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.development.js</span><br><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>) <br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.common.js&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(common, &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|css)$/</span>,<br>      <span class="hljs-attr">use</span>: [<br>        <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>        <span class="hljs-string">&#x27;sass-loader&#x27;</span><br>      ]<br>    &#125;, &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span><br>    &#125;]<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.production.js</span><br><span class="hljs-keyword">const</span> &#123; merge &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>)<br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.common.js&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">merge</span>(common, &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(scss|css)$/</span>,<br>      <span class="hljs-attr">use</span>: [<br>        <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>        <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>        <span class="hljs-string">&#x27;sass-loader&#x27;</span><br>      ]<br>    &#125;, &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(jpg|png|jpeg)$/</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span><br>    &#125;]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name]-[contenthash:8].css&#x27;</span>,<br>      <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">&#x27;[id].css&#x27;</span><br>    &#125;)<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=development webpack serve --config webpack.development.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cross-env NODE_ENV=production webpack --config webpack.production.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>Webpack性能优化总体包括两部分，分别是开发环境的优化与生产环境的优化。</p><ul><li>打包体积分析工具webpack-bundle-analyzer</li></ul><p>webpack-bundle-analyzer开启的分析页面，这个页面可以通过控制鼠标来进行放大、缩小等操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -D webpack-bundle-analyzer@<span class="hljs-number">4.3</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><ul><li><p>打包速度分析工具speed-measure-webpack-plugin</p><p>speed-measure-webpack-plugin工具可以帮我们分析Webpack在打包过程中预处理器和插件等花费的时间。</p></li><li><p>压缩JS文件</p><p>在Webpack 4之前，我们会使用webpack.optimize.UglifyJsPlugin或webpack-parallel-uglify-plugin这一类的插件进行JS文件压缩，现在我们通常使用terser-webpack-plugin插件进行JS文件压缩。</p><p>在Webpack 5中，在安装Webpack时会自动安装terser-webpack-plugin插件，因此不需要我们单独安装。</p></li><li><p>压缩css</p></li><li><p>配置预处理器的exclude与include</p><p>exclude可以排除不需要该预处理器解析的文件目录，include可以设置该预处理器只对哪些目录生效，这样可以减少不需要被预处理器处理的文件模块，从而提升构建速度。</p></li><li><p>module.noParse</p><p>有些模块不需要被任何预处理器解析，例如jQuery与Lodash这一类的工具库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">noParse</span>: <span class="hljs-regexp">/jQuery|lodash/</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码分割 optimization.splitChunks</p><p>代码分割是Webpack优化中非常重要的一部分，Webpack里主要有三种方法进行代码分割。</p><ol><li>入口entry：配置entry入口文件，从而手动分割代码。</li><li>动态加载：通过import等方法进行按需加载。</li><li>抽取公共代码：使用splitChunks等技术抽取公共代码。</li></ol><p>splitChunks指的是Webpack插件SplitChunksPlugin，在Webpack的配置项optimization.splitChunks里直接配置即可，无须单独安装。</p><p>在Webpack 4之前，Webpack是通过CommonsChunkPlugin插件来抽取公共代码的，Webpack 4之后使用的是SplitChunksPlugin插件，在Webpack 5中又对其进行了优化，接下来将详细说明SplitChunksPlugin插件在Webpack 5中的使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-comment">// config</span><br>      <span class="hljs-attr">chunks</span>: 表示从什么类型的chunks里面提取代码，有三个字符串值initial、<span class="hljs-keyword">async</span>、all可以使用，另外也可以使用函数来匹配要提取的chunks。其默认值是<span class="hljs-keyword">async</span>，表示只从动态加载的chunks里提取代码。initial表示只从入口chunks里提取代码，all表示同时从异步chunks和入口chunks里提取代码。<br><br>      <span class="hljs-attr">minSize</span>: 表示提取出来的chunk的最小体积，其在<span class="hljs-title class_">Webpack</span> <span class="hljs-number">5</span>中的默认值是<span class="hljs-number">20000</span>，表示20kB，只有达到这个值时才会被提取。<br><br>      <span class="hljs-attr">maxSize</span>: 表示提取出来的chunk的最大体积，其默认值是<span class="hljs-number">0</span>，表示不限制最大体积。它是一个可以违反的值，在被违反时起提示作用。<br><br>      <span class="hljs-attr">minChunks</span>: 默认值是<span class="hljs-number">1</span>，表示拆分前至少被多少个chunks引用的模块才会被提取。<br><br>      <span class="hljs-comment">//...</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>摇树优化Tree Shaking</p><p>Tree Shaking可以帮我们检测模块中没有用到的代码块，并在Webpack打包时将没有使用到的代码块移除，减小打包后的资源体积。它的名字也非常形象，通过摇晃树把树上干枯无用的叶子摇掉。</p><p>通常我们在本地开发环境下不会使用Tree Shaking，因为它会降低构建速度并且没有太大意义。我们需要在生产环境打包时开启Tree Shaking，生产环境下我们只需要配置参数项mode为production，即可自动开启Tree Shaking。</p></li><li><p>缓存</p><p>在使用Webpack开发前端工程时，涉及的缓存主要有两类：一类是访问Web页面时的浏览器缓存，我们称其为长期缓存；另一类是Webpack构建过程中的缓存，我们称其为持久化缓存或编译缓存。</p><p>在Webpack 5之前的版本里，Webpack自身没有提供持久化缓存，我们在开发时经常需要使用cache-loader或dll动态链接技术来做缓存方面的处理，这无疑提高了我们的学习成本和Webpack配置的复杂度。Webpack 5提供了持久化缓存，它通过使用文件系统缓存，极大地减少了再次编译的时间。</p></li></ul><h2 id="Webpack构建原理"><a href="#Webpack构建原理" class="headerlink" title="Webpack构建原理"></a>Webpack构建原理</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1Va4y1G7HX?p=5&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe">https://www.bilibili.com/video/BV1Va4y1G7HX?p=5&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe</a></p></blockquote><h1 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h1><blockquote><p>Rollup 是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。</p><p><a href="https://www.rollupjs.com/">https://www.rollupjs.com/</a></p></blockquote><h1 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h1><blockquote><p>零配置的前端打包器</p></blockquote><h1 id="ESBuild"><a href="#ESBuild" class="headerlink" title="ESBuild"></a>ESBuild</h1><p>极速 JavaScript 打包器，速度比其它打包工具<strong>快</strong>的 10 - 100 倍。</p><p>主要特性：</p><ul><li>极快的速度，无需缓存</li><li>支持 ES6 和 CommonJS 模块</li><li>支持对 ES6 模块进行 tree shaking</li><li>API 可同时用于 JavaScript 和 Go</li><li>兼容 TypeScript 和 JSX 语法</li><li>支持 Source maps</li><li>支持 Minification</li><li>支持 plugins</li></ul><h2 id="它为什么这么快？"><a href="#它为什么这么快？" class="headerlink" title="它为什么这么快？"></a>它为什么这么快？</h2><ol><li>它是用Go语言编写的，编译成可执行代码</li></ol><p>JavaScript必须基于解释器的node环境才能执行，所以当webpack等工具解释完本身的代码后，可能esbuild已经完成编译工作了，而这时候webpack才开始执行编译。</p><p>此外，Go的核心设计是并行的，而JavaScript不是。</p><p>Go有线程之间的共享内存，而JavaScript则必须在线程之间进行数据序列化。</p><h2 id="webpack-中使用-ESBuild"><a href="#webpack-中使用-ESBuild" class="headerlink" title="webpack 中使用 ESBuild"></a>webpack 中使用 ESBuild</h2><blockquote><p><a href="https://www.npmjs.com/package/esbuild-loader">https://www.npmjs.com/package/esbuild-loader</a></p><p>esbuild-loader: Speed up your Webpack build with esbuild! 🔥</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i -D esbuild-loader<br></code></pre></td></tr></table></figure><p>Use esbuild-loader to transform new JavaScript syntax to support older browsers, and TypeScript to JavaScript.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">module</span>: &#123;<br>      <span class="hljs-attr">rules</span>: [<br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//   test: /\.js$/,</span><br>        <span class="hljs-comment">//   use: &#x27;babel-loader&#x27;</span><br>        <span class="hljs-comment">// &#125;,</span><br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//   test: /\.tsx?$/,</span><br>        <span class="hljs-comment">//   use: &#x27;ts-loader&#x27;</span><br>        <span class="hljs-comment">// &#125;,</span><br>        &#123;<br>          <span class="hljs-comment">// Match js, jsx, ts &amp; tsx files</span><br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.[jt]sx?$/</span>,<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;esbuild-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-comment">// JavaScript version to compile to</span><br>            <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2015&#x27;</span><br>          &#125;<br>        &#125;,<br><br>        ...<br>      ],<br>    &#125;,<br>  &#125;<br><br></code></pre></td></tr></table></figure><h2 id="webpack-中使用-esbuild-来压缩-JS-代码"><a href="#webpack-中使用-esbuild-来压缩-JS-代码" class="headerlink" title="webpack 中使用 esbuild 来压缩 JS 代码"></a>webpack 中使用 esbuild 来压缩 JS 代码</h2><p>You can replace JS minifiers like Terser or UglifyJs. </p><p>In webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">EsbuildPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;esbuild-loader&#x27;</span>)<br><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    ...,<br>    <span class="hljs-attr">optimization</span>: &#123;<br>      <span class="hljs-attr">minimizer</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsbuildPlugin</span>(&#123;<br>          <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2015&#x27;</span><br>        &#125;)<br>      ]<br>    &#125;,<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="webpack-中使用-esbuild-来压缩-css-代码"><a href="#webpack-中使用-esbuild-来压缩-css-代码" class="headerlink" title="webpack 中使用 esbuild 来压缩 css 代码"></a>webpack 中使用 esbuild 来压缩 css 代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">EsbuildPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;esbuild-loader&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">minimizer</span>: [<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">EsbuildPlugin</span>(&#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2015&#x27;</span>,<br>        <span class="hljs-attr">css</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 压缩 css</span><br>      &#125;)<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你的 CSS 不是作为 CSS 文件发出的，而是使用类似 style-loader 的东西通过 JS 加载的，那么你可以使用 loader 进行压缩。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>   ...,<br><br>   <span class="hljs-attr">module</span>: &#123;<br>     <span class="hljs-attr">rules</span>: [<br>       &#123;<br>         <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>         <span class="hljs-attr">use</span>: [<br>           <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>           <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>           &#123;<br>             <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;esbuild-loader&#x27;</span>,<br>             <span class="hljs-attr">options</span>: &#123;<br>               <span class="hljs-attr">minify</span>: <span class="hljs-literal">true</span><br>             &#125;<br>           &#125;<br>         ]<br>       &#125;<br>     ]<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h1><blockquote><p><a href="https://vitejs.cn/">https://vitejs.cn/</a></p><p>下一代前端开发与构建工具</p></blockquote><p>Vite 使用 esbuild 预构建依赖。</p><p>特性：</p><ul><li><p>💡 极速的服务启动<br>使用原生 ESM 文件，无需打包!</p></li><li><p>⚡️ 轻量快速的热重载<br>无论应用程序大小如何，都始终极快的模块热重载（HMR）</p></li><li><p>🛠️ 丰富的功能<br>对 TypeScript、JSX、CSS 等支持开箱即用。</p></li><li><p>📦 优化的构建<br>可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建</p></li><li><p>🔩 通用的插件<br>在开发和构建之间共享 Rollup-superset 插件接口。</p></li><li><p>🔑 完全类型化的API<br>灵活的 API 和完整 TypeScript 类型。</p></li></ul><p>像 webpack 等打包器，在开发时，是先将我们的构建内容放到内存中，这样它们只需要在文件更改时使模块图的一部分失活，但它也仍需要整个重新构建并重载页面。</p><p>Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。</p><h2 id="为什么生产环境还需要打包？"><a href="#为什么生产环境还需要打包？" class="headerlink" title="为什么生产环境还需要打包？"></a>为什么生产环境还需要打包？</h2><p>尽管原生 ESM 现在得到了广泛支持，<code>但由于嵌套导入会导致额外的网络往返</code>，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。</p><p>为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。</p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p>用于生产环境的构建包会假设目标浏览器支持现代 JavaScript 语法。默认情况下，Vite 的目标是能够支持原生 ESM script 标签、支持原生 ESM 动态导入 和 import.meta 的浏览器：</p><ul><li>Chrome &gt;=87</li><li>Firefox &gt;=78</li><li>Safari &gt;=14</li><li>Edge &gt;=88</li></ul><p>你也可以通过 build.target 配置项 指定构建目标，最低支持 es2015。</p><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ul><li><a href="https://www.bilibili.com/video/BV1GN4y1M7P5/?spm_id_from=333.337.search-card.all.click&vd_source=a9f38e58a519cc0570c2dacd34ad7ebe">从0到1学习 vite</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Webpack、ESBuild、Rollup、Vite、Parcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>温故而知新（JavaScript）</title>
    <link href="/post/%E9%87%8D%E6%B8%A9JavaScript.html"/>
    <url>/post/%E9%87%8D%E6%B8%A9JavaScript.html</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型-7"><a href="#数据类型-7" class="headerlink" title="数据类型(7)"></a>数据类型(7)</h1><ol><li>原始数据类型(6种)<br>a. 数值<br>b. 字符串<br>c. 布尔值<br>d. undefined<br>e. Null<br>f. Symbol（ECMAScript 6 新增）</li></ol><p>g.任意精度的整数 (BigInt) ，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制</p><ol start="2"><li>引用数据类型<br>a. 对象<br>b. 数组<br>c. 函数<br>…</li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>加减乘除、取模、自增自减</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b;<br><br><span class="hljs-keyword">var</span> sum = (b = a++ + --a) + a-- + b++;<br></code></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()<br><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><p>concat: 连接两个或多个数组，并返回一个新数组。</p><p>join: 将数组中的所有项连接成一个字符串。</p><p>pop: 删除并返回数组的最后一项。</p><p>push: 在数组的末尾添加一个或多项并返回数组的新长度。</p><p>shift: 删除并返回数组的第一项。</p><p>unshift: 在数组的开头添加一个或多项。</p><p>slice: 返回一个数组的片段，该片段包括开始索引到结束索引（不包括结束索引）的所有项。</p><p>splice: 在数组中插入、删除或替换项。</p><p>sort: 对数组的所有项进行排序。</p><p>reverse: 反转数组中的项的顺序。</p><p>indexOf: 返回数组中第一个与给定值匹配的项的索引，如果未找到，则返回 -1。</p><p>lastIndexOf: 返回数组中最后一个与给定值匹配的项的索引，如果未找到，则返回 -1。</p><p>forEach: 对数组中的每一项执行给定的回调函数。</p><p>map: 对数组中的每一项执行给定的回调函数，并返回一个新数组，其中的每一项是回调函数的返回值。</p><p>filter: 对数组中的每一项执行给定的回调函数，并返回一个新数组，其中只包含回调函数返回 true 的项。</p><p>reduce: 从左到右对数组中的所有项进行累加，并返回单个值。</p><p>reduceRight: 从右到左对数组中的所有项进行累加，并返回单个值。</p><p>some: 如果数组中至少有一个项通过了给定的测试，则返回 true，否则返回 false。</p><p>every: 如果数组中的所有项都通过了给定的测试，则返回 true，否则返回 false。</p><h1 id="JS编译原理"><a href="#JS编译原理" class="headerlink" title="JS编译原理"></a>JS编译原理</h1><p>JavaScript 是一种解释型语言，而非编译型语言。这意味着，JavaScript 代码在运行时被动态解释，而不是在编译时预先翻译成机器代码。</p><p>在 JavaScript 中，代码会被加载到浏览器或 Node.js 环境中，然后通过 JavaScript 引擎（例如 V8）解释和执行代码。在解释代码之前，JavaScript 引擎会对代码进行词法分析和语法分析，以确定代码的语法正确性和语义。然后，代码将被执行。</p><p>总的来说，JavaScript 没有明确的编译过程，但它在加载和运行代码之前经过了词法和语法分析。</p><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>词法分析的目的是将 JavaScript 代码的字符串形式转换为一系列词法单元 (tokens)，每个词法单元代表 JavaScript 代码的一个有意义的组成部分，如变量名，运算符，函数等。</p><h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>语法分析的目的是将词法单元组合成语法树，语法树代表 JavaScript 代码的结构和语义。</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>产生条件</p><ol><li><p>函数内部有另一个函数</p></li><li><p>函数内部的函数里面用到了外部函数的局部变量</p></li><li><p>外部函数将内部函数作为返回值 return 出去了。</p></li></ol><p>好处：</p><p>闭包中的变量，充当全局变量使用，减少全局变量的混乱程度。</p><p>清除：</p><p>将变量设置为 null 即可。</p><h1 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h1><p>当我们在代码中使用 new 关键字，它会执行以下操作：</p><ul><li>创建一个空对象</li><li>将该对象的原型链指向构造函数的原型对象</li><li>将函数内部的 this 关键字指向新创建的对象</li><li>在新创建的对象上执行构造函数中的代码</li><li>返回该对象</li></ul><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ol><li><p>普通函数中，谁调用此函数，this 就指向谁。箭头函数中没有自己的this，在哪里定义，或者说箭头函数外部的this指向谁，就是谁。</p></li><li><p>方法中的this，指向调用方法的对象。</p></li><li><p>指向全局对象：全局函数中的this</p></li><li><p>事件中的 this，指向 dom 对象。</p></li><li><p>构造函数中的 this，指向 new 创建的对象。</p></li></ol><h1 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h1><p>它们的作用都是为了改变 this 的指向</p><p>区别是参数不同，第一个参数是想要使用的对象，第二个参数是传递给函数的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dog = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;is dog&#x27;</span>,<br>  <span class="hljs-title function_">sayName</span>(<span class="hljs-params">name1, name2, name3</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> cat = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喵喵喵&#x27;</span><br>&#125;<br><br>dog.<span class="hljs-property">sayName</span>.<span class="hljs-title function_">call</span>(cat, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>dog.<span class="hljs-property">sayName</span>.<span class="hljs-title function_">apply</span>(cat, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-keyword">const</span> fn = dog.<span class="hljs-property">sayName</span>.<span class="hljs-title function_">bind</span>(cat, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-title function_">fn</span>()<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cat = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喵喵喵&#x27;</span>,<br>  <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-comment">// 等价于 window 对象调用定时器</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// window</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> cat = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;喵喵喵&#x27;</span>,<br>  <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// cat</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// 喵喵喵</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br>cat.<span class="hljs-title function_">sayName</span>()<br></code></pre></td></tr></table></figure><h1 id="nextTick-和-setImmediate"><a href="#nextTick-和-setImmediate" class="headerlink" title="nextTick 和 setImmediate"></a>nextTick 和 setImmediate</h1><p>同步代码执行完毕，执行 nextTick，然后是异步代码（setTimeout），最后执行 setImmediate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setImmediate</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setImmediate&#x27;</span>)<br>&#125;)<br><br>process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-number">0</span>);<br><br><br><span class="hljs-comment">// =&gt;&gt;&gt;&gt;&gt;&gt;  2 1 3 setImmediate</span><br></code></pre></td></tr></table></figure><p>setImmediate表示当前事件循环即将结束时，执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setImmediate</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setImmediate&#x27;</span>)<br>&#125;)<br><br>process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br>&#125;, <span class="hljs-number">0</span>);<br><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">// =====&gt; 2 6 1 3 5 setImmediate 4(一秒后输出4)</span><br></code></pre></td></tr></table></figure><h1 id="宏任务-amp-微任务"><a href="#宏任务-amp-微任务" class="headerlink" title="宏任务&amp;微任务"></a>宏任务&amp;微任务</h1><p>宏任务：计时器、ajax、读取文件</p><p>微任务：promise.then</p><p>一次事件循环的执行顺序:</p><ol><li><p>同步程序</p></li><li><p>process.nextTick</p></li><li><p>微任务</p></li><li><p>宏任务</p></li><li><p>setImmediate</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 当前事件循环最后执行</span><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setImmediate&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 宏任务执行完毕之后 微任务执行之前执行</span><br>process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>&#125;)<br><br><span class="hljs-comment">// 立即执行</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 立即执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">7</span>)<br>  <span class="hljs-title function_">r</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 微任务，process.nextTick 执行之后执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">8</span>)<br>&#125;)<br><br><span class="hljs-comment">// 宏任务</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 微任务执行后执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 放到下一次循环中执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>)<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 微任务执行后执行</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>)<br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 立即执行</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">6</span>)<br><br><br><span class="hljs-comment">// 2 7 6 1 8 3 5 setImmediate 4</span><br></code></pre></td></tr></table></figure><h1 id="浅拷贝、深拷贝"><a href="#浅拷贝、深拷贝" class="headerlink" title="浅拷贝、深拷贝"></a>浅拷贝、深拷贝</h1><p>浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;is obj&#x27;</span>,<br>  <span class="hljs-attr">girlfriend</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj)<br><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;is o&#x27;</span><br>obj.<span class="hljs-property">girlfriend</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;小花&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o)<br></code></pre></td></tr></table></figure><p>深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;is obj&#x27;</span>,<br>  <span class="hljs-attr">girlfriend</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">const</span> o = &#123;&#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(obj, key)) &#123;<br>      <br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        o[key] = <span class="hljs-title function_">deepClone</span>(obj[key])<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        o[key] = obj[key];<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> o<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JSON-stringify实现深克隆"><a href="#JSON-stringify实现深克隆" class="headerlink" title="JSON.stringify实现深克隆"></a>JSON.stringify实现深克隆</h1><p>将一个 JSON 对象，转化为字符串，通过 JSON.parse 将字符串转化为对象，从而实现深克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;is obj&#x27;</span>,<br>  <span class="hljs-attr">girlfriend</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> o = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj))<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o)<br></code></pre></td></tr></table></figure><p>JSON.stringify 存在的问题：</p><p>如果属性值是 undefined 或者是方法（含箭头函数），克隆出来后，undefined 和函数会丢失</p><h1 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h1><blockquote><p>parseInt(string, radix) 解析一个字符串并返回指定基数的十进制整数，radix 是 2-36 之间的整数，表示被解析字符串的基数。</p></blockquote><p>string: 要被解析的值。</p><ul><li>如果参数不是一个字符串，则将其转换为字符串 (使用 ToString抽象操作)。</li><li>字符串开头的空白符将会被忽略。</li></ul><h2 id="parseInt-0-0000005-5-为-true"><a href="#parseInt-0-0000005-5-为-true" class="headerlink" title="parseInt (0.0000005) === 5 为 true"></a><strong>parseInt (0.0000005) === 5 为 true</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-number">0.5</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;0.5&#x27;</span><br>(<span class="hljs-number">0.05</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;0.05&#x27;</span><br>(<span class="hljs-number">0.005</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;0.005&#x27;</span><br>(<span class="hljs-number">0.0005</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;0.0005&#x27;</span><br>(<span class="hljs-number">0.00005</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;0.00005&#x27;</span><br>(<span class="hljs-number">0.000005</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;0.000005&#x27;</span><br>(<span class="hljs-number">0.0000005</span>).<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">//  &#x27;5e-7&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>可以发现当数字过小时，toString 输出的结果是科学计数法形式。</li><li>parseInt 只能将字符串的前导部分解释为整数值；它忽略任何不能被解释为整数的代码单元，并且不会有忽略指示。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">0.5</span>) <span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-number">0.0000005</span>) <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h2 id="radix-默认值是-10-吗，何种情况返回值是-NaN？"><a href="#radix-默认值是-10-吗，何种情况返回值是-NaN？" class="headerlink" title="radix 默认值是 10 吗，何种情况返回值是 NaN？"></a>radix 默认值是 10 吗，何种情况返回值是 NaN？</h2><ol><li>当 radix 值为 undefined、0 或未指定的，那 JavaScript 会如何处理这种情况:</li></ol><ul><li>如果输入的 string 以 0x 或 0X 开头，那么 radix 会被假定为 16 ，字符串的其他部分按照十六进制来解析。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;0x51&#x27;</span>) <span class="hljs-comment">// 5*16^1 + 1*16^0 = 81</span><br></code></pre></td></tr></table></figure></li><li>如果输入的 string 以 0 开头，ES5 规定使用十进制，但并非所有的浏览器都支持，因此使用 parseInt 时，需要指定 radix</li><li>如果输入的 string 以其他任何值开头，radix 值为 10</li></ul><ol start="2"><li>radix 参数的值为 2 ~ 36，当 radix 小于 2 或 大于 36(不包含 0)，返回值为 NaN</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">38</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><ol start="3"><li>待转换字符串中，所有的可转换数字都不小于 radix 值</li></ol><p>例如 radix 值为 2 (二进制)，而待转换字符串为 ‘3456’，二进制内只有 0、1 是基本算符，因此字符串 ‘3456’ 无法转换成二进制，返回值为 NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;3456&quot;</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;45px&quot;</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><h2 id="‘1’-‘2’-‘3’-map-parseInt"><a href="#‘1’-‘2’-‘3’-map-parseInt" class="headerlink" title="[‘1’, ‘2’, ‘3’].map(parseInt)"></a>[‘1’, ‘2’, ‘3’].map(parseInt)</h2><blockquote><p>[parseInt(“1”, 0), parseInt(“2”, 1), parseInt(“3”, 2)]</p></blockquote><ul><li><p>parseInt(“1”, 0)<br>radix 为 0，且 string 以字符 1 开始，radix 值为 10，值为 1。</p></li><li><p>parseInt(“2”, 1)<br>符合 2.2 ，radix 小于 2，返回 NaN</p></li><li><p>parseInt(“3”, 2)<br>待转换字符串中，所有的可转换数字大于 radix 值，返回 NaN</p></li></ul><h1 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h1><ul><li><p>GUI渲染线程</p><ul><li>负责渲染页面，布局和绘制</li><li>页面需要重绘和回流时，该线程就会执行</li><li>与js引擎线程互斥，防止渲染结果不可预期</li></ul></li><li><p>JS引擎线程</p><ul><li>负责处理解析和执行javascript脚本程序</li><li>只有一个JS引擎线程（单线程）</li><li>与GUI渲染线程互斥，防止渲染结果不可预期</li></ul></li><li><p>事件触发线程</p><ul><li>用来控制事件循环（鼠标点击、setTimeout、ajax等）</li><li>当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中</li></ul></li><li><p>定时触发器线程</p><ul><li>setInterval与setTimeout所在的线程</li><li>定时任务并不是由JS引擎计时的，是由定时触发线程来计时的</li><li>计时完毕后，通知事件触发线程</li></ul></li></ul><ul><li>异步http请求线程<ul><li>浏览器有一个单独的线程用于处理AJAX请求</li><li>当请求完成时，若有回调函数，通知事件触发线程</li></ul></li></ul><h1 id="为什么-javascript-是单线程的"><a href="#为什么-javascript-是单线程的" class="headerlink" title="为什么 javascript 是单线程的?"></a>为什么 javascript 是单线程的?</h1><p>首先是历史原因，在创建 javascript 这门语言时，多进程多线程的架构并不流行，硬件支持并不好。</p><p>其次是因为多线程的复杂性，多线程操作需要加锁，编码的复杂性会增高。</p><p>而且，如果同时操作 DOM ，在多线程不加锁的情况下，最终会导致 DOM 渲染的结果不可预期。</p><h1 id="为什么-GUI-渲染线程与-JS-引擎线程互斥"><a href="#为什么-GUI-渲染线程与-JS-引擎线程互斥" class="headerlink" title="为什么 GUI 渲染线程与 JS 引擎线程互斥?"></a>为什么 GUI 渲染线程与 JS 引擎线程互斥?</h1><p>这是由于 JS 是可以操作 DOM 的，如果同时修改元素属性并同时渲染界面(即 JS线程和UI线程同时运行)，<br>那么渲染线程前后获得的元素就可能不一致了。</p><p>因此，为了防止渲染出现不可预期的结果，浏览器设定 GUI渲染线程和JS引擎线程为互斥关系，<br>当JS引擎线程执行时GUI渲染线程会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行。</p><h1 id="如何理解-JS-的运行机制（Event-Loop）"><a href="#如何理解-JS-的运行机制（Event-Loop）" class="headerlink" title="如何理解 JS 的运行机制（Event Loop）?"></a>如何理解 JS 的运行机制（Event Loop）?</h1><blockquote><p><a href="https://juejin.cn/post/6844903919789801486">https://juejin.cn/post/6844903919789801486</a></p></blockquote><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ol><li>JS分为同步任务和异步任务</li><li>同步任务都在 <code>JS 引擎线程</code> 上执行，形成一个执行栈</li><li><code>事件触发线程</code> 管理一个任务队里，异步任务触发条件达成，将回调事件放入执行栈中执行</li><li>执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行</li></ol><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><ol><li>执行一个宏任务（栈中没有，就从任务队列中获取）</li><li>执行过程中如果遇到了微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕，立即执行微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后 GUI 渲染线程接管，开始渲染</li><li>渲染完毕后，JS 线程接管，开始下一个宏任务（从任务队列中获取）</li></ol><img src="/img/event loop.jpg" /><h1 id="var-和-let-的区别"><a href="#var-和-let-的区别" class="headerlink" title="var 和 let 的区别"></a>var 和 let 的区别</h1><ol><li>var 声明的变量，其作用域为当前函数、模块或全局；let 声明的变量，其作用域总是在当前的代码块，例如语句块。</li><li>在同一个代码块中，var可以多次声明变量名；let只能声明一次，覆盖一个已经声明的 let 变量会导致语法错误。</li><li>用户可以在声明语句之前使用 var 变量，其值是 undefined. 而 let 必须先声明后使用。</li><li>全局模块下，var 声明的变量作为global上的属性，let声明的变量则不是 global上的属性，而是作为全局模块中的标识符。</li></ol><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><ul><li>引用计数：被引用，则计数+1，不再引用，计数减一。存在循环引用问题。</li><li>标记清除（常用）：当变量进入到执行环境，则标记上已进入执行环境，当执行完成后，变量离开执行环境则标记已离开执行环境。</li></ul><h1 id="原型链-amp-继承"><a href="#原型链-amp-继承" class="headerlink" title="原型链 &amp; 继承"></a>原型链 &amp; 继承</h1><p>每个构造函数都有一个原型对象（prototype），原型有一个属性（constructor）指回构造函数，而实例有一个内部指针（<strong>proto</strong>）指向原型。</p><p>原型链最顶端是 null</p><p>任何函数的默认原型都是一个Object的实例，这意味着这个实例有一个内部指针指向Object.prototype。</p><p>这也是为什么自定义类型能够继承包括toString()、valueOf()在内的所有默认方法的原因</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params)<br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>)<br><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span> &gt;&gt;&gt; <span class="hljs-literal">true</span><br><br>p.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> &gt;&gt;&gt; <span class="hljs-literal">true</span><br><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> &gt;&gt;&gt; <span class="hljs-literal">true</span><br><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span> &gt;&gt;&gt; <span class="hljs-literal">true</span><br><br>p.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="原型与继承的关系"><a href="#原型与继承的关系" class="headerlink" title="原型与继承的关系"></a>原型与继承的关系</h2><p>原型与实例的关系可以通过<code>两种</code>方式来确定。</p><p>第一种方式是使用<code>instanceof操作符</code>，<strong>如果一个实例的原型链中出现过相应的构造函数，则instanceof返回true</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">o <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true 实例的原型链中出现过相应的构造函数</span><br></code></pre></td></tr></table></figure><p>第二种方式是使用<code>isPrototypeOf()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(o)<br></code></pre></td></tr></table></figure><h2 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h2><p>问题一：原型中包含的引用值会在所有实例间共享</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Super</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sub</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Sub</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>() <span class="hljs-comment">// Super 实例的属性值，变成了 Sub 原型对象上的属性</span><br><br><span class="hljs-keyword">const</span> o1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>()<br><br>o1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>)<br><br><span class="hljs-comment">// 所有实例共享原型对象上的 colors</span><br><span class="hljs-keyword">const</span> o2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o2.<span class="hljs-property">colors</span>) <span class="hljs-comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;]</span><br></code></pre></td></tr></table></figure><p>问题二：子类型在实例化时不能给父类型的构造函数传参</p><h2 id="盗用构造函数继承"><a href="#盗用构造函数继承" class="headerlink" title="盗用构造函数继承"></a>盗用构造函数继承</h2><blockquote><p>为了解决原型包含引用值导致的继承问题</p></blockquote><p>在子类构造函数中调用父类构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Super</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sub</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 实例化 Sub 时，给每个 Sub 实例上都复制（拷贝）一份 colors，实例间不共享 colors，都有属于自己的那一份 colors</span><br>  <span class="hljs-title class_">Super</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> o1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>()<br>o1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>)<br><br><span class="hljs-keyword">const</span> o2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o2.<span class="hljs-property">colors</span>) <span class="hljs-comment">// [&#x27;red&#x27;, &#x27;blue&#x27;]</span><br></code></pre></td></tr></table></figure><p>也可以给父类传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sub</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Super</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;Hello world&#x27;</span>)<br><br>  <span class="hljs-comment">// 这里可以额外添加属性</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>盗用构造函数也是有缺点的：</p><ol><li>不是原型链继承，无法使用父类原型对象上的属性和方法。</li><li>父类上定义的所有属性和方法，都会被复制到子类实例上，如果属性和方法太多，占用内存就会较大。并且继承的目的是为了属性和方法的<code>复用</code>，而且借用构造函数是将父类定义的方法和属性进行了<code>复制</code>。</li></ol><h2 id="组合继承（伪经典继承）"><a href="#组合继承（伪经典继承）" class="headerlink" title="组合继承（伪经典继承）"></a>组合继承（伪经典继承）</h2><blockquote><p>综合了原型链和借用构造函数</p></blockquote><p>基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">name</span>) &#123;<br><br>  <span class="hljs-comment">// 借用构造函数</span><br>  <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">19</span><br>&#125;<br><br><span class="hljs-comment">// 原型链继承</span><br><span class="hljs-title class_">User</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br><span class="hljs-keyword">const</span> u = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u.<span class="hljs-title function_">sayName</span>())<br></code></pre></td></tr></table></figure><p>组合继承弥补了原型链和盗用构造函数的不足，是JavaScript中使用最多的继承模式。而且组合继承也保留了 <code>instanceof操作符</code> 和 <code>isPrototypeOf()</code> 方法识别合成对象的能力。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">User</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(u <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">User</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(u))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(u))<br></code></pre></td></tr></table></figure><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><blockquote><p>创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>ECMAScript 5通过增加<code>Object.create()</code>方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选: Object.defineProperties()）。在只有一个参数时，Object.create()与这里的object()方法效果相同。</p><p>在 <code>组合式继承</code>中，我们可以将原型链继承那部分可以改写一下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">User</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br></code></pre></td></tr></table></figure><h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><blockquote><p>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createAnother</span>(<span class="hljs-params">original</span>)&#123;<br>  <span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(original) <span class="hljs-comment">// 通过调用函数创建一个新对象</span><br><br>  clone.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 以某种方式增强这个对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> clone<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="寄生式组合继承-继承的最佳模式"><a href="#寄生式组合继承-继承的最佳模式" class="headerlink" title="寄生式组合继承(继承的最佳模式)"></a>寄生式组合继承(继承的最佳模式)</h2><p>组合继承其实也存在效率问题。最主要的效率问题就是父类构造函数始终会被调用两次：一次在是创建子类原型时调用，另一次是在子类构造函数中调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>];<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>)&#123;<br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);   <span class="hljs-comment">//第二次调用SuperType()</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=<span class="hljs-title function_">newSuperType</span>();   <span class="hljs-comment">//第一次调用SuperType()</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">SubType</span>;<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>有两组name和colors属性：一组在实例上，另一组在SubType的原型上。</p><img src="/img/组合继承.jpg" /><blockquote><p>寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。</p></blockquote><p>说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>) &#123;<br>  <span class="hljs-keyword">const</span> prototype = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(superType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// 将superType.prototype作为新对象的原型对象</span><br><br>  prototype.<span class="hljs-property">constructor</span> = subType <span class="hljs-comment">// 增强对象</span><br><br>  subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype<span class="hljs-comment">// 新对象赋值给子类原型</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们再来改写 <code>组合继承</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>];<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">SubType</span>, <span class="hljs-title class_">SuperType</span>);<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里只调用了一次SuperType构造函数，避免了SubType.prototype上不必要也用不到的属性，因此可以说这个例子的效率更高。</p><p>而且，原型链仍然保持不变，因此instanceof操作符和isPrototypeOf()方法正常有效。寄生式组合继承可以算是引用类型<code>继承的最佳模式</code>。</p><h2 id="ES6-class-的-extends-关键字"><a href="#ES6-class-的-extends-关键字" class="headerlink" title="ES6 class 的 extends 关键字"></a>ES6 class 的 extends 关键字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Point</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, color</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(x, y) <span class="hljs-comment">// 必须调用 super (父类的 this 对象)</span><br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承了父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p><p>如果在一个方法前加上static关键字，就表示该方法不会被实例继承，而是直接通过类调用，称为“静态方法”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">staticMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;static&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">staticMethod</span>()<br></code></pre></td></tr></table></figure><p>父类的静态方法可以被子类继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Foo</span> &#123;&#125;<br><br><span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">staticMethod</span>() <span class="hljs-comment">// static</span><br></code></pre></td></tr></table></figure><p>父类的静态方法可以在子类中通过 <code>super</code> 关键字调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">staticMethod</span>() + <span class="hljs-string">&#x27; method&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">say</span>() <span class="hljs-comment">// static method</span><br></code></pre></td></tr></table></figure><h1 id="class-和构造函数有什么区别？"><a href="#class-和构造函数有什么区别？" class="headerlink" title="class 和构造函数有什么区别？"></a>class 和构造函数有什么区别？</h1><ol><li><p>类必须使用new调用，直接调用会报错</p></li><li><p>类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。</p></li><li><p>类不存在变量提升（hoist），这一点与 ES5 完全不同。</p></li><li><p>类的内部所有定义的方法，都是不可枚举的</p></li><li><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。</p><p> 这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p></li></ol><p>super作为函数调用时，代表父类的构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123; <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">super</span>() &#125;&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。</p><p><strong>继承区别</strong></p><ol><li>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面 Parent.call(this)</li></ol><ol start="2"><li>ES6 的继承机制，实质是先将父类实例对象的属性和方法加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</li></ol><h1 id="防抖-amp-节流"><a href="#防抖-amp-节流" class="headerlink" title="防抖&amp;节流"></a>防抖&amp;节流</h1><p>防抖：用户触发事件频繁，只需要用户最后一次操作的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)<br><span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>input.<span class="hljs-property">oninput</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">if</span> (timer !== <span class="hljs-literal">null</span>) &#123;<br>    timer = <span class="hljs-built_in">clearTimeout</span>(timer)<br>  &#125;<br><br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>封装防抖函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay = <span class="hljs-number">500</span></span>) &#123;<br>  <span class="hljs-comment">// 闭包</span><br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>  <span class="hljs-comment">// this ===&gt; window</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this ===&gt; input</span><br>    <span class="hljs-keyword">if</span> (timer !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer)<br>    &#125;<br><br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;, delay);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#input&#x27;</span>)<br><br>input.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;value: &#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>&#125;, <span class="hljs-number">800</span>)<br></code></pre></td></tr></table></figure><p>节流：控制事件执行的次数，每个多少时间间隔执行一次。</p><p>比如监听滚动条的触发事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> time = <span class="hljs-number">0</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - time &gt; <span class="hljs-number">1000</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行&#x27;</span>)<br>    time = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>封装节流函数 throttle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  <span class="hljs-keyword">let</span> time = <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    <span class="hljs-keyword">if</span> (now - time &gt; delay) &#123;<br>      fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>      time = now<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h1><ol><li>函数的返回结果只依赖于它的参数，相同的输入始终得到相同的输出。</li><li>函数执行过程中没有副作用（不改变、不依赖外部任何可观察的变化）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="可缓存的纯函数"><a href="#可缓存的纯函数" class="headerlink" title="可缓存的纯函数"></a>可缓存的纯函数</h2><p>当我们的计算量非常大，可能耗时很长或者很好性能，那么我们通过缓存的方式，避免函数多次计算。从而，计算了一次之后，以后再输入相同的参数，就直接返回上次计算的结果。</p><blockquote><p>lodash.memozie(add, resolver)</p></blockquote><p>实现 memoize 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计算中...&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolver</span> = (<span class="hljs-params">...args</span>) =&gt; <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(args)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">memoize</span>(<span class="hljs-params">func, resolver</span>) &#123;<br>  <span class="hljs-keyword">const</span> cache = &#123;&#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title function_">resolver</span>(...args) <span class="hljs-comment">// &quot;[a, b]&quot;</span><br><br>    <span class="hljs-keyword">if</span> (cache[key]) &#123;<br>      <span class="hljs-keyword">return</span> cache[key]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> cache[key] = <span class="hljs-title function_">func</span>(...args)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> memoized = <span class="hljs-title function_">memoize</span>(add, resolver)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">memoized</span>(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>)) <span class="hljs-comment">// 第一次打印 &quot;计算中...&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">memoized</span>(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>)) <span class="hljs-comment">// 不会打印</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">memoized</span>(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>)) <span class="hljs-comment">// 不会打印</span><br></code></pre></td></tr></table></figure><h1 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h1><p>给一个函数传入一部分参数，让其返回的函数接收剩余的参数。直到所有的参数都给到了，才会计算结果。</p><blockquote><p>lodash.curry(fn)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c<br>&#125;<br><br><span class="hljs-keyword">const</span> fn = lodash.<span class="hljs-title function_">curry</span>(add)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>实现 curry 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">func</span>) &#123;<br>  <span class="hljs-keyword">const</span> curried = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-comment">// 函数的length 表示它有几个参数</span><br>    <span class="hljs-keyword">if</span> (args.<span class="hljs-property">length</span> &lt; func.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-comment">// 累加参数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> <span class="hljs-title function_">curried</span>(...args, ...rest)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 传入的参数和方法接收的参数相同，直接执行 func 函数</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">func</span>(...args)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> curried<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b + c<br>&#125;<br><br><span class="hljs-keyword">const</span> curried = <span class="hljs-title function_">curry</span>(add)<br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">curried</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fn</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><h1 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h1><p>看个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello &#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str + <span class="hljs-string">&#x27;wor&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str + <span class="hljs-string">&#x27;l&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add3</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str + <span class="hljs-string">&#x27;d&#x27;</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add3</span>(<span class="hljs-title function_">add2</span>(<span class="hljs-title function_">add1</span>(str)))) <span class="hljs-comment">// hello wrold</span><br><br></code></pre></td></tr></table></figure><p>我们通过手动组合的方式，将每个函数的结果拼接了起来，能实现想要的结果，但是过于繁琐，假设还有几个函数或者十几个函数，恐怕写下去人都麻了。</p><p>好在 lodash 这个库也帮我们实现了这个方法 <code>flow &amp; flowRight</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> f = lodash.<span class="hljs-title function_">flow</span>(add1, add2, add3)<br><br><span class="hljs-title function_">f</span>(str)<br></code></pre></td></tr></table></figure><p>手动实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello - &#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str + <span class="hljs-string">&#x27;wor&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str + <span class="hljs-string">&#x27;l&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add3</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str + <span class="hljs-string">&#x27;d&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// console.log(add3(add2(add1(str))))</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flow</span>(<span class="hljs-params">...fns</span>) &#123;<br>  <span class="hljs-keyword">if</span> (fns.<span class="hljs-property">length</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> fns[<span class="hljs-number">0</span>]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> fns.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 从右往左</span><br>    <span class="hljs-comment">// 第一步 a === add3, b === add2</span><br>    <span class="hljs-comment">// 第二步 a === (...args) =&gt; add3(add2(...args)), b === add1</span><br>    <span class="hljs-comment">// 第二步的 a 显示为 (...args) =&gt; a(b(...args))</span><br>    <span class="hljs-comment">// 返回 a(add1(...args))</span><br><br>    <span class="hljs-comment">// 当我们最后调用 f 时，会先计算 add1(...args)，拿到结果后，执行 a &quot;add3(add2(add1(...args)))&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> <span class="hljs-title function_">a</span>(<span class="hljs-title function_">b</span>(...args))<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> f = <span class="hljs-title function_">flow</span>(add1, add2, add3)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">f</span>(str))<br></code></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><blockquote><p>什么是跨域？</p><p>CORS 全称是 Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者不同端口的资源时，就会发出跨域请求。如果另一个资源不允许其进行跨域资源访问，就会造成跨域。 </p></blockquote><p><strong>跨域不是问题，是浏览器的安全机制</strong></p><p>跨域不会阻止请求的发出，也不会阻止请求的接收，跨域是浏览器为了保护当前页面，你的请求得到了响应，但是浏览器不会将请求到的数据提交给当前页面上的回调，取而代之的是去提示你这是一个跨域数据。</p><p><strong>同源策略</strong>导致。</p><p>所谓同源策略，就是<code>协议、域名、端口号</code>都要相同，有一个不相同，那么就是非同源，就会出现跨域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 跨域(端口不同)</span><br><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:3000</span><br><br><br><span class="hljs-comment">// 跨域(协议不同)</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//localhost:8080</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080</span><br><br><span class="hljs-comment">// 跨域(域名)</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//localhost:8080</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//192.168.1.2:8080</span><br><br><br><span class="hljs-comment">// 跨域(协议不同，端口也不同)</span><br><span class="hljs-comment">// http 默认端口是 80，https 默认端口是 443</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost/bbb</span><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//localhost/aaa</span><br></code></pre></td></tr></table></figure><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><ol><li>纯后端方式</li></ol><p>假设我们有个后端服务 3000，提供了 <code>/user</code> 接口，我们可以直接在 <code>.html</code> 文件中访问，如果后端不设置跨域，那么肯定会出现跨域提示的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// server</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;请求user成功&#x27;</span><br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;3000&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running at port 3000...&#x27;</span>)<br>&#125;)<br><br><br><span class="hljs-comment">// client</span><br>&lt;script&gt;<br>  <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span>)<br>  xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">consolelog</span>(xhr.<span class="hljs-property">response</span>)<br>  &#125;<br>  xhr.<span class="hljs-title function_">send</span>()<br><br><br>  <span class="hljs-comment">// fetch</span><br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">text</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>后端设置跨域访问</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// CORS</span><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-comment">// 允许所有请求源</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br><br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>前端处理<br>主要是通过 <code>webpack devServer</code> 的 <code>proxy</code> 来处理。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span> <span class="hljs-comment">// http://localhost:8080/api/user =&gt; http://localhost:3000/api/user</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-string">&#x27;/no-api&#x27;</span>: &#123;<br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>, <span class="hljs-comment">// http://localhost:8080/no-api/user =&gt; http://localhost:3000/user</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;/no-api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 后端接口中一般不会含有 api 标识符，我们可以去掉</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;<br>...<br></code></pre></td></tr></table></figure><ol start="3"><li>Nginx</li></ol><p>要注意的是，devServer 配置 proxy 只是存在于我们开发项目时有用，如果项目要上线，devServer 就没有了，这时可以考虑采用 <code>Nginx</code> 来代理。</p><ol start="4"><li>前后端合并方式</li></ol><p>我们可以不采用 <code>devServer proxy</code> 方式，而是在后端配置 <code>webpack-dev-middleware</code>，将前后端进行合并。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> middle = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-dev-middleware&#x27;</span>)<br><span class="hljs-keyword">const</span> compile = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.config.js&#x27;</span>)<br><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">middle</span>(compile))<br><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;请求user成功&#x27;</span><br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;3000&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running at port 3000...&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>jsonp</li></ol><p>比较老、兼容性好的方式。</p><p>利用标签没有跨域限制的漏洞，在 script 标签上我们可以引用其他服务上的脚本。</p><p>最常见的场景就是 CDN.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(res, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>))<br>&#125;<br><br><span class="hljs-comment">// 动态创建 script 标签，设置好 scr 属性，主要参数是 cb=callback</span><br><br><span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://127.0.0.1:3000/info/jsonp?cb=callback&#x27;</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagsName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(script)<br></code></pre></td></tr></table></figure><h1 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h1><p>模式有两种：</p><ol><li>hash 模式</li><li>history 模式</li></ol><hr><ul><li><strong>hash 模式</strong></li></ul><p>URL 的 hash 也就是锚点（#），本质上是改变 window.location 的 href 属性。可以直接给 href 复制，但是页面不刷新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">location.<span class="hljs-property">href</span> <span class="hljs-comment">// 获取当前浏览器 url: &#x27;https://www.baidu.com/&#x27;</span><br><br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;/foo&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><strong>history 模式</strong></li></ul><p>HTML5 新增。</p><p>它有五种模式改变 url 而不刷新页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">history.<span class="hljs-title function_">pushState</span>(&#123;&#125;, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/foo&#x27;</span>)<br>history.<span class="hljs-title function_">replaceState</span>(&#123;&#125;, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/foo&#x27;</span>)<br>history.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>)<br><br>history.<span class="hljs-title function_">back</span>() <span class="hljs-comment">// 等价 history.go(-1)</span><br>history.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">// history.go(1)</span><br></code></pre></td></tr></table></figure><ul><li>vue-router</li></ul><p>在 Vue 中，有两种方式可以跳转路由：</p><ul><li>申明式路由 <code>&lt;router-link to=&quot;/go&quot;&gt;跳转&lt;/router-link&gt;</code></li><li>编程式路由 <code>this.$router.go(&#39;/go&#39;)</code></li></ul><p><strong>实现 vue-router 路由</strong></p><blockquote><p><a href="https://www.bilibili.com/video/BV1n24y1w7kP?p=25&amp;spm_id_from=pageDriver&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe">https://www.bilibili.com/video/BV1n24y1w7kP?p=25&amp;spm_id_from=pageDriver&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe</a></p></blockquote><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><blockquote><p>所谓Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可供进一步处理。</p></blockquote><p>特点：</p><ol><li><p>对象的状态不受外界影响（pedding, resolved, rejected）</p></li><li><p>一旦状态改变就不会再改变</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-literal">false</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved）</p><p>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">timeout</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// setTimeout 第三个参数，是传递给第一个函数的，这里是resolve 方法</span><br>    <span class="hljs-built_in">setTimeout</span>(resolve, ms, <span class="hljs-string">&#x27;done&#x27;</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-title function_">timeout</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><p>resolve函数的参数除了正常的值外，还可能是另一个Promise实例，表示异步操作的结果有可能是一个值，也有可能是另一个异步操作：</p><p><strong>p1的状态决定了p2的状态</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">r, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;fail&#x27;</span>))<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;)<br><br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">r, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">r</span>(p1)<br>&#125;)<br><br>p2.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result &#x27;</span>, result)<br>&#125;, <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error &#x27;</span>, error)<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面的代码中，p1是一个Promise,3秒之后变为Rejected。p2的状态由p1决定，p2调用resolve方法，但是此时p1的状态还没有改变，因此p2的状态也不会变。等3秒过后，p1变为Rejected,p2也跟着变为Rejected。</p><p><strong>需要注意的是，catch方法返回的还是一个Promise对象，因此后面还可以接着调用then方法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">r</span>(x + <span class="hljs-number">2</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;结果 &#x27;</span>, res)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;错误 &#x27;</span>, err)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;随便打印&#x27;</span>)<br>&#125;).<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;最后打印&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// =======&gt;</span><br>错误  <span class="hljs-title class_">ReferenceError</span>: x is not defined<br><br>随便打印<br><br>最后打印<br></code></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><blockquote><p>Promise.all方法用于将多个Promise实例包装成一个新的Promise实例。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3])<br></code></pre></td></tr></table></figure><p>p的状态由p1、p2、p3决定，分成两种情况。</p><ol><li><p>只有p1、p2、p3的状态都变成Fulfilled,p的状态才会变成Fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p></li><li><p>只要p1、p2、p3中有一个被Rejected,p的状态就变成Rejected，此时第一个被Rejected的实例的返回值会传递给p的回调函数。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p3 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">r</span>(<span class="hljs-string">&#x27;p3 success&#x27;</span>)<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> allP = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-title function_">p3</span>()])<br><br>allP.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r)<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面的例子，3秒后，输出 <code>[ 1, 2, &#39;p3 success&#39; ]</code></p><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><blockquote><p>竞速</p><p>有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。</p></blockquote><p>超时处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:3000/api/user&#x27;</span>),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">r, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Request timeout&#x27;</span>))<br>    &#125;, <span class="hljs-number">5000</span>)<br>  &#125;)<br>])<br></code></pre></td></tr></table></figure><p>上面的代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为Rejected，从而触发catch方法指定的回调函数。</p><h1 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h1><blockquote><p>async函数就是Generator函数的语法糖。</p></blockquote><p>async函数返回一个Promise对象，可以使用then方法添加回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;name&#x27;</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sayName</span>()) <span class="hljs-comment">// Promise &#123; &#x27;name&#x27; &#125;</span><br><br><span class="hljs-title function_">sayName</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)) <span class="hljs-comment">// name</span><br></code></pre></td></tr></table></figure><p>当函数执行时，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p><p>我们来实现一个 sleep 睡眠函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 睡眠函数</span><br><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">function</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">r</span>()<br>    &#125;, ms);<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">3000</span>)<br><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;name&#x27;</span><br>&#125;<br><br><span class="hljs-title function_">sayName</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res))<br></code></pre></td></tr></table></figure><p>当我们调用 sayName 方法时，会立即打印出 1, 3秒过后，打印 2 和 ’name‘</p><p><strong>注意</strong></p><p>await命令后面的Promise对象，运行结果可能是Rejected，所以最好把 await 命令放在try…catch代码块中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">function</span>(<span class="hljs-params">ms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 这里报错，会被外面的 try-catch 接收到</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xxxxx + <span class="hljs-number">3</span>)<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// setTimeout 内部报错，不会被外部的 try catch 捕获到</span><br>      <span class="hljs-title function_">r</span>()<br>    &#125;, ms)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">3000</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; - - - &#x27;</span>, error)<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">sayName</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web Components</title>
    <link href="/post/web-components.html"/>
    <url>/post/web-components.html</url>
    
    <content type="html"><![CDATA[<h1 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h1><p>作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义 UI 控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ul><li><p>Custom elements（自定义元素）</p></li><li><p>Shadow DOM（影子 DOM）</p></li><li><p>HTML templates（HTML 模板）</p></li></ul><h2 id="Custom-elements（自定义元素）"><a href="#Custom-elements（自定义元素）" class="headerlink" title="Custom elements（自定义元素）"></a>Custom elements（自定义元素）</h2><p>允许您定义 custom elements 及其行为，然后可以在您的用户界面中按照需要使用它们。</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShadowElement</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLElement</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> mountPoint = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-keyword">const</span> shadowRoot = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;);<br><br>    shadowRoot.<span class="hljs-title function_">appendChild</span>(mountPoint);<br><br>    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyApp</span> /&gt;</span></span>, mountPoint);<br>  &#125;<br>&#125;<br><br><br>customElements.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;my-custom-element&#x27;</span>, <span class="hljs-title class_">ShadowElement</span>);<br></code></pre></td></tr></table></figure><h2 id="Shadow-DOM（影子-DOM）"><a href="#Shadow-DOM（影子-DOM）" class="headerlink" title="Shadow DOM（影子 DOM）"></a>Shadow DOM（影子 DOM）</h2><p>有一些 Shadow DOM 特有的术语需要我们了解：</p><ul><li>Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</li><li>Shadow tree：Shadow DOM 内部的 DOM 树。</li><li>Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</li><li>Shadow root: Shadow tree 的根节点。</li></ul><p><img src="/img/webcomponents.png" alt=""></p><p><strong>基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> shadow = elementRef.<span class="hljs-title function_">attachShadow</span>(&#123;<span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span>&#125;);<br><span class="hljs-keyword">let</span> shadow = elementRef.<span class="hljs-title function_">attachShadow</span>(&#123;<span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;closed&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><p>open 表示可以通过页面内的 JavaScript 方法来获取 Shadow DOM，例如使用 Element.shadowRoot 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myShadowDom = myCustomElem.<span class="hljs-property">shadowRoot</span>;<br></code></pre></td></tr></table></figure><h2 id="templates-and-slots"><a href="#templates-and-slots" class="headerlink" title="templates and slots"></a>templates and slots</h2><p>复用结构，减少使用相同的标记结构。</p><p>此元素及其内容不会在 DOM 中呈现，可使用 JavaScript 去引用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template id=<span class="hljs-string">&quot;my-paragraph&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>上面的代码不会展示在你的页面中，直到你用 JavaScript 获取它的引用，然后添加到 DOM 中，如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> template = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;my-paragraph&#x27;</span>);<br><span class="hljs-keyword">let</span> templateContent = template.<span class="hljs-property">content</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(templateContent);<br></code></pre></td></tr></table></figure><p><strong>在 Web Components 中使用模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">customElements.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;my-paragraph&#x27;</span>,<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">HTMLElement</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">super</span>();<br>      <span class="hljs-keyword">let</span> template = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;my-paragraph&#x27;</span>);<br>      <span class="hljs-keyword">let</span> templateContent = template.<span class="hljs-property">content</span>;<br><br>      <span class="hljs-keyword">const</span> shadowRoot = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">attachShadow</span>(&#123;<span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span>&#125;)<br>        .<span class="hljs-title function_">appendChild</span>(templateContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>));<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>使用槽 (slots) 添加灵活度</strong></p><p>改造 <code>my-paragraph</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;my-text&quot;</span>&gt;</span>My default text<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span>&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>跟 <code>Vue</code> 插槽一样的用法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;my-paragraph&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;my-text&quot;</span>&gt;</span>Let&#x27;s have some different text!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/my-paragraph&gt;<br><br><span class="hljs-comment">// or</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">my-paragraph</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;my-text&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Let&#x27;s have some different text!<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>In a list!<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">my-paragraph</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>完整示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// html</span><br><br>&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>template &amp; slot<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;my-paragraph&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Default Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>default slot<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">my-paragraph</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 使用插槽 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Slot title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">my-paragraph</span>&gt;</span></span><br><br>  &lt;hr&gt;<br>&lt;/body&gt;<br><br><br><span class="hljs-comment">// js</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyParagraph</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLElement</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> template = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;my-paragraph&#x27;</span>);<br>    <span class="hljs-keyword">let</span> templateContent = template.<span class="hljs-property">content</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;)<br>      .<span class="hljs-title function_">appendChild</span>(templateContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>))<br>  &#125;<br>&#125;<br><br>customElements.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;my-paragraph&#x27;</span>, <span class="hljs-title class_">MyParagraph</span>)<br></code></pre></td></tr></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><blockquote><p>Lightning Web Component</p></blockquote><p>在 LWC 中，可以通过实现 CustomEvent 接口进行自定义事件，通过 EventTarget.dispatchEvent() 来分配事件。</p><p><strong>注意：</strong></p><p>定义事件时，不需要在事件名前加 on，因为在使用的时候会默认在名称前使用 on，比如：当我们定义了 click 事件，在 HTML 代码中用 onclick 来调用它</p><ul><li><p>父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parent comp</span><br><span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> child = <span class="hljs-variable language_">this</span>.<span class="hljs-property">shadowRoot</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;child-wc&#x27;</span>)<br><br>  <span class="hljs-comment">// 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子</span><br>  child.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;Parent changed the Text&#x27;</span>)<br><br>  <span class="hljs-comment">// 2. 通过组件实例直接修改内部数据（⚠️未获取到）</span><br>  <span class="hljs-comment">// console.log(&#x27;??&#x27;, child)</span><br><br>  <span class="hljs-comment">// 3. 监听子组件内部定义的事件</span><br>  child.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;custom-event&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">&#123; detail &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;事件触发 &#x27;</span>, detail.<span class="hljs-property">value</span>);<br>  &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>子组件</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// child comp</span><br><span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 定义事件</span><br>  <span class="hljs-keyword">const</span> event = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomEvent</span>(<span class="hljs-string">&#x27;custom-event&#x27;</span>, &#123;<br>    <span class="hljs-attr">detail</span>: &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;child web component&#x27;</span><br>    &#125;<br>  &#125;)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">dispatchEvent</span>(event)<br><br>  <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">this</span>.<span class="hljs-property">shadowRoot</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br>  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取父组件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getRootNode</span>().<span class="hljs-property">host</span>.<span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&#x27;Hello :&#x27;</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="子组件直接调用父组件实例上的方法"><a href="#子组件直接调用父组件实例上的方法" class="headerlink" title="子组件直接调用父组件实例上的方法"></a>子组件直接调用父组件实例上的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parent comp</span><br><span class="hljs-title function_">sayHello</span>(<span class="hljs-params">msg</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg, <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>)<br>&#125;<br><br><br><span class="hljs-comment">// child comp</span><br><span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">this</span>.<span class="hljs-property">shadowRoot</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br><br>  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取父组件实例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getRootNode</span>().<span class="hljs-property">host</span>.<span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&#x27;Hello :&#x27;</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="监听组件上属性的变化"><a href="#监听组件上属性的变化" class="headerlink" title="监听组件上属性的变化"></a>监听组件上属性的变化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parent</span><br><span class="hljs-keyword">const</span> child = <span class="hljs-variable language_">this</span>.<span class="hljs-property">shadowRoot</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;child-wc&#x27;</span>)<br><span class="hljs-comment">// 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子</span><br>child.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;Parent changed the Text&#x27;</span>)<br><br><br><br><span class="hljs-comment">// child</span><br><span class="hljs-comment">// 监听属性变化，必须定静态的 observedAttributes 方法</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">get</span> <span class="hljs-title function_">observedAttributes</span>() &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;text&#x27;</span>];<br>&#125;<br><span class="hljs-title function_">attributeChangedCallback</span>(<span class="hljs-params">name, oldValue, newValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;name&#x27;</span>, name)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;oldValue&#x27;</span>, oldValue)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;newValue&#x27;</span>, newValue)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="web-component-in-ReactJS"><a href="#web-component-in-ReactJS" class="headerlink" title="web component in ReactJS"></a>web component in ReactJS</h1><p>React 和 Web Components 为了解决不同的问题而生。</p><p>Web Components 为可复用组件提供了强大的封装，而 React 则提供了声明式的解决方案，使 DOM 与数据保持同步。</p><p>两者旨在互补。作为开发人员，可以自由选择在 Web Components 中使用 React，或者在 React 中使用 Web Components，或者两者共存。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>“react”: “^16.12.0”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> alert(&#x27;I have been clicked&#x27;)&#125;&gt;Click me<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShadowElement</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLElement</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>()<br>  &#125;<br><br>  <span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> mountPoint = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-keyword">const</span> shadowRoot = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">attachShadow</span>(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;open&#x27;</span> &#125;);<br><br>    shadowRoot.<span class="hljs-title function_">appendChild</span>(mountPoint);<br><br>    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyApp</span> /&gt;</span></span>, mountPoint);<br>  &#125;<br>&#125;<br><br><br>customElements.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;my-custom-element&#x27;</span>, <span class="hljs-title class_">ShadowElement</span>);<br><br><br><span class="hljs-comment">// 使用</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;app-main&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span> console.log(&#x27;app main clicked&#x27;)&#125;&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">my-custom-element</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-custom-element</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="/img/react-v16.gif" alt=""></p><blockquote><p>“react”: “^17.0.2” 及以上版本，已解决此问题。</p></blockquote><p>代码一致，效果图。</p><p><img src="/img/react-v17.gif" alt=""></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>Web Components 触发的事件可能无法通过 React 渲染树正确的传递。 你需要在 React 组件中手动添加事件处理器来处理这些事件。</p></blockquote><p>Shadow DOM 重定向了 click 事件并将其封装在 shadow 中，将组件内部的所有内容封装在单独的作用域中，并隔离事件。React 并不支持这样的 Shadow DOM，因此事件委托失败，事件无法触发。</p><p>这意味着，如果您将带有 click 事件的 React 组件放在 Web 组件中，则点击事件可能不会冒泡到 React 组件中。这是因为事件在 Web 组件的 Shadow DOM 中触发，然后被封装在 Shadow DOM 中，而不会传播到外部组件。</p><p>如果您希望在使用 Web 组件时能够触发 React 事件，则可以使用上述方法之一，例如重新绑定事件到实际的 shadow 容器并使用 “__reactInternalInstances” 来调度正确的 React 事件。您还可以使用其他方法来解决此问题，例如使用自定义事件或使用事件代理。</p><blockquote><p><a href="https://stackoverflow.com/questions/37866237/click-event-not-firing-when-react-component-in-a-shadow-dom">https://stackoverflow.com/questions/37866237/click-event-not-firing-when-react-component-in-a-shadow-dom</a></p></blockquote><p><strong>相关文章：当 Shadow Dom 遇上 React event</strong></p><blockquote><p><a href="https://github.com/huruji/blog/issues/104">https://github.com/huruji/blog/issues/104</a></p></blockquote><h1 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h1><blockquote><p><a href="https://juejin.cn/post/7157955953776820254">https://juejin.cn/post/7157955953776820254</a></p><p><a href="https://juejin.cn/post/7161816035186720781">https://juejin.cn/post/7161816035186720781</a></p><p><a href="https://quark-design.hellobike.com/#/">https://quark-design.hellobike.com/#/</a></p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_templates_and_slots">MDN官方文档</a></li><li><a href="https://github1s.com/mdn/web-components-examples/blob/main/shadow-part/main.js">WC官方示例</a></li><li><a href="http://www.xieluping.cn/post/wc/">基于 Web Components 跨框架组件开发</a></li><li><a href="https://blog.csdn.net/qq_37718797/article/details/122970991">Shadow :host 选择器</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微前端</title>
    <link href="/post/micro-qiankun.html"/>
    <url>/post/micro-qiankun.html</url>
    
    <content type="html"><![CDATA[<h1 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h1><blockquote><p><a href="https://qiankun.umijs.org/zh">https://qiankun.umijs.org/zh</a></p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/596349482?utm_medium=social&utm_oi=762241709898739712&utm_psn=1593891522373799936&utm_source=wechat_session">样式隔离问题</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>微前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目实战(六)：通用功能开发(二)</title>
    <link href="/post/vue3-project-generalModule2.html"/>
    <url>/post/vue3-project-generalModule2.html</url>
    
    <content type="html"><![CDATA[<h1 id="screenfull"><a href="#screenfull" class="headerlink" title="screenfull"></a>screenfull</h1><p>对于 <code>screenfull</code> 和之前一样 ，我们还是先分析它的原理，然后在制定对应的方案实现</p><p><strong>原理：</strong></p><p>对于 <code>screenfull</code> 而言，浏览器本身已经提供了对用的 <code>API</code>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API">点击这里即可查看</a>，这个 <code>API</code> 中，主要提供了两个方法：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/exitFullscreen"><code>Document.exitFullscreen()</code></a>：该方法用于请求从全屏模式切换到窗口模式</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/requestFullScreen"><code>Element.requestFullscreen()</code></a>：该方法用于请求浏览器（user agent）将特定元素（甚至延伸到它的后代元素）置为全屏模式<ol><li>比如我们可以通过 <code>document.getElementById(&#39;app&#39;).requestFullscreen()</code> 在获取 <code>id=app</code> 的 <code>DOM</code> 之后，把该区域置为全屏</li></ol></li></ol><p>但是该方法存在一定的小问题，兼容性也不是那么好。</p><p>所以通常情况下我们不会直接使用该 <code>API</code> 来去实现全屏效果，而是会使用它的包装库 <a href="https://www.npmjs.com/package/screenfull">screenfull</a></p><p>整体的方案实现分为两步：</p><ol><li>封装 <code>screenfull</code> 组件<ol><li>展示切换按钮</li><li>基于 <a href="https://www.npmjs.com/package/screenfull">screenfull</a> 实现切换功能</li></ol></li><li>在 <code>navbar</code> 中引入该组件</li></ol><p>明确好了方案之后，接下来我们就落地该方案</p><p><strong>封装 <code>screenfull</code> 组件：</strong></p><ol><li>下来依赖包  <a href="https://www.npmjs.com/package/screenfull">screenfull</a> </li></ol><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> i screenfull@<span class="hljs-number">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> -S<br></code></pre></td></tr></table></figure><ol start="2"><li>创建 <code>components/Screenfull/index</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;isFullscreen ? &#x27;exit-fullscreen&#x27; : &#x27;fullscreen&#x27;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onToggle&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> screenfull <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;screenfull&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 是否全屏</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> isFullscreen = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 切换事件</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onToggle</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (screenfull.<span class="hljs-property">isEnabled</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    screenfull.<span class="hljs-title function_">toggle</span>()</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 监听变化</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">change</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (screenfull.<span class="hljs-property">isEnabled</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    isFullscreen.<span class="hljs-property">value</span> = screenfull.<span class="hljs-property">isFullscreen</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 设置侦听器</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (screenfull.<span class="hljs-property">isEnabled</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    screenfull.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;change&#x27;</span>, change)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 删除侦听器</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (screenfull.<span class="hljs-property">isEnabled</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    screenfull.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;change&#x27;</span>, change)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p><strong>在 <code>navbar</code> 中引入该组件：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;screenfull <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;right-menu-item hover-effect&quot;</span> /&gt;<br><br>...<br><br><span class="hljs-keyword">import</span> Screenfull <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Screenfull&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="headerSeach"><a href="#headerSeach" class="headerlink" title="headerSeach"></a>headerSeach</h1><blockquote><p>所谓 <code>headerSearch</code> 一般是指 <strong>页面搜索</strong></p></blockquote><p><strong>原理：</strong></p><p><code>headerSearch</code> 是复杂后台系统中非常常见的一个功能，它可以：<strong>在指定搜索框中对当前应用中所有页面进行检索，以 <code>select</code> 的形式展示出被检索的页面，以达到快速进入的目的</strong></p><p>那么明确好了 <code>headerSearch</code>  的作用之后，接下来我们来看一下对应的实现原理</p><p>根据前面的目的我们可以发现，整个 <code>headerSearch</code> 其实可以分为三个核心的功能点：</p><ol><li>根据指定内容对所有页面进行检索</li><li>以 <code>select</code> 形式展示检索出的页面</li><li>通过检索页面可快速进入对应页面</li></ol><p>那么围绕着这三个核心的功能点，我们想要分析它的原理就非常简单了：<strong>根据指定内容检索所有页面，把检索出的页面以 <code>select</code> 展示，点击对应 <code>option</code> 可进入到指定页面</strong></p><p><strong>方案：</strong></p><p>对照着三个核心功能点和原理，想要指定对应的实现方案是非常简单的一件事情了</p><ol><li>创建 <code>headerSearch</code> 组件，用作样式展示和用户输入内容获取</li><li>获取所有的页面数据，用作被检索的数据源</li><li>根据用户输入内容在数据源中进行模糊搜索(<a href="https://fusejs.io/">https://fusejs.io/</a>) </li><li>把搜索到的内容以 <code>select</code> 进行展示</li><li>监听 <code>select</code> 的 <code>change</code> 事件，完成对应跳转</li></ol><h2 id="headerSearch-组件"><a href="#headerSearch-组件" class="headerlink" title="headerSearch 组件"></a>headerSearch 组件</h2><p>创建 <code>components/headerSearch/index</code> 组件，当点击搜索图标时，通过 <code>transition</code> 动画，将其长度展示出来，并且自动聚焦 <code>focus()</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; show: isShow &#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-search&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">class-name</span>=<span class="hljs-string">&quot;search-icon&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;onShowClick&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;headerSearchSelectRef&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-search-select&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">filterable</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">default-first-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">remote</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:remote-method</span>=<span class="hljs-string">&quot;querySearch&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;onSelectChange&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in 5&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;option&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;option&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;option&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 控制 search 显示</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> isShow = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// el-select 实例</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> headerSearchSelectRef = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onShowClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  isShow.<span class="hljs-property">value</span> = !isShow.<span class="hljs-property">value</span></span></span><br><span class="language-javascript"><span class="language-xml">  headerSearchSelectRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">focus</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// search 相关</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> search = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 搜索方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">querySearch</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;querySearch&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 选中回调</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSelectChange</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;onSelectChange&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.header-search</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.search-icon</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.header-search-select</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.2s</span>; // <span class="hljs-attribute">width</span> 动画</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">background</span>: transparent;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    ::v-deep .el-input__inner &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">box-shadow</span>: none <span class="hljs-meta">!important</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d9d9d9</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">  &amp;<span class="hljs-selector-class">.show</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.header-search-select</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">width</span>: <span class="hljs-number">210px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>在 <code>navbar</code> 中导入该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;header-search <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;right-menu-item hover-effect&quot;</span>&gt;&lt;/header-search&gt;<br><br>...<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HeaderSearch</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/HeaderSearch/index.vue&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="获取数据源"><a href="#获取数据源" class="headerlink" title="获取数据源"></a>获取数据源</h2><p>在有了 <code>headerSearch</code> 之后，接下来就可以来处理对应的 <strong>检索数据源了</strong></p><p><strong>检索数据源</strong> 表示：<strong>有哪些页面希望检索</strong></p><p>那么对于我们当前的业务而言，我们希望被检索的页面其实就是左侧菜单中的页面，那么我们检索数据源即为：<strong>左侧菜单对应的数据源</strong></p><p>根据以上原理，我们可以得出以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; filterRouters, generateMenus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/route&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>...<br><span class="hljs-comment">// 检索数据源</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> searchPool = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> filterRoutes = <span class="hljs-title function_">filterRouters</span>(router.<span class="hljs-title function_">getRoutes</span>())<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">generateMenus</span>(filterRoutes))<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">generateMenus</span>(filterRoutes)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(searchPool)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="模糊搜索Fuse-js"><a href="#模糊搜索Fuse-js" class="headerlink" title="模糊搜索Fuse.js"></a>模糊搜索Fuse.js</h2><blockquote><p>Fuse.js is a powerful, lightweight fuzzy-search library, with zero dependencies.</p></blockquote><p>如果我们想要进行  <a href="https://fusejs.io/">模糊搜索</a>  的话，那么需要依赖一个第三方的库  <a href="https://fusejs.io/">fuse.js</a> </p><p>它是0️⃣依赖的，专门处理模糊搜索的库。</p><p><strong>Why should I use it?</strong></p><ul><li>使用 Fuse.js，您不需要仅仅为了处理搜索而设置专用的后端。</li><li>简单性和性能是开发这个库的主要标准。</li></ul><ol><li>安装 <a href="https://fusejs.io/">fuse.js</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save fuse.<span class="hljs-property">js</span>@<span class="hljs-number">6.4</span><span class="hljs-number">.6</span><br></code></pre></td></tr></table></figure><ol start="2"><li>初始化 <code>Fuse</code>，更多初始化配置项 <a href="https://fusejs.io/api/options.html">可点击这里</a></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Fuse</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fuse.js&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 搜索库相关</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> fuse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fuse</span>(list, &#123;<br>    <span class="hljs-comment">// 是否按优先级进行排序</span><br>    <span class="hljs-attr">shouldSort</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 匹配长度超过这个值的才会被认为是匹配的</span><br>    <span class="hljs-attr">minMatchCharLength</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-comment">// 将被搜索的键列表。 这支持嵌套路径、加权搜索、在字符串和对象数组中搜索。</span><br>    <span class="hljs-comment">// name：搜索的键</span><br>    <span class="hljs-comment">// weight：对应的权重</span><br>    <span class="hljs-comment">// 表示我们将用户输入的值，与 title 和 path 进行匹配</span><br>    <span class="hljs-attr">keys</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;title&#x27;</span>,<br>        <span class="hljs-attr">weight</span>: <span class="hljs-number">0.7</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;path&#x27;</span>,<br>        <span class="hljs-attr">weight</span>: <span class="hljs-number">0.3</span><br>      &#125;<br>    ]<br>  &#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>参考 <a href="https://fusejs.io/demo.html">Fuse Demo</a> 与 最终效果，可以得出，我们最终期望得到如下的检索数据源结构</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/my&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;个人中心&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;用户&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/manage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;用户&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;用户管理&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/info&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;用户&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;用户信息&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;文章&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article/ranking&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;文章&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;文章排名&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article/create&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;文章&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;创建文章&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><ol start="4"><li>所以我们之前处理了的数据源并不符合我们的需要，所以我们需要对数据源进行重新处理</li></ol><h2 id="数据源重处理，生成-searchPool"><a href="#数据源重处理，生成-searchPool" class="headerlink" title="数据源重处理，生成 searchPool"></a>数据源重处理，生成 searchPool</h2><p>我们明确了最终我们期望得到数据源结构，那么接下来我们就对重新计算数据源，生成对应的 <code>searchPoll</code></p><p>创建 <code>components/HeaderSearch/FuseData.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/i18n&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 筛选出可供搜索的路由对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> routes 路由表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> basePath 基础路径，默认为 /</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> prefixTitle 父级title，子集title集合 [文章，文章排名]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateRoutes</span> = (<span class="hljs-params">routes, basePath = <span class="hljs-string">&#x27;/&#x27;</span>, prefixTitle = []</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 创建 result 数据</span><br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-comment">// 循环 routes 路由</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> route <span class="hljs-keyword">of</span> routes) &#123;<br>    <span class="hljs-comment">// 创建包含 path 和 title 的 item</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>      <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(basePath, route.<span class="hljs-property">path</span>),<br>      <span class="hljs-attr">title</span>: [...prefixTitle]<br>    &#125;<br>    <span class="hljs-comment">// 当前存在 meta 时，使用 i18n 解析国际化数据，组合成新的 title 内容</span><br>    <span class="hljs-comment">// 动态路由不允许被搜索（类似：user/:id 这种）</span><br>    <span class="hljs-comment">// 匹配动态路由的正则</span><br>    <span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/.*\/:.*/</span><br>    <span class="hljs-keyword">if</span> (route.<span class="hljs-property">meta</span> &amp;&amp; route.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span> &amp;&amp; !re.<span class="hljs-title function_">exec</span>(route.<span class="hljs-property">path</span>)) &#123;<br>      <span class="hljs-keyword">const</span> i18ntitle = i18n.<span class="hljs-property">global</span>.<span class="hljs-title function_">t</span>(<span class="hljs-string">`msg.route.<span class="hljs-subst">$&#123;route.meta.title&#125;</span>`</span>)<br>      data.<span class="hljs-property">title</span> = [...data.<span class="hljs-property">title</span>, i18ntitle]<br>      res.<span class="hljs-title function_">push</span>(data)<br>    &#125;<br><br>    <span class="hljs-comment">// 存在 children 时，迭代调用</span><br>    <span class="hljs-keyword">if</span> (route.<span class="hljs-property">children</span>) &#123;<br>      <span class="hljs-keyword">const</span> tempRoutes = <span class="hljs-title function_">generateRoutes</span>(route.<span class="hljs-property">children</span>, data.<span class="hljs-property">path</span>, data.<span class="hljs-property">title</span>)<br>      <span class="hljs-keyword">if</span> (tempRoutes.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">1</span>) &#123;<br>        res = [...res, ...tempRoutes]<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样，我们就通过 <code>generateRoutes</code> 方法，根据咱们的路由表，生成了符合 <code>fuse.js</code> 的数据。</p><p>在 <code>headerSearch</code> 中导入 <code>generateRoutes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; computed, ref &#125; from &#x27;vue&#x27;<br>import &#123; generateRoutes &#125; from &#x27;./FuseData&#x27;<br>import Fuse from &#x27;fuse.js&#x27;<br>import &#123; filterRouters &#125; from &#x27;@/utils/route&#x27;<br>import &#123; useRouter &#125; from &#x27;vue-router&#x27;<br><br>...<br><br>// 检索数据源<br>const router = useRouter()<br>const searchPool = computed(() =&gt; &#123;<br>  const filterRoutes = filterRouters(router.getRoutes())<br>  return generateRoutes(filterRoutes)<br>&#125;)<br>/**<br> * 搜索库相关<br> */<br>const fuse = new Fuse(searchPool.value, &#123;<br>  ...<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>通过 <code>querySearch</code> 测试搜索结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 搜索方法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">querySearch</span> = query =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fuse.<span class="hljs-title function_">search</span>(query))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="渲染检索数据"><a href="#渲染检索数据" class="headerlink" title="渲染检索数据"></a>渲染检索数据</h2><p>数据源处理完成之后，最后我们就只需要完成:</p><ol><li>渲染检索出的数据</li><li>完成对应跳转</li></ol><p>那么下面我们按照步骤进行实现：</p><ol><li>渲染检索出的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in searchOptions&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;option.item.path&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;option.item.title.join(&#x27; &gt; &#x27;)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;option.item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 搜索结果</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> searchOptions = <span class="hljs-title function_">ref</span>([])</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 搜索方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">querySearch</span> = query =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (query !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    searchOptions.<span class="hljs-property">value</span> = fuse.<span class="hljs-title function_">search</span>(query)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    searchOptions.<span class="hljs-property">value</span> = []</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>完成对应跳转</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSelectChange</span> = val =&gt; &#123;<br>  router.<span class="hljs-title function_">push</span>(val.<span class="hljs-property">path</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剩余问题处理"><a href="#剩余问题处理" class="headerlink" title="剩余问题处理"></a>剩余问题处理</h2><p>这里我们的 <code>headerSearch</code> 功能基本上就已经处理完成了，但是还存在一些小 <code>bug</code> ，那么最后这一小节我们就处理下这些剩余的 <code>bug</code></p><ol><li>在 <code>search</code> 打开时，点击 <code>body</code> 关闭 <code>search</code></li><li>在 <code>search</code> 关闭时，清理 <code>searchOptions</code></li><li><code>headerSearch</code> 应该具备国际化能力</li></ol><p>明确好问题之后，接下来我们进行处理</p><p>首先我们先处理前前面两个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关闭 search 的处理事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onClose</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  headerSearchSelectRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">blur</span>()<br>  isShow.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>  searchOptions.<span class="hljs-property">value</span> = []<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听 search 打开，处理 close 事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">watch</span>(isShow, <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (val) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, onClose)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, onClose)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>接下来是国际化的问题，想要处理这个问题非常简单，我们只需要：<strong>监听语言变化，重新计算数据源初始化 <code>fuse</code> 即可</strong></p><ol><li>在 <code>utils/i18n</code> 下，新建方法 <code>watchSwitchLang</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span><br><br>type <span class="hljs-title class_">IProps</span> = (<span class="hljs-function">(<span class="hljs-params">lang: string</span>) =&gt;</span> <span class="hljs-keyword">void</span>)[]<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">watchSwitchLang</span>(<span class="hljs-params">...cbs: IProps</span>) &#123;<br>  <span class="hljs-title function_">watch</span>(<br>    <span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">getters</span>.<span class="hljs-property">language</span>,<br>    <span class="hljs-function">() =&gt;</span> &#123;<br>      cbs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> cbs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">cb</span> =&gt;</span> <span class="hljs-title function_">cb</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">language</span>)))<br>    &#125;<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>在 <code>headerSearch</code> 监听变化，重新赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>...<br><span class="hljs-keyword">import</span> &#123; watchSwitchLang &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span><br><br>...<br><br><span class="hljs-comment">// 检索数据源</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">let</span> searchPool = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> filterRoutes = <span class="hljs-title function_">filterRouters</span>(router.<span class="hljs-title function_">getRoutes</span>())<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">generateRoutes</span>(filterRoutes)<br>&#125;)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 搜索库相关</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> fuse<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">initFuse</span> = searchPool =&gt; &#123;<br>  fuse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fuse</span>(searchPool, &#123;<br>    ...<br>&#125;<br><span class="hljs-title function_">initFuse</span>(searchPool.<span class="hljs-property">value</span>)<br><br>...<br><br><span class="hljs-comment">// 处理国际化</span><br><span class="hljs-title function_">watchSwitchLang</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  searchPool = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> filterRoutes = <span class="hljs-title function_">filterRouters</span>(router.<span class="hljs-title function_">getRoutes</span>())<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">generateRoutes</span>(filterRoutes)<br>  &#125;)<br>  <span class="hljs-title function_">initFuse</span>(searchPool.<span class="hljs-property">value</span>)<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="headerSearch-方案总结"><a href="#headerSearch-方案总结" class="headerlink" title="headerSearch 方案总结"></a>headerSearch 方案总结</h2><p>那么到这里整个的 <code>headerSearch</code> 我们就已经全部处理完成了，整个 <code>headerSearch</code> 我们只需要把握住三个核心的关键点</p><ol><li>根据指定内容对所有页面进行检索</li><li>以 <code>select</code> 形式展示检索出的页面</li><li>通过检索页面可快速进入对应页面</li></ol><p>保证大方向没有错误，那么具体的细节处理我们具体分析就可以了。</p><p>关于细节的处理，可能比较复杂的地方有两个：</p><ol><li>模糊搜索</li><li>检索数据源</li></ol><p>对于这两块，我们依赖于 <code>fuse.js</code> 进行了实现，大大简化了我们的业务处理流程。</p><h1 id="tagsView-原理及方案分析"><a href="#tagsView-原理及方案分析" class="headerlink" title="tagsView 原理及方案分析"></a>tagsView 原理及方案分析</h1><p>所谓 <code>tagsView</code> 可以分成两部分来去看：</p><ol><li>tags</li><li>view</li></ol><p>好像和废话一样是吧。那怎么分开看呢？</p><p>首先我们先来看 <code>tags</code>：</p><p>所谓 <code>tgas</code> 指的是：<strong>位于 <code>appmain</code> 之上的标签</strong></p><p>那么现在我们忽略掉 <code>view</code>，现在只有一个要求：</p><blockquote><p>在 <code>view</code> 之上渲染这个 <code>tag</code> </p></blockquote><p>仅看这一个要求，很简单吧。</p><p><strong>views：</strong></p><p>明确好了 <code>tags</code> 之后，我们来看 <code>views</code>。</p><p>脱离了 <code>tags</code> 只看 <code>views</code> 就更简单了，所谓 <code>views</code> ：<strong>指的就是一个用来渲染组件的位置</strong>，就像我们之前的 <code>Appmain</code> 一样，只不过这里的 <code>views</code> 可能稍微复杂一点，因为它需要在渲染的基础上增加：</p><ol><li>动画</li><li>缓存</li></ol><p>这两个额外的功能。</p><p>加上这两个功能之后可能会略显复杂，但是 <a href="https://next.router.vuejs.org/zh/guide/advanced/transitions.html#%E5%9F%BA%E4%BA%8E%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1">官网已经帮助我们处理了这个问题</a> </p><p>所以 单看 <code>views</code> 也是一个很简单的功能。</p><p>那么接下来我们需要做的就是把 <code>tags</code> 和 <code>view</code> 合并起来而已。</p><p>那么明确好了原理之后，我们就来看 <strong>实现方案：</strong></p><ol><li>创建 <code>tagsView</code> 组件：用来处理 <code>tags</code> 的展示</li><li>处理基于路由的动态过渡，在 <code>AppMain</code> 中进行：用于处理 <code>view</code> 的部分</li></ol><p>整个的方案就是这么两大部，但是其中我们还需要处理一些细节相关的，<strong>完整的方案为</strong>：</p><ol><li>监听路由变化，组成用于渲染 <code>tags</code> 的数据源</li><li>创建 <code>tags</code> 组件，根据数据源渲染 <code>tag</code>，渲染出来的 <code>tags</code> 需要同时具备<ol><li>国际化 <code>title</code></li><li>路由跳转</li></ol></li><li>处理鼠标右键效果，根据右键处理对应数据源</li><li>处理基于路由的动态过渡</li></ol><p>那么明确好了方案之后，接下来我们根据方案进行处理即可。</p><h2 id="创建-tags-数据源"><a href="#创建-tags-数据源" class="headerlink" title="创建 tags 数据源"></a>创建 tags 数据源</h2><p><code>tags</code> 的数据源分为两部分：</p><ol><li>保存数据：<code>appmain</code> 组件中进行</li><li>展示数据：<code>tags</code> 组件中进行</li></ol><p>所以 <code>tags</code> 的数据我们最好把它保存到 <code>vuex</code> 中。</p><ol><li><p>在 <code>constant</code> 中新建常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// tags</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TAGS_VIEW</span> = <span class="hljs-string">&#x27;tagsView&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>store/app</code> 中创建 <code>tagsViewList</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">LANG</span>, <span class="hljs-variable constant_">TAGS_VIEW</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constant&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getItem, setItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    ...<br>    <span class="hljs-attr">tagsViewList</span>: <span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">TAGS_VIEW</span>) || []<br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    ...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加 tags</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">addTagsViewList</span>(<span class="hljs-params">state, tag</span>) &#123;<br>      <span class="hljs-keyword">const</span> isFind = state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> item.<span class="hljs-property">path</span> === tag.<span class="hljs-property">path</span><br>      &#125;)<br>    <span class="hljs-comment">// 处理重复</span><br>      <span class="hljs-keyword">if</span> (!isFind) &#123;<br>        state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">push</span>(tag)<br>        <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">TAGS_VIEW</span>, state.<span class="hljs-property">tagsViewList</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>在 <code>appmain</code> 中监听路由的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; isTags &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/tags&#x27;</span><br><span class="hljs-keyword">import</span> &#123; generateTitle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成 title</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getTitle</span> = route =&gt; &#123;<br>  <span class="hljs-keyword">let</span> title = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">if</span> (!route.<span class="hljs-property">meta</span>) &#123;<br>    <span class="hljs-comment">// 处理无 meta 的路由</span><br>    <span class="hljs-keyword">const</span> pathArr = route.<span class="hljs-property">path</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    title = pathArr[pathArr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    title = <span class="hljs-title function_">generateTitle</span>(route.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> title<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听路由变化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><span class="hljs-title function_">watch</span>(<br>  route,<br>  <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isTags</span>(to.<span class="hljs-property">path</span>)) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">const</span> &#123; fullPath, meta, name, params, path, query &#125; = to<br>    store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/addTagsViewList&#x27;</span>, &#123;<br>      fullPath,<br>      meta,<br>      name,<br>      params,<br>      path,<br>      query,<br>      <span class="hljs-attr">title</span>: <span class="hljs-title function_">getTitle</span>(to)<br>    &#125;)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>  &#125;<br>)<br>&lt;/script&gt;<br><br><br></code></pre></td></tr></table></figure></li><li><p>创建 <code>utils/tags</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> whiteList = [<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-string">&#x27;/import&#x27;</span>, <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-string">&#x27;/401&#x27;</span>]<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * path 是否需要被缓存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">path</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isTags</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">return</span> !whiteList.<span class="hljs-title function_">includes</span>(path)<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="生成-tagsView"><a href="#生成-tagsView" class="headerlink" title="生成 tagsView"></a>生成 tagsView</h2><p>目前数据已经被保存到 <code>store</code> 中，那么接下来我们就依赖数据渲染 <code>tags</code></p><ol><li><p>创建 <code>store/app</code> 中 <code>tagsViewList</code> 的快捷访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">tagsViewList</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">app</span>.<span class="hljs-property">tagsViewList</span><br></code></pre></td></tr></table></figure></li><li><p>创建 <code>components/tagsview</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tags-view-container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tags-view-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;isActive(tag) ? &#x27;active&#x27; : &#x27;&#x27;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">          backgroundColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#x27;&#x27;,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">          borderColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#x27;&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">        &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(tag, index) in $store.getters.tagsViewList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;tag.fullPath&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; path: tag.fullPath &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        &#123;&#123; tag.title &#125;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!isActive(tag)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-close&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          @<span class="hljs-attr">click.prevent.stop</span>=<span class="hljs-string">&quot;onCloseClick(index)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 是否被选中</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">isActive</span> = tag =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> tag.<span class="hljs-property">path</span> === route.<span class="hljs-property">path</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 关闭 tag 的点击事件</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCloseClick</span> = index =&gt; &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.tags-view-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">34px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d8dce5</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.12</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.04</span>);</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.tags-view-item</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">height</span>: <span class="hljs-number">26px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d8dce5</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#495060</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml">      &amp;<span class="hljs-selector-pseudo">:first</span>-of-type &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">      &amp;<span class="hljs-selector-pseudo">:last-of-type</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">      &amp;<span class="hljs-selector-class">.active</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">        &amp;<span class="hljs-selector-pseudo">::before</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">width</span>: <span class="hljs-number">8px</span>;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">      // close 按钮</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-selector-class">.el-icon-close</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">vertical-align</span>: <span class="hljs-number">2px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.645</span>, <span class="hljs-number">0.045</span>, <span class="hljs-number">0.355</span>, <span class="hljs-number">1</span>);</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">transform-origin</span>: <span class="hljs-number">100%</span> <span class="hljs-number">50%</span>;</span></span><br><span class="language-css"><span class="language-xml">        &amp;<span class="hljs-selector-pseudo">:before</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.6</span>);</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">vertical-align</span>: -<span class="hljs-number">3px</span>;</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">        &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#b4bccc</span>;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">    </span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>layout/index</code> 中导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;fixed-header&quot;</span>&gt;<br>    &lt;!-- 顶部的 navbar --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">navbar</span> /&gt;</span></span><br>    &lt;!-- tags --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tags-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tags-view</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TagsView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/TagsView&#x27;</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="tagsView-国际化处理"><a href="#tagsView-国际化处理" class="headerlink" title="tagsView 国际化处理"></a>tagsView 国际化处理</h2><p><code>tagsView</code> 的国际化处理可以理解为修改现有 <code>tags</code> 的 <code>title</code>。</p><p>所以我们只需要：</p><ol><li>监听到语言变化</li><li>国际化对应的 <code>title</code> 即可</li></ol><p>根据方案，可生成如下代码：</p><ol><li><p>在 <code>store/app</code> 中，创建修改 <code>ttile</code> 的 <code>mutations</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 为指定的 tag 修改 title</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">changeTagsView</span>(<span class="hljs-params">state, &#123; index, tag &#125;</span>) &#123;<br>    state.<span class="hljs-property">tagsViewList</span>[index] = tag<br>    <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">TAGS_VIEW</span>, state.<span class="hljs-property">tagsViewList</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在 <code>appmain</code> 中监听语言变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; generateTitle, watchSwitchLang &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 国际化 tags</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">watchSwitchLang</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  store.<span class="hljs-property">getters</span>.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">route, index</span>) =&gt;</span> &#123;<br>    store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/changeTagsView&#x27;</span>, &#123;<br>      index,<br>      <span class="hljs-attr">tag</span>: &#123;<br>        ...route,<br>        <span class="hljs-attr">title</span>: <span class="hljs-title function_">getTitle</span>(route)<br>      &#125;<br>    &#125;)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="contextMenu-展示处理"><a href="#contextMenu-展示处理" class="headerlink" title="contextMenu 展示处理"></a>contextMenu 展示处理</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event">contextMenu</a> 为 鼠标右键事件</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event">contextMenu</a> 事件的处理分为两部分：</p><ol><li><code>contextMenu</code> 的展示</li><li>右键项对应逻辑处理</li></ol><p>那么这一小节我们先处理第一部分：<code>contextMenu</code> 的展示：</p><ol><li><p>创建 <code>components/TagsView/ContextMenu</code> 组件，作为右键展示部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;context-menu-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onRefreshClick&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&#123; $t(&#x27;msg.tagsView.refresh&#x27;) &#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onCloseRightClick&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&#123; $t(&#x27;msg.tagsView.closeRight&#x27;) &#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onCloseOtherClick&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;&#123; $t(&#x27;msg.tagsView.closeOther&#x27;) &#125;&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">index</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onRefreshClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCloseRightClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCloseOtherClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.context-menu-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: fixed;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3000</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">list-style-type</span>: none;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-tag">li</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">7px</span> <span class="hljs-number">16px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li><li><p>在 <code>tagsview</code> 中控制 <code>contextMenu</code> 的展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tags-view-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-scrollbar</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tags-view-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">...</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">contextmenu.prevent</span>=<span class="hljs-string">&quot;openMenu($event, index)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-scrollbar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">context-menu</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;visible&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;menuStyle&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;selectIndex&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context-menu</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ContextMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ContextMenu.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref, reactive, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// contextMenu 相关</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> selectIndex = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> visible = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> menuStyle = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">top</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 展示 menu</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">openMenu</span> = (<span class="hljs-params">e, index</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> &#123; x, y &#125; = e</span></span><br><span class="language-javascript"><span class="language-xml">  menuStyle.<span class="hljs-property">left</span> = x + <span class="hljs-string">&#x27;px&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  menuStyle.<span class="hljs-property">top</span> = y + <span class="hljs-string">&#x27;px&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  selectIndex.<span class="hljs-property">value</span> = index</span></span><br><span class="language-javascript"><span class="language-xml">  visible.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h2 id="contextMenu-事件处理"><a href="#contextMenu-事件处理" class="headerlink" title="contextMenu 事件处理"></a>contextMenu 事件处理</h2><p>对于 <code>contextMenu</code> 的事件一共分为三个：</p><ol><li>刷新</li><li>关闭右侧</li><li>关闭所有</li></ol><p>但是不要忘记，我们之前 <strong>关闭单个 <code>tags</code></strong> 的事件还没有进行处理，所以这一小节我们一共需要处理 4 个对应的事件</p><ol><li><p>刷新事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onRefreshClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  router.<span class="hljs-title function_">go</span>(<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>store/app</code> 中，创建删除 <code>tags</code> 的 <code>mutations</code>，该 <code>mutations</code> 需要同时具备以下三个能力：</p><ol><li>删除 “右侧”</li><li>删除 “其他”</li><li>删除 “当前”</li></ol></li><li><p>根据以上理论得出以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除 tag</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">type: &#x27;other&#x27;||&#x27;right&#x27;||&#x27;index&#x27;, index: index</span>&#125; <span class="hljs-variable">payload</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_">removeTagsView</span>(<span class="hljs-params">state, payload</span>) &#123;<br>  <span class="hljs-keyword">if</span> (payload.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;index&#x27;</span>) &#123;<br>    state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">splice</span>(payload.<span class="hljs-property">index</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (payload.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;other&#x27;</span>) &#123;<br>    state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">splice</span>(<br>      payload.<span class="hljs-property">index</span> + <span class="hljs-number">1</span>,<br>      state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-property">length</span> - payload.<span class="hljs-property">index</span> + <span class="hljs-number">1</span><br>    )<br>    state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, payload.<span class="hljs-property">index</span>)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (payload.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;right&#x27;</span>) &#123;<br>    state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-title function_">splice</span>(<br>      payload.<span class="hljs-property">index</span> + <span class="hljs-number">1</span>,<br>      state.<span class="hljs-property">tagsViewList</span>.<span class="hljs-property">length</span> - payload.<span class="hljs-property">index</span> + <span class="hljs-number">1</span><br>    )<br>  &#125;<br>  <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">TAGS_VIEW</span>, state.<span class="hljs-property">tagsViewList</span>)<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>关闭右侧事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCloseRightClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/removeTagsView&#x27;</span>, &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;right&#x27;</span>,<br>    <span class="hljs-attr">index</span>: props.<span class="hljs-property">index</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>关闭其他</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCloseOtherClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/removeTagsView&#x27;</span>, &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;other&#x27;</span>,<br>    <span class="hljs-attr">index</span>: props.<span class="hljs-property">index</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>关闭当前（<code>tagsview</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关闭 tag 的点击事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCloseClick</span> = index =&gt; &#123;<br>  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/removeTagsView&#x27;</span>, &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>    <span class="hljs-attr">index</span>: index<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="处理-contextMenu-的关闭行为"><a href="#处理-contextMenu-的关闭行为" class="headerlink" title="处理 contextMenu 的关闭行为"></a>处理 contextMenu 的关闭行为</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关闭 menu</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">closeMenu</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  visible.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听变化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title function_">watch</span>(visible, <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (val) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, closeMenu)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, closeMenu)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="处理基于路由的动态过渡"><a href="#处理基于路由的动态过渡" class="headerlink" title="处理基于路由的动态过渡"></a>处理基于路由的动态过渡</h2><p><a href="https://next.router.vuejs.org/zh/guide/advanced/transitions.html#%E5%9F%BA%E4%BA%8E%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1">处理基于路由的动态过渡</a>  官方已经给出了示例代码，结合 <code>router-view</code> 和 <code>transition</code> 我们可以非常方便的实现这个功能</p><ol><li><p>在 <code>appmain</code> 中处理对应代码逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-main&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade-transform&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;Component&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;route.path&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>增加了 <code>tags</code> 之后，<code>app-main</code> 的位置需要进行以下处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span> scoped&gt;<br>.<span class="hljs-property">app</span>-main &#123;<br>  min-<span class="hljs-attr">height</span>: <span class="hljs-title function_">calc</span>(100vh - 50px - 43px);<br>  ...<br>  <span class="hljs-attr">padding</span>: 104px 20px 20px 20px;<br>  ...<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>styles/transition</code> 中增加动画渲染</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* fade-transform */</span><br><span class="hljs-selector-class">.fade-transform-leave-active</span>,<br><span class="hljs-selector-class">.fade-transform-enter-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-transform-enter-from</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: translateX(-<span class="hljs-number">30px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.fade-transform-leave-to</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: translateX(<span class="hljs-number">30px</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="tagsView-方案总结"><a href="#tagsView-方案总结" class="headerlink" title="tagsView 方案总结"></a>tagsView 方案总结</h2><p>那么到这里关于 <code>tagsView</code> 的内容我们就已经处理完成了。</p><p>整个 <code>tagsView</code> 就像我们之前说的，拆开来看之后，会显得明确很多。</p><p>整个 <code>tagsView</code> 整体来看就是三块大的内容：</p><ol><li><code>tags</code>：<code>tagsView</code> 组件</li><li><code>contextMenu</code>：<code>contextMenu</code> 组件</li><li><code>view</code>：<code>appmain</code> 组件</li></ol><p>再加上一部分的数据处理即可。</p><p>最后关于 <code>tags</code> 的国际化部分，其实处理的方案有非常多，大家也可以在后面的 <strong>讨论题</strong> 中探讨一下关于 <strong>此处国家化</strong> 的实现，相信会有很多新的思路被打开的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工程化,Vue3,通用功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目实战(五)：通用功能开发（一）</title>
    <link href="/post/vue3-project-generalModule.html"/>
    <url>/post/vue3-project-generalModule.html</url>
    
    <content type="html"><![CDATA[<h1 id="通用功能"><a href="#通用功能" class="headerlink" title="通用功能"></a>通用功能</h1><ol><li>国际化</li><li>动态换肤</li><li><code>screenfull</code></li><li><code>headerSearch</code></li><li><code>tagView</code></li><li><code>guide</code></li></ol><h1 id="国际化实现原理"><a href="#国际化实现原理" class="headerlink" title="国际化实现原理"></a>国际化实现原理</h1><p>先来看一个需求：</p><blockquote><p>我们有一个变量 <code>msg</code> ，但是这个 <code>msg</code> 有且只能有两个值：</p><ol><li>hello world</li><li>你好世界</li></ol><p>要求：根据需要切换 <code>msg</code> 的值</p></blockquote><p>这样的一个需求就是 国际化 的需求，那么我们可以通过以下代码来实现这个需求</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-comment">// 1. 定义 msg 值的数据源</span><br>  <span class="hljs-keyword">const</span> messages = &#123;<br>    <span class="hljs-attr">en</span>: &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello world&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">zh</span>: &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;你好世界&#x27;</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 2. 定义切换变量</span><br>  <span class="hljs-keyword">let</span> locale = <span class="hljs-string">&#x27;en&#x27;</span><br>  <span class="hljs-comment">// 3. 定义赋值函数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">t</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-keyword">return</span> messages[locale][key]<br>  &#125;<br>  <span class="hljs-comment">// 4. 为 msg 赋值 </span><br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">t</span>(<span class="hljs-string">&#x27;msg&#x27;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg);<br>  <span class="hljs-comment">// 修改 locale， 重新执行 t 方法，获取不同语言环境下的值</span><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>通过一个变量来 <strong>控制</strong> 语言环境</li><li>所有语言环境下的数据源要 <strong>预先</strong> 定义好</li><li>通过一个方法来获取 <strong>当前语言</strong> 下 <strong>指定属性</strong> 的值</li><li>该值即为国际化下展示值</li></ol><h2 id="基于-vue-i18n-V9-的国际化实现方案分析"><a href="#基于-vue-i18n-V9-的国际化实现方案分析" class="headerlink" title="基于 vue-i18n V9  的国际化实现方案分析"></a>基于 vue-i18n V9  的国际化实现方案分析</h2><p>在 <code>vue</code> 的项目中，我们不需要手写这么复杂的一些基础代码，可以直接使用 <a href="https://vue-i18n.intlify.dev/">vue-i18n</a> 进行实现（注意：<strong><code>vue3</code> 下需要使用 <code>V 9.x</code> 的 <code>i18n</code></strong>）</p><p><a href="https://vue-i18n.intlify.dev/guide/">vue-i18n</a> 的使用可以分为四个部分：</p><ol><li>创建 <code>messages</code> 数据源</li><li>创建 <code>locale</code> 语言变量</li><li>初始化 <code>i18n</code> 实例</li><li>注册 <code>i18n</code> 实例</li></ol><p>那么接下来我们就去实现以下：</p><ol><li>安装 <code>vue-i18n</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install vue-i18n@next<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>创建 <code>i18n/index.js</code> 文件</p></li><li><p>创建 <code>messages</code> 数据源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> messages = &#123;<br>  <span class="hljs-attr">en</span>: &#123;<br>    <span class="hljs-attr">msg</span>: &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;hello world&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">zh</span>: &#123;<br>    <span class="hljs-attr">msg</span>: &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-string">&#x27;你好世界&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 <code>locale</code> 语言变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> locale = <span class="hljs-string">&#x27;en&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>初始化 <code>i18n</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createI18n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-i18n&#x27;</span><br><br><span class="hljs-keyword">const</span> i18n = <span class="hljs-title function_">createI18n</span>(&#123;<br>  <span class="hljs-comment">// 使用 Composition API 模式，则需要将其设置为false</span><br>  <span class="hljs-attr">legacy</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 全局注入 $t 函数</span><br>  <span class="hljs-attr">globalInjection</span>: <span class="hljs-literal">true</span>,<br>  locale,<br>  messages<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>把 <code>i18n</code> 注册到 <code>vue</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> i18n<br></code></pre></td></tr></table></figure></li><li><p>在 <code>main.js</code> 中导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// i18n （PS：导入放到 APP.vue 导入之前，因为后面我们会在 app.vue 中使用国际化内容）</span><br><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/i18n&#x27;</span><br>...<br>app.<span class="hljs-title function_">use</span>(i18n)<br></code></pre></td></tr></table></figure></li><li><p>在 <code>layout/components/Sidebar/index.vue</code> 中使用 <code>i18n</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo-title&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$store.getters.sidebarOpened&quot;</span>&gt;</span><br>        &#123;&#123; $t(&#x27;msg.test&#x27;) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改 <code>locale</code> 的值，即可改变展示的内容</p></li></ol><p>截止到现在我们已经实现了 <code>i18n</code> 的最基础用法，那么解下来我们就可以在项目中使用 <code>i18n</code> 完成国际化。</p><p>项目中完成国际化分成以下几步进行:</p><ol><li>封装 <code>langSelect</code> 组件用于修改 <code>locale</code></li><li>导入 <code>el-locale</code> 语言包</li><li>创建自定义语言包</li></ol><h2 id="封装-langSelect-组件"><a href="#封装-langSelect-组件" class="headerlink" title="封装  langSelect  组件"></a>封装  langSelect  组件</h2><ol><li><p>定义 <code>store/app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">LANG</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constant&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getItem, setItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    ...<br>    <span class="hljs-attr">language</span>: <span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">LANG</span>) || <span class="hljs-string">&#x27;zh&#x27;</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    ...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置国际化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">setLanguage</span>(<span class="hljs-params">state, lang</span>) &#123;<br>      <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">LANG</span>, lang)<br>      state.<span class="hljs-property">language</span> = lang<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在 <code>constant</code> 中定义常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 国际化</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LANG</span> = <span class="hljs-string">&#x27;language&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建 <code>components/LangSelect/index</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">trigger</span>=<span class="hljs-string">&quot;click&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;international&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    @<span class="hljs-attr">command</span>=<span class="hljs-string">&quot;handleSetLanguage&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-tooltip</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;国际化&quot;</span> <span class="hljs-attr">:effect</span>=<span class="hljs-string">&quot;effect&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;language&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-tooltip</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">dropdown</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;language === &#x27;zh&#x27;&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span></span><br><span class="language-xml">          中文</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;language === &#x27;en&#x27;&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">          English</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useI18n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-i18n&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">effect</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;dark&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;dark&#x27;</span>, <span class="hljs-string">&#x27;light&#x27;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> language = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">getters</span>.<span class="hljs-property">language</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 切换语言的方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> i18n = <span class="hljs-title function_">useI18n</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSetLanguage</span> = lang =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  i18n.<span class="hljs-property">locale</span>.<span class="hljs-property">value</span> = lang</span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/setLanguage&#x27;</span>, lang)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;更新成功&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>navbar</code> 中导入 <code>LangSelect</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-menu&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">lang-select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-menu-item hover-effect&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 头像 --&gt;</span></span><br><span class="language-xml">      ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">LangSelect</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/LangSelect&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.navbar</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  ...</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.right-menu</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    ...</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    ::v-deep .right-menu-item &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">18px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#5a5e66</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">vertical-align</span>: text-bottom;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">      &amp;<span class="hljs-selector-class">.hover-effect</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    ...</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="element-plus-国际化处理"><a href="#element-plus-国际化处理" class="headerlink" title="element-plus 国际化处理"></a>element-plus 国际化处理</h2><p>截止到目前，我们的国际化内容已经基本功能已经处理完成了。接下来需要处理的就是对应的语言包，有了语言包就可以实现整个项目中的所有国际化处理了。</p><p>那么对于语言包来说，我们整个项目中会分成两部分：</p><ol><li><code>element-plus</code> 语言包：用来处理 <code>element</code> 组件的国际化功能</li><li>自定义语言包：用来处理 <strong>非</strong><code>element</code> 组件的国际化功能</li></ol><p>那么首先我们先来处理 <code>element-plus</code> 语言包：</p><ol start="3"><li>在 <code>plugins/index</code> 中导入 <code>element</code> 的中文、英文语言包：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> zhCn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus/es/locale/lang/zh-cn&#x27;</span><br><span class="hljs-keyword">import</span> en <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus/lib/locale/lang/en&#x27;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>注册 <code>element</code> 时，根据当前语言选择使用哪种语言包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> app =&gt; &#123;<br>  app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>, &#123;<br>    <span class="hljs-attr">locale</span>: store.<span class="hljs-property">getters</span>.<span class="hljs-property">language</span> === <span class="hljs-string">&#x27;en&#x27;</span> ? en : zhCn<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="自定义语言包国际化处理"><a href="#自定义语言包国际化处理" class="headerlink" title="自定义语言包国际化处理"></a>自定义语言包国际化处理</h2><p>处理完 <code>element</code> 的国际化内容之后，接下来我们来处理 <strong>自定义语言包</strong>。</p><ol><li>在本地创建 <code>lang</code> 文件夹，里面创建好本地需要的语言包，由于比较多，就放一部分来看看：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// en.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">login</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;User Login&#x27;</span>,<br>    <span class="hljs-attr">loginBtn</span>: <span class="hljs-string">&#x27;Login&#x27;</span>,<br>    <span class="hljs-attr">usernameRule</span>: <span class="hljs-string">&#x27;Username is required&#x27;</span>,<br>    <span class="hljs-attr">passwordRule</span>: <span class="hljs-string">&#x27;Password cannot be less than 6 digits&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// other....</span><br>&#125;<br><br><span class="hljs-comment">// zh.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">login</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户登录&#x27;</span>,<br>    <span class="hljs-attr">loginBtn</span>: <span class="hljs-string">&#x27;登录&#x27;</span>,<br>    <span class="hljs-attr">usernameRule</span>: <span class="hljs-string">&#x27;用户名为必填项&#x27;</span>,<br>    <span class="hljs-attr">passwordRule</span>: <span class="hljs-string">&#x27;密码不能少于6位&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// other...</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>在 <code>lang/index</code> 中，导入语言包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mZhLocale <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./lang/zh&#x27;</span><br><span class="hljs-keyword">import</span> mEnLocale <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./lang/en&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code>messages</code> 中注册到语言包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> messages = &#123;<br>  <span class="hljs-attr">en</span>: &#123;<br>    <span class="hljs-attr">msg</span>: &#123;<br>      ...mEnLocale<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">zh</span>: &#123;<br>    <span class="hljs-attr">msg</span>: &#123;<br>      ...mZhLocale<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="处理项目国际化内容"><a href="#处理项目国际化内容" class="headerlink" title="处理项目国际化内容"></a>处理项目国际化内容</h2><p>在处理好了国际化的语言包之后，接下来我们就可以应用国际化功能到我们的项目中</p><p>对于我们目前的项目而言，需要进行国际化处理的地方主要分为：</p><ol><li>登录页面</li><li><code>navbar</code> 区域</li><li><code>sidebar</code> 区域</li><li>面包屑区域</li></ol><p>那么这一小节，我们先来处理前两个</p><p><strong>登录页面：</strong></p><p><code>login/index</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-container&quot;</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;msg.login.title&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">lang-select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lang-select&quot;</span> <span class="hljs-attr">effect</span>=<span class="hljs-string">&quot;light&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lang-select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      ...</span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; margin-bottom: 30px&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleLogin&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span>&#123;&#123; $t(&#x27;msg.login.loginBtn&#x27;) &#125;&#125;&lt;/el-button</span><br><span class="language-xml">      &gt;</span><br><span class="language-xml">      </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tips&quot;</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;$t(&#x27;msg.login.desc&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useI18n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-i18n&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 验证规则</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> i18n = <span class="hljs-title function_">useI18n</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> loginRules = <span class="hljs-title function_">ref</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">username</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">    &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      ...</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">message</span>: i18n.<span class="hljs-title function_">t</span>(<span class="hljs-string">&#x27;msg.login.usernameRule&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  ],</span></span><br><span class="language-javascript"><span class="language-xml">  ...</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br></code></pre></td></tr></table></figure><p><code>login/rules</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/i18n&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">validatePassword</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(i18n.<span class="hljs-property">global</span>.<span class="hljs-title function_">t</span>(<span class="hljs-string">&#x27;msg.login.passwordRule&#x27;</span>)))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">callback</span>()<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <strong><code>navbar</code> 区域</strong></p><p><code>layout/components/navbar</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">dropdown</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-dropdown&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span> &#123;&#123; $t(&#x27;msg.navBar.home&#x27;) &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>&#123;&#123; $t(&#x27;msg.navBar.course&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">divided</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;logout&quot;</span>&gt;</span></span><br><span class="language-xml">              &#123;&#123; $t(&#x27;msg.navBar.logout&#x27;) &#125;&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span></span><br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><code>components/LangSelect/index</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;el-tooltip :content=<span class="hljs-string">&quot;$t(&#x27;msg.navBar.lang&#x27;)&quot;</span> :effect=<span class="hljs-string">&quot;effect&quot;</span>&gt;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSetLanguage</span> = lang =&gt; &#123;<br>  ...<br>  <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(i18n.<span class="hljs-title function_">t</span>(<span class="hljs-string">&#x27;msg.toast.switchLangSuccess&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="sidebar-与-面包屑-区域的国际化处理"><a href="#sidebar-与-面包屑-区域的国际化处理" class="headerlink" title="sidebar 与 面包屑 区域的国际化处理"></a>sidebar 与 面包屑 区域的国际化处理</h2><p><strong>sidebar 区域</strong></p><p>目前对于 <code>sidebar</code> 而言，显示的文本是我们在定义路由表时的 <code>title</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以 <strong>把 <code>title</code> 作为语言包内容的 <code>key</code> 进行处理</strong></p><p>创建 <code>utils/i18n</code> 工具模块，用于 <strong>将 <code>title</code> 转化为国际化内容</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/i18n&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateTitle</span>(<span class="hljs-params">title</span>) &#123;<br>  <span class="hljs-keyword">return</span> i18n.<span class="hljs-property">global</span>.<span class="hljs-title function_">t</span>(<span class="hljs-string">&#x27;msg.route.&#x27;</span> + title)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 <code>layout/components/Sidebar/MenuItem.vue</code> 中导入该方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  ...<br>  &lt;span&gt;&#123;&#123; <span class="hljs-title function_">generateTitle</span>(title) &#125;&#125;&lt;/span&gt;<br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; generateTitle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>最后修改下 <code>sidebarHeader</code> 的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;logo-title&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;$store.getters.sidebarOpened&quot;</span>&gt;<br>  &#123;&#123; $t(<span class="hljs-string">&#x27;msg.logo&#x27;</span>) &#125;&#125;<br>&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p><strong>面包屑区域：</strong></p><p>在 <code>components/Breadcrumb/index</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>...<br>    &lt;!-- 不可点击项 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;index === breadcrumbData.length - 1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;no-redirect&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="language-xml">        generateTitle(item.meta.title)</span><br><span class="language-xml">        &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    &lt;!-- 可点击项 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redirect&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;onLinkClick(item)&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="language-xml">        generateTitle(item.meta.title)</span><br><span class="language-xml">        &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>...<br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; generateTitle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h2 id="国际化缓存处理"><a href="#国际化缓存处理" class="headerlink" title="国际化缓存处理"></a>国际化缓存处理</h2><p>我们希望在 <strong>刷新页面后，当前的国际化选择可以被保留</strong>，所以想要实现这个功能，那么就需要进行 <strong>国际化的缓存处理</strong></p><p>此处的缓存，我们依然通过两个方面进行：</p><ol><li><code>vuex</code> 缓存</li><li><code>LocalStorage</code> 缓存</li></ol><p>只不过这里的缓存，我们已经在处理 <strong><code>langSelect</code> 组件时</strong> 处理完成了，所以此时我们只需要使用缓存下来的数据即可。</p><p>在 <code>i18n/index</code> 中，创建 <code>getLanguage</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回当前 lang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getLanguage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> store &amp;&amp; store.<span class="hljs-property">getters</span> &amp;&amp; store.<span class="hljs-property">getters</span>.<span class="hljs-property">language</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改 <code>createI18n</code> 的 <code>locale</code> 为 <code>getLanguage()</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> i18n = <span class="hljs-title function_">createI18n</span>(&#123;<br>  ...<br>  <span class="hljs-attr">locale</span>: <span class="hljs-title function_">getLanguage</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="国际化方案总结"><a href="#国际化方案总结" class="headerlink" title="国际化方案总结"></a>国际化方案总结</h2><p>国际化是前端项目中的一个非常常见的功能，那么在前端项目中实现国际化主要依靠的就是 <code>vue-i18n</code> 这个第三方的包。</p><p>关于国际化的实现原理大家可以参照 <strong>国际化实现原理</strong> 这一小节，这里我们就不再赘述了。</p><p>而  <code>i18n</code> 的使用，整体来说就分为这么四步：</p><ol><li>创建 <code>messages</code> 数据源</li><li>创建 <code>locale</code> 语言变量</li><li>初始化 <code>i18n</code> 实例</li><li>注册 <code>i18n</code> 实例</li></ol><p>核心的内容其实就是 数据源的部分，但是大家需要注意，如果你的项目中使用了 <strong>第三方组件库</strong> ，那么不要忘记 <strong>第三方组件库的数据源</strong> 需要 <strong>单独</strong> 进行处理！</p><h1 id="动态换肤原理分析"><a href="#动态换肤原理分析" class="headerlink" title="动态换肤原理分析"></a>动态换肤原理分析</h1><p>想要实现 <strong>动态换肤</strong> 的一个前置条件就是：<strong>色值不可以写死！</strong></p><p>首先我们先来说一下动态换肤的实现方式。</p><p>在 <code>scss</code> 中，我们可以通过 <code>$变量名:变量值</code> 的方式定义 <code>css 变量</code> ，然后通过该 <code>css</code> 来去指定某一块 <code>DOM</code> 对应的颜色。</p><p>那么大家可以想一下，如果我此时改变了该 <code>css</code> 变量的值，那么对应的 <code>DOM</code> 颜色是不是也会同步发生变化。</p><p>当大量的 <code>DOM</code> 都依赖这个 <code>css 变量</code> 设置颜色时，我们是不是只需要改变这个 <code>css 变量</code> ，那么所有 <code>DOM</code> 的颜色是不是都会发生变化，所谓的 <strong>动态换肤</strong> 是不是就可以实现了！</p><p>这个就是 <strong>动态换肤</strong> 的实现原理!</p><p>实现换肤和主题大致有两种方案:</p><ol><li>使用原生支持的 css var</li><li>通过一些手段覆盖 element plus 样式</li></ol><p>我们先看来看看 css var 的实现吧。</p><h2 id="css变量"><a href="#css变量" class="headerlink" title="css变量"></a>css变量</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root">https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root</a></p></blockquote><p>变量 与 color、font-size 等正式属性没有什么不同，只是没有默认含义。</p><p>所以 CSS 变量（CSS variable）又叫做”CSS 自定义属性”（CSS custom properties）。因为变量与自定义的 CSS 属性其实是一回事。</p><p>变量可以分为</p><ul><li>全局变量</li><li>局部变量</li></ul><p><strong>全局变量</strong><br>通过 <code>:root</code> 去定义，其他所有的元素都可以通过 <code>var(--xxx)</code> 的形式去使用<code>全局变量</code>，我们来看下面这个例子:</p><blockquote><p>var()函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;style&gt;<br>  :root &#123;<br>    --<span class="hljs-attr">color</span>: skyblue;<br>  &#125;<br><br>  .<span class="hljs-property">use</span>-<span class="hljs-variable language_">global</span> &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-title function_">var</span>(--color)<br>  &#125;<br>&lt;/style&gt;<br><br><span class="hljs-comment">// body</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;use-global&quot;</span>&gt;</span>使用了全局变量<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>:root</strong></p><blockquote><p>:root 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，:root 表示 <html> 元素，除了优先级更高之外，与 html 选择器相同。</p></blockquote><p><strong>自定义属性 (–*)：CSS 变量</strong></p><blockquote><p>带有前缀–的属性名，比如–example–name，表示的是带有值的自定义属性，其可以通过 var 函数在全文档范围内复用的。</p></blockquote><p><strong>局部变量</strong></p><p>我们可以在某个选择器下去定义变量，或者在元素的 <code>style</code> 属性上定义变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// style</span><br>:root &#123;<br>  --<span class="hljs-attr">color</span>: skyblue;<br>&#125;<br><br>.<span class="hljs-property">parent</span> &#123;<br>  --<span class="hljs-attr">color</span>: pink; <span class="hljs-comment">// 优先级更高</span><br>&#125;<br><br>h3 &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title function_">var</span>(--color)<br>&#125;<br><br><span class="hljs-comment">// html</span><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>child title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>这里 <code>h3</code> 标签会显示红色。虽然我们在 <code>:root</code> 上也定义了 <code>--color</code> 变量，但是根据就近原则，<code>h3</code> 会取父级定义的变量。</p><p>我们还可以在 <code>style</code> 属性上定义变量，这里我们定义了一个 <code>--bg</code> 变量，其子元素可以访问到这个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">parent</span> &#123;<br>  --<span class="hljs-attr">color</span>: pink;<br>&#125;<br><br>h3 &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title function_">var</span>(--color);<br>  background-<span class="hljs-attr">color</span>: <span class="hljs-title function_">var</span>(--bg);<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;parent&quot;</span> style=<span class="hljs-string">&quot;--bg: black;&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>child title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="修改-css-变量"><a href="#修改-css-变量" class="headerlink" title="修改 css 变量"></a>修改 css 变量</h2><p>这里定义了两个按钮，一个修改全局的（根组件）的变量，一个用来修改特定元素上的定义的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;change root&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;variable&quot;</span>&gt;</span>change local variable<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>修改全局变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn&#x27;</span>)<br><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> html = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span><br><br>  html.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>修改局部变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> variableBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.variable&#x27;</span>)<br><br>variableBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> parent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.parent&#x27;</span>)<br><br>  parent.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="暗黑模式原理分析"><a href="#暗黑模式原理分析" class="headerlink" title="暗黑模式原理分析"></a>暗黑模式原理分析</h1><blockquote><p>prefers-color-scheme</p><p>prefers-color-scheme CSS 媒体特性: 用于检测用户是否有将系统的主题色设置为亮色或者暗色。</p></blockquote><h2 id="主题色实现原理"><a href="#主题色实现原理" class="headerlink" title="主题色实现原理"></a>主题色实现原理</h2><p>通过 <code>媒体查询</code> 去监听系统主题色的变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// style</span><br>@media (prefers-color-<span class="hljs-attr">scheme</span>: dark) &#123;<br>  .<span class="hljs-property">day</span>.<span class="hljs-property">dark</span>-scheme   &#123; <span class="hljs-attr">background</span>:  #<span class="hljs-number">333</span>; <span class="hljs-attr">color</span>: white; &#125;<br>  .<span class="hljs-property">night</span>.<span class="hljs-property">dark</span>-scheme &#123; <span class="hljs-attr">background</span>: black; <span class="hljs-attr">color</span>:  red; &#125;<br>&#125;<br><br>@media (prefers-color-<span class="hljs-attr">scheme</span>: light) &#123;<br>  .<span class="hljs-property">day</span>.<span class="hljs-property">light</span>-scheme   &#123; <span class="hljs-attr">background</span>: skyblue; <span class="hljs-attr">color</span>:  #<span class="hljs-number">333</span>; &#125;<br>  .<span class="hljs-property">night</span>.<span class="hljs-property">light</span>-scheme &#123; <span class="hljs-attr">background</span>:  pink; <span class="hljs-attr">color</span>: #<span class="hljs-number">333</span>; &#125;<br>&#125;<br><br>.<span class="hljs-property">day</span>, .<span class="hljs-property">night</span> &#123;<br>  <span class="hljs-attr">display</span>: inline-block;<br>  <span class="hljs-attr">padding</span>: 1em;<br>  <span class="hljs-attr">width</span>: 7em;<br>  <span class="hljs-attr">height</span>: 7em;<br>  vertical-<span class="hljs-attr">align</span>: middle;<br>&#125;<br><br><span class="hljs-comment">// html</span><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;day light-scheme&quot;</span>&gt;<span class="hljs-title class_">Day</span> (changes <span class="hljs-keyword">in</span> light scheme)&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;day dark-scheme&quot;</span>&gt;</span>Day (changes in dark scheme)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> &lt;br&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;night light-scheme&quot;</span>&gt;</span>Night (changes in light scheme)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;night dark-scheme&quot;</span>&gt;</span>Night (changes in dark scheme)<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>现在，我们可以去切换系统的主题色，就会发现页面上的颜色跟着变化了，这是因为我们通过 <code>@media</code> 监听 <code>prefers-color-scheme</code> 起作用了。</p><h2 id="window-matchMedia"><a href="#window-matchMedia" class="headerlink" title="window.matchMedia"></a>window.matchMedia</h2><p>虽然我们通过 css @media 能够应对系统的主题色切换，但是我们如何在 <code>js</code> 中去监听呢？</p><p>答案是通过 <code>window.matchMedia</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果匹配成功，scheme.matches === true</span><br><span class="hljs-comment">// 也就是说，如果我们的系统是暗黑色，那么这个 matches 就是true，否则是 false</span><br><span class="hljs-keyword">const</span> scheme = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>)<br><br>scheme.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">matches</span>) &#123;<br>    <span class="hljs-comment">// 暗黑色</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 亮色</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="修改主题色"><a href="#修改主题色" class="headerlink" title="修改主题色"></a>修改主题色</h2><p>到此，我们知道了主题色的实现原理，我们如何在项目里去实现主题色的切换呢？</p><p>我们来看一个小例子</p><p>首先，我们先定义好 <code>全局变量</code>，里面包含了一些 <code>亮色模式</code> 下的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">:root &#123;<br>  --<span class="hljs-attr">color</span>: #<span class="hljs-number">333</span>;<br>  --background-<span class="hljs-attr">color</span>: pink;<br>&#125;<br><br>&lt;h1 style=<span class="hljs-string">&quot;background-color: var(--background-color); color: var(--color)&quot;</span>&gt;<br>  我是一个标题。！！！<br>&lt;/h1&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dark-btn&quot;</span>&gt;</span>dark mode<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在页面初始时，我们的背景色是粉色，颜色是浅黑色。</p><p>现在我们创建一个按钮，来修改主题颜色，这个之前实现过了很简单对吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> darkBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.dark-btn&#x27;</span>)<br><br>darkBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 修改变量</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--color&#x27;</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>)<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--background-color&#x27;</span>, <span class="hljs-string">&#x27;#000&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>好无疑问这样是可以实现的，但是，如果变量多起来了，几十上百个，我们也要一个个去修改吗？</p><p>既然我们的变量都定义在根元素上，那么我们可以采取 <strong>属性覆盖</strong> 的形式。</p><p>我们定义一个 <code>[data-theme=&quot;dark&quot;]</code> 样式表，专门用来处理 <code>暗黑模式</code> 下的变量，这里是黑色背景白色字体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[data-theme=<span class="hljs-string">&quot;dark&quot;</span>] &#123;<br>  --<span class="hljs-attr">color</span>: #fff;<br>  --background-<span class="hljs-attr">color</span>: #<span class="hljs-number">000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者属性选择器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* 浅色模式 */</span><br>html[data-theme=<span class="hljs-string">&quot;light&quot;</span>]:root &#123;<br>  --body-<span class="hljs-attr">background</span>: #efefef;<br>  --text-<span class="hljs-attr">color</span>: #<span class="hljs-number">333</span>;<br>&#125;<br><br><span class="hljs-comment">/* 深色模式 */</span><br>html[data-theme=<span class="hljs-string">&quot;dark&quot;</span>]:root &#123;<br>  --body-<span class="hljs-attr">background</span>: #<span class="hljs-number">000</span>;<br>  --text-<span class="hljs-attr">color</span>: #ededed;<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始，这个样式表并不会生效，因为根标签上根本没有 <code>data-theme=&quot;dark&quot;</code> 属性，我们通过按钮来修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">darkBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>, <span class="hljs-string">&#x27;dark&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们给根标签设置了 <code>data-theme=&quot;dark&quot;</code> 属性，同时内部定了暗黑相关的变量，这时，<code>data-theme=&quot;dark&quot;</code> 内部的变量就会覆盖 <code>:root</code> 中的变量了，从而达到切换主题色的效果。</p><p>同时，我们需要根据系统的主题色，来设置项目的主题色，这里就要用到 <code>window.matchMedia</code> 方法了。</p><p>如果在 <code>Vue</code> 项目中，我们可以这样去实现:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> theme = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">settings</span>.<span class="hljs-property">theme</span>);<br><br><span class="hljs-comment">// 查看当前是否是 暗黑模式</span><br><span class="hljs-keyword">const</span> mediaQueryListDark = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">changeTheme</span> = (<span class="hljs-params">theme</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 批量覆盖全局的变量</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-theme&#x27;</span>, theme);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleColorSchemeChange</span> = evt =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (evt.<span class="hljs-property">matches</span>) &#123;<br>    <span class="hljs-title function_">changeTheme</span>(<span class="hljs-string">&#x27;dark&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">changeTheme</span>(<span class="hljs-string">&#x27;light&#x27;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (theme.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;Follow System&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 初始值：跟随系统设置</span><br>    <span class="hljs-title function_">handleColorSchemeChange</span>(mediaQueryListDark);<br><br>    <span class="hljs-comment">// 监听系统主题的变化</span><br>    mediaQueryListDark.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, handleColorSchemeChange);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (theme.<span class="hljs-property">value</span>) &#123;<br>    <span class="hljs-title function_">changeTheme</span>(theme.<span class="hljs-property">value</span>.<span class="hljs-title function_">toLowerCase</span>());<br><br>    <span class="hljs-comment">// 如果不是跟随系统设置主题了，用户自己设置的主题色，我们就不需要监听系统的主题色切换了</span><br>    mediaQueryListDark.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, handleColorSchemeChange);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里，我们花了大量的时间和实例对换肤和主题的原理进行了研究，那么接下来就要进入正式的项目开发环节了。</p><h1 id="官方换肤方案"><a href="#官方换肤方案" class="headerlink" title="官方换肤方案"></a>官方换肤方案</h1><blockquote><p>官方样式路径：/node_modules/element-plus/theme-chalk/src/common/var.scss</p></blockquote><p>定义自己的 scss 文件，然后在 main.ts 导入。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">$<span class="hljs-attr">--colors</span>: (<br>  <span class="hljs-string">&quot;primary&quot;</span>: (<br>    <span class="hljs-string">&quot;base&quot;</span>: pink,<br>  ),<br>  <span class="hljs-string">&quot;success&quot;</span>: (<br>    <span class="hljs-string">&quot;base&quot;</span>: blue,<br>  ),<br>  <span class="hljs-string">&quot;warning&quot;</span>: (<br>    <span class="hljs-string">&quot;base&quot;</span>: <span class="hljs-number">#f2711c</span>,<br>  ),<br>  <span class="hljs-string">&quot;danger&quot;</span>: (<br>    <span class="hljs-string">&quot;base&quot;</span>: <span class="hljs-number">#db2828</span>,<br>  ),<br>  <span class="hljs-string">&quot;error&quot;</span>: (<br>    <span class="hljs-string">&quot;base&quot;</span>: <span class="hljs-number">#db2828</span>,<br>  ),<br>  <span class="hljs-string">&quot;info&quot;</span>: (<br>    <span class="hljs-string">&quot;base&quot;</span>: <span class="hljs-number">#42b8dd</span>,<br>  ),<br>);<br><br><span class="hljs-keyword">@forward</span> <span class="hljs-string">&#x27;element-plus/theme-chalk/src/common/var.scss&#x27;</span> with (<br>  $<span class="hljs-attribute">colors</span>: $--colors,<br>);<br><br><span class="hljs-comment">/* 导入所有的样式变量 */</span><br><span class="hljs-keyword">@use</span> <span class="hljs-string">&quot;element-plus/theme-chalk/src/index.scss&quot;</span> as *;<br></code></pre></td></tr></table></figure><p>修改 <code>main.ts</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">// 注释原导入的 element-plus 样式<br>// import &#x27;element-plus/dist/index<span class="hljs-selector-class">.css</span>&#x27;<br><br><br>// 导入我们自己的定义的样式<br>import &#x27;@/styles/cover-element-plus.scss&#x27;<br></code></pre></td></tr></table></figure><h2 id="通过-CSS-变量设置"><a href="#通过-CSS-变量设置" class="headerlink" title="通过 CSS 变量设置"></a>通过 CSS 变量设置</h2><p>如果不通过上面那种方案，我们还可以定义全局的变量，来覆盖官方的样式。</p><p>在自己的样式文件中写入需要覆盖的样式变量：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--el-color-primary</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你只想自定义一个特定的组件，只需为某些组件单独添加内联样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;el-tag style=&quot;<span class="hljs-attr">--el-tag-bg-color</span>: red<span class="hljs-string">&quot;&gt;Tag&lt;/el-tag&gt;</span><br></code></pre></td></tr></table></figure><p>出于性能原因，更加推荐你在类名下添加自定义 css 变量，而不是在全局的 :root 下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.custom-class</span> &#123;<br>  <span class="hljs-attr">--el-tag-bg-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果您想要通过 js 控制 css 变量，可以这样做：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// document<span class="hljs-selector-class">.documentElement</span> 是全局变量时<br>const el = document<span class="hljs-selector-class">.documentElement</span><br>// const el = document<span class="hljs-selector-class">.getElementById</span>(&#x27;xxx&#x27;)<br><br>// 获取 css 变量<br>getComputedStyle(el)<span class="hljs-selector-class">.getPropertyValue</span>(`<span class="hljs-attr">--el-color-primary</span>`)<br><br>// 设置 css 变量<br>el<span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.setProperty</span>(&#x27;<span class="hljs-attr">--el-color-primary</span>&#x27;, &#x27;red&#x27;)<br></code></pre></td></tr></table></figure><h2 id="总结。"><a href="#总结。" class="headerlink" title="总结。"></a>总结。</h2><p>相当于我们重新定义了变量，覆盖了官方自己定义的变量，如果我们项目只需要一种颜色，那么这种方案是可行的，但是我们项目需要支持用户选择主题来替换，那么这种方案就不适用了。</p><p>那么我来用另一种方案来实现吧。</p><h1 id="换肤方案落地"><a href="#换肤方案落地" class="headerlink" title="换肤方案落地"></a>换肤方案落地</h1><p>在我们的项目中想要实现动态换肤，需要同时处理两个方面的内容：</p><ol><li><code>element-plus</code> 主题</li><li>非 <code>element-plus</code> 主题</li></ol><p>明确好了原理之后，接下来我们就来理一下咱们的实现思路。</p><p>从原理中我们可以得到以下两个关键信息：</p><ol><li>动态换肤的关键是修改 <code>css 变量</code> 的值</li><li>换肤需要同时兼顾<ol><li><code>element-plus</code> </li><li>非 <code>element-plus</code> </li></ol></li></ol><p>那么根据以上关键信息，我们就可以得出对应的实现方案:</p><ol><li>创建一个组件 <code>ThemeSelect</code> 用来处理修改之后的 <code>css 变量</code> 的值</li><li>根据新值修改 <code>element-plus</code>  主题色</li><li>根据新值修改非 <code>element-plus</code>  主题色</li></ol><h2 id="创建-ThemeSelect-组件"><a href="#创建-ThemeSelect-组件" class="headerlink" title="创建 ThemeSelect 组件"></a>创建 ThemeSelect 组件</h2><p><code>ThemeSelect</code> 组件将由两部分组成：</p><ol><li><code>navbar</code> 中的展示图标</li><li>选择颜色的弹出层</li></ol><p>这是效果图：</p><p><img src="/img/theme-select.png" alt=""></p><p><strong>创建 <code>components/ThemeSelect/index</code> 组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;!-- 主题图标 v-bind：<span class="hljs-attr">https</span>:<span class="hljs-comment">//v3.cn.vuejs.org/api/instance-properties.html#attrs --&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">trigger</span>=<span class="hljs-string">&quot;click&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;theme&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    @<span class="hljs-attr">command</span>=<span class="hljs-string">&quot;handleSetTheme&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-tooltip</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;$t(&#x27;msg.navBar.themeChange&#x27;)&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;change-theme&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-tooltip</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">dropdown</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span></span><br><span class="language-xml">          &#123;&#123; $t(&#x27;msg.theme.themeColorChange&#x27;) &#125;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span></span><br><br>  &lt;!-- 展示弹出层 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSetTheme</span> = command =&gt; &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在 <code>layout/components/navbar</code> 中进行引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;right-menu&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">theme-picker</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-menu-item hover-effect&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">theme-picker</span>&gt;</span></span><br>&lt;/div&gt;<br><br>... <br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ThemePicker</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/ThemeSelect/index&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>创建 <code>SelectColor</code> 组件</strong></p><p>在有了 <code>ThemeSelect</code> 之后，接下来我们来去处理颜色选择的组件 <code>SelectColor</code>，在这里我们会用到 <code>element</code> 中的 <code>el-color-picker</code> 组件</p><p>对于 <code>SelectColor</code> 的处理，我们需要分成两步进行：</p><ol><li>完成 <code>SelectColor</code> 弹窗展示的双向数据绑定</li><li>把选中的色值进行本地缓存</li></ol><p>那么下面咱们先来看第一步：<strong>完成 <code>SelectColor</code> 弹窗展示的双向数据绑定</strong></p><p>创建 <code>components/ThemePicker/components/SelectColor.vue</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;提示&quot;</span> <span class="hljs-attr">:model-value</span>=<span class="hljs-string">&quot;modelValue&quot;</span> @<span class="hljs-attr">close</span>=<span class="hljs-string">&quot;closed&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22%&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;msg.theme.themeColorChange&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-color-picker</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;mColor&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:predefine</span>=<span class="hljs-string">&quot;predefineColors&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-color-picker</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;closed&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;msg.universal.cancel&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;comfirm&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="language-xml">          $t(&#x27;msg.universal.confirm&#x27;)</span><br><span class="language-xml">        &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps, defineEmits, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">modelValue</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Boolean</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>])</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 预定义色值</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> predefineColors = [</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#ff4500&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#ff8c00&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#ffd700&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#90ee90&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#00ced1&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#1e90ff&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#c71585&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;rgba(255, 69, 0, 0.68)&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;rgb(255, 120, 0)&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;hsv(51, 100, 98)&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;hsva(120, 40, 94, 0.5)&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;hsl(181, 100%, 37%)&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;hsla(209, 100%, 56%, 0.73)&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;#c7158577&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">]</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 默认色值</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> mColor = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;#00ff00&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 关闭</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">closed</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">emits</span>(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, <span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/**</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 确定</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 1. 修改主题色</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 2. 保存最新的主题色</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 3. 关闭 dialog</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">comfirm</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">closed</span>()</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.center</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.title</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>在 <code>ThemePicker/index</code> 中使用该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  ...<br>  &lt;!-- 展示弹出层 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select-color</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectColorVisible&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select-color</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">SelectColor</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/SelectColor.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> selectColorVisible = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSetTheme</span> = command =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  selectColorVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>完成双向数据绑定之后，我们来处理第二步：<strong>把选中的色值进行本地缓存</strong></p><p>缓存的方式分为两种：</p><ol><li><code>vuex</code></li><li>本地存储</li></ol><p>在 <code>constants/index</code> 下新建常量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 主题色保存的 key</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MAIN_COLOR</span> = <span class="hljs-string">&#x27;mainColor&#x27;</span><br><span class="hljs-comment">// 默认色值</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_COLOR</span> = <span class="hljs-string">&#x27;#409eff&#x27;</span><br></code></pre></td></tr></table></figure><p>创建 <code>store/modules/theme</code> 模块，用来处理 <strong>主题色</strong> 相关内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; getItem, setItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">MAIN_COLOR</span>, <span class="hljs-variable constant_">DEFAULT_COLOR</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constant&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">mainColor</span>: <span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">MAIN_COLOR</span>) || <span class="hljs-variable constant_">DEFAULT_COLOR</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置主题色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">setMainColor</span>(<span class="hljs-params">state, newColor</span>) &#123;<br>      state.<span class="hljs-property">mainColor</span> = newColor<br>      <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">MAIN_COLOR</span>, newColor)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>store/getters</code> 下指定快捷访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mainColor</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">theme</span>.<span class="hljs-property">mainColor</span><br></code></pre></td></tr></table></figure><p>在 <code>store/index</code> 中导入 <code>theme</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> theme <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/theme.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  getters,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    ...<br>    theme<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在 <code>selectColor</code> 中，设置初始色值 和  缓存色值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; defineProps, defineEmits, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br>...<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><br><span class="hljs-comment">// 默认色值</span><br><span class="hljs-keyword">const</span> mColor = <span class="hljs-title function_">ref</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">mainColor</span>)<br><br>...<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 确定按钮</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. 修改主题色</span><br><span class="hljs-comment"> * 2. 保存最新的主题色</span><br><span class="hljs-comment"> * 3. 关闭 dialog</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">comfirm</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 2. 保存最新的主题色</span><br>  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;theme/setMainColor&#x27;</span>, mColor.<span class="hljs-property">value</span>)<br>  <span class="hljs-comment">// 3. 关闭 dialog</span><br>  <span class="hljs-title function_">closed</span>()<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="scss-mix方法"><a href="#scss-mix方法" class="headerlink" title="scss mix方法"></a>scss mix方法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// 给当前的颜色值，添加上 <span class="hljs-number">50%</span> 的白色<br><span class="hljs-selector-class">.white</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">mix</span>(white, $color, <span class="hljs-number">50%</span>);<br>&#125;<br><br>// 给当前的颜色值，添加上 <span class="hljs-number">50%</span> 的黑色<br><span class="hljs-selector-class">.black</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">mix</span>(black, $color, <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="处理-element-plus-主题色变更原理与步骤分析"><a href="#处理-element-plus-主题色变更原理与步骤分析" class="headerlink" title="处理 element-plus 主题色变更原理与步骤分析"></a>处理 element-plus 主题色变更原理与步骤分析</h2><p>对于 <code>element-plus</code> 的主题变更，相对比较复杂，所以说整个过程我们会分为三部分：</p><ol><li>实现原理</li><li>实现步骤</li><li>实现过程</li></ol><p><strong>实现原理：</strong></p><p>在之前我们分析主题变更的实现原理时，我们说过，核心的原理是：*<em>通过修改 <code>scss</code> 变量 *</em> 的形式修改主题色完成主题变更</p><p>但是对于 <code>element-plus</code> 而言，我们怎么去修改这样的主题色呢？</p><p>其实整体的原理非常简单，分为三步：</p><ol><li>获取当前 <code>element-plus</code> 的所有样式</li><li>找到我们想要替换的样式部分，通过正则完成替换</li><li>把替换后的样式写入到 <code>style</code> 标签中，利用样式优先级的特性，替代固有样式</li></ol><p><strong>实现步骤：</strong></p><p>那么明确了原理之后，我们的实现步骤也就呼之欲出了，对应原理总体可分为四步：</p><ol><li>获取当前 <code>element-plus</code> 的所有样式</li><li>定义我们要替换之后的样式</li><li>在原样式中，利用正则替换新样式</li><li>把替换后的样式写入到 <code>style</code> 标签中</li></ol><p><strong>创建 <code>utils/theme</code> 工具类，写入两个方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入新样式到 style</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; elNewStyle  element-plus 的新样式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; isNewStyleTag 是否生成新的 style 标签</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">writeNewStyle</span> = elNewStyle =&gt; &#123;<br>  <br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据主色值，生成最新的样式表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateNewStyle</span> =  primaryColor =&gt; &#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>那么接下来我们先实现第一个方法 <code>generateNewStyle</code>，在实现的过程中，我们需要安装两个工具类：</p><ol><li><a href="https://www.npmjs.com/package/rgb-hex">rgb-hex</a>：转换RGB(A)颜色为十六进制</li><li><a href="https://www.npmjs.com/package/css-color-function">css-color-function</a>：在 CSS 中 Tab Atkins 提出的颜色函数的解析器和转换器。</li></ol><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> rgbHex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rgb-hex&#x27;</span><br><br><span class="hljs-title function_">rgbHex</span>(<span class="hljs-number">65</span>, <span class="hljs-number">131</span>, <span class="hljs-number">196</span>);<br><span class="hljs-comment">//=&gt; &#x27;4183c4&#x27;</span><br><br><span class="hljs-title function_">rgbHex</span>(<span class="hljs-string">&#x27;rgb(40, 42, 54)&#x27;</span>);<br><span class="hljs-comment">//=&gt; &#x27;282a36&#x27;</span><br><br><span class="hljs-title function_">rgbHex</span>(<span class="hljs-number">65</span>, <span class="hljs-number">131</span>, <span class="hljs-number">196</span>, <span class="hljs-number">0.2</span>);<br><span class="hljs-comment">//=&gt; &#x27;4183c433&#x27;</span><br><br><span class="hljs-title function_">rgbHex</span>(<span class="hljs-number">40</span>, <span class="hljs-number">42</span>, <span class="hljs-number">54</span>, <span class="hljs-string">&#x27;75%&#x27;</span>);<br><span class="hljs-comment">//=&gt; &#x27;282a36bf&#x27;</span><br><br><span class="hljs-title function_">rgbHex</span>(<span class="hljs-string">&#x27;rgba(40, 42, 54, 75%)&#x27;</span>);<br><span class="hljs-comment">//=&gt; &#x27;282a36bf&#x27;</span><br><br>------------------------------------------------<br><br><span class="hljs-keyword">import</span> color <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;css-color-function&#x27;</span><br> <br>color.<span class="hljs-title function_">convert</span>(<span class="hljs-string">&#x27;color(red tint(50%))&#x27;</span>);<br><span class="hljs-comment">// &quot;rgb(255, 128, 128)&quot;</span><br></code></pre></td></tr></table></figure><p>然后还需要写入一个 <strong>颜色转化计算器  <code>formula.json</code></strong>，这里主要是以 <code>primary</code> 色值为例</p><p>创建 <code>constants/formula.json</code> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;shade-1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary shade(10%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(10%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(20%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(30%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(40%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(50%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(60%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-7&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(70%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-8&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(80%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;light-9&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(90%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;subMenuHover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(70%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;subMenuBg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(80%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;menuHover&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary tint(90%))&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;menuBg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color(primary)&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>我们来看下 element plus 定义的 <code>primary</code> 变量，<code>light-i</code> 表示颜色的深浅。</p><p><img src="/img/primary.png" alt=""></p><p>如果我们想要定义其它颜色，比如<code>--el-color-success</code>，已同样的方法，添加到 <code>formula.json</code> 中即可。</p><p>同时我们还定义了自己变量在 <code>formula</code> 颜色转换器中，因为我们的 <code>菜单</code> 部分，也是需要跟着主题色变化的。</p><p><strong>shade tint 方法其实就是利用了 scss 的 mix 方法</strong>，css-color-function 库内部调用进行解析，对某个颜色加深或者淡化！！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">// scss<br><br>// 给当前的颜色值，添加上 <span class="hljs-number">50%</span> 的白色<br><span class="hljs-selector-class">.white</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">mix</span>(white, $color, <span class="hljs-number">50%</span>);<br>&#125;<br><br>// 给当前的颜色值，添加上 <span class="hljs-number">50%</span> 的黑色<br><span class="hljs-selector-class">.black</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">mix</span>(black, $color, <span class="hljs-number">50%</span>);<br>&#125;<br><br><span class="hljs-keyword">@function</span> tint($<span class="hljs-attribute">color</span>, $parcent) &#123;<br>  <span class="hljs-keyword">@return</span> mix(white, $<span class="hljs-attribute">color</span>, $parcent)<br>&#125;<br>@function shade($<span class="hljs-attribute">color</span>, $parcent) &#123;<br>  <span class="hljs-keyword">@return</span> mix(black, $<span class="hljs-attribute">color</span>, $parcent)<br>&#125;<br></code></pre></td></tr></table></figure><p>准备就绪后，我们来实现 <code>generateNewStyle</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://www.npmjs.com/package/css-color-function</span><br><span class="hljs-keyword">import</span> color <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;css-color-function&#x27;</span><br><br><span class="hljs-comment">// https://www.npmjs.com/package/rgb-hex</span><br><span class="hljs-keyword">import</span> rgbHex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rgb-hex&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> formula <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constants/formula.json&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 写入新样式到 style</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; cssText  element-plus 的新样式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; isNewStyleTag 是否生成新的 style 标签</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">writeNewStyle</span> = (<span class="hljs-params">cssText: string</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>)<br>  style.<span class="hljs-property">innerText</span> = cssText<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据主色值，生成最新的样式表</span><br><span class="hljs-comment"> */</span><br>type <span class="hljs-title class_">TObject</span> = &#123; [<span class="hljs-attr">key</span>: string]: string &#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateNewStyle</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">primaryColor: string</span>) =&gt; &#123;<br>  <span class="hljs-comment">// colors ===&gt; &#123; primary: &#x27;rgba(8, 12, 132, 0.68)&#x27;, shade-1: &#x27;#070b77ad&#x27;, light-1: &#x27;#212490ad&#x27;, ...... &#125;</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">colors</span>: <span class="hljs-title class_">TObject</span> = <span class="hljs-title function_">generateColors</span>(primaryColor) <span class="hljs-keyword">as</span> <span class="hljs-title class_">TObject</span><br><br>  <span class="hljs-comment">// 拿到整个 element plus 样式表，并对需要修改的变量打上了标记</span><br>  <span class="hljs-keyword">let</span> cssText = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getOriginalStyle</span>()<br><br>  <span class="hljs-comment">// 遍历生成的样式表，在 CSS 的原样式中进行全局替换</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(colors).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// reg pattern</span><br>    <span class="hljs-comment">// /(:|\s+)primary/g</span><br>    <span class="hljs-comment">// /(:|\s+)shade-1/g</span><br>    <span class="hljs-comment">// /(:|\s+)menuBg/g</span><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 这个模式中的 (:|\\s+) 表示一个冒号或一个或多个空白字符（包括空格、制表符和换行符）。</span><br>    <span class="hljs-comment">// \\s+ 的第一个 \ 是转义字符</span><br>    <span class="hljs-comment">// key 是一个变量，代表一个需要匹配的字符串，比如匹配 `primary`</span><br><br>    <span class="hljs-comment">// &#x27;$1&#x27; + colors[key]</span><br>    <span class="hljs-comment">// 关于为什么要在色值前面加上 $1，我们需要查看 replace 方法的第二个参数。</span><br>    <span class="hljs-comment">// 在这里，第二个参数是一个字符串，字符串中的 $1 会被替换成第一个括号捕获组（即 (:|\\s+)）匹配到的文本。</span><br>    <span class="hljs-comment">// 所以加上 $1 就是为了在【替换的文本】中【保留原本匹配到的文本】。</span><br>    cssText = cssText.<span class="hljs-title function_">replace</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(:|\\s+)&#x27;</span> + key, <span class="hljs-string">&#x27;g&#x27;</span>),<br>      <span class="hljs-string">&#x27;$1&#x27;</span> + colors[key]<br>    )<br>  &#125;)<br><br>  <span class="hljs-comment">// 最终，新的样式表中，含有我们自定义的颜色主题</span><br>  <span class="hljs-keyword">return</span> cssText<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据主色生成色值表</span><br><span class="hljs-comment"> */</span><br>type <span class="hljs-title class_">TFormulaKey</span> = keyof <span class="hljs-keyword">typeof</span> formula<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateColors</span> = (<span class="hljs-params">primary: string</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!primary) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">colors</span>: &#123; [<span class="hljs-attr">key</span>: string]: string &#125; = &#123;<br>    primary<br>  &#125;<br><br>  ;(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(formula) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">TFormulaKey</span>&gt;).<span class="hljs-title function_">forEach</span>(<br>    &lt;K <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TFormulaKey</span>&gt;<span class="hljs-function">(<span class="hljs-params">key: K</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 将所有的主色，替换成我们选中的主题色，形式如 &gt;&gt;&gt; color(rgba(255, 69, 0, 1) shade(10%))</span><br>      <span class="hljs-keyword">const</span> value = formula[key].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/primary/g</span>, primary)<br><br>      <span class="hljs-comment">// 通过 color 的 conver 方法，计算出 rgba 色值</span><br>      <span class="hljs-comment">// color.convert(value)  ===&gt;&gt;&gt;  rgba(0, 12, 230, 0.68)</span><br><br>      <span class="hljs-comment">// 最终将转为每个颜色，转为十六进制：#030420ad，写入到 colors 对象中，并返回</span><br>      colors[key] = <span class="hljs-string">&#x27;#&#x27;</span> + <span class="hljs-title function_">rgbHex</span>(color.<span class="hljs-title function_">convert</span>(value))<br>    &#125;<br>  )<br>  <span class="hljs-keyword">return</span> colors<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取当前 element-plus 的默认样式表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getOriginalStyle</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> version = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;element-plus/package.json&#x27;</span>).<span class="hljs-property">version</span><br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`https://unpkg.com/element-plus@<span class="hljs-subst">$&#123;version&#125;</span>/dist/index.css`</span><br>  <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(url)<br><br>  <span class="hljs-comment">// 把获取到的数据筛选为原样式模板</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getStyleTemplate</span>(data)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回 style 的 template</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getStyleTemplate</span> = (<span class="hljs-params">data: string</span>) =&gt; &#123;<br>  <span class="hljs-comment">// element-plus 默认色值</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">colorMap</span>: &#123; [<span class="hljs-attr">key</span>: string]: string &#125; = &#123;<br>    <span class="hljs-string">&#x27;#3a8ee6&#x27;</span>: <span class="hljs-string">&#x27;shade-1&#x27;</span>,<br>    <span class="hljs-string">&#x27;#409eff&#x27;</span>: <span class="hljs-string">&#x27;primary&#x27;</span>, <span class="hljs-comment">// element-plus 中含有变量 `--el-color-primary: #409eff`</span><br>    <span class="hljs-string">&#x27;#53a8ff&#x27;</span>: <span class="hljs-string">&#x27;light-1&#x27;</span>,<br>    <span class="hljs-string">&#x27;#66b1ff&#x27;</span>: <span class="hljs-string">&#x27;light-2&#x27;</span>,<br>    <span class="hljs-string">&#x27;#79bbff&#x27;</span>: <span class="hljs-string">&#x27;light-3&#x27;</span>,<br>    <span class="hljs-string">&#x27;#8cc5ff&#x27;</span>: <span class="hljs-string">&#x27;light-4&#x27;</span>,<br>    <span class="hljs-string">&#x27;#a0cfff&#x27;</span>: <span class="hljs-string">&#x27;light-5&#x27;</span>,<br>    <span class="hljs-string">&#x27;#b3d8ff&#x27;</span>: <span class="hljs-string">&#x27;light-6&#x27;</span>,<br>    <span class="hljs-string">&#x27;#c6e2ff&#x27;</span>: <span class="hljs-string">&#x27;light-7&#x27;</span>,<br>    <span class="hljs-string">&#x27;#d9ecff&#x27;</span>: <span class="hljs-string">&#x27;light-8&#x27;</span>,<br>    <span class="hljs-string">&#x27;#ecf5ff&#x27;</span>: <span class="hljs-string">&#x27;light-9&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">// 根据默认色值为要替换的色值打上标记</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(colorMap).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> value = colorMap[key]<br>    data = data.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(key, <span class="hljs-string">&#x27;ig&#x27;</span>), value)<br>  &#125;)<br><br>  <span class="hljs-comment">// 替换完之后</span><br>  <span class="hljs-comment">// `--el-color-primary: #409eff` 就变成了 `--el-color-primary: primary`</span><br>  <span class="hljs-comment">// --el-color-primary-light-3: #79bbff;  变成了  --el-color-primary-light-3: light-3</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// `--el-color-primary-light-9: #ecf5ff` 变成了 `--el-color-primary-light-9: light-9`</span><br><br>  <span class="hljs-keyword">return</span> data<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>我们来分析一下 theme.ts 中函数的执行流程</strong></p><ol><li><p>首先，外部调用 <code>generateNewStyle</code> 方法，传入 primaryColor，我们通过 el-color-picker 选中后的值，就是 <code>primaryColor</code>，它的色值长这样 <code>rgba(8, 12, 132, 0.68)</code>。</p></li><li><p>通过 <code>generateColors</code> 方法生成色值表</p><ol><li><p>通过 <code>css-color-function</code> 处理我们的颜色转化计算器<code>formula.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">color</span>(<span class="hljs-title function_">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">69</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-title function_">shade</span>(<span class="hljs-number">10</span>%)) &gt;&gt;&gt; color.<span class="hljs-title function_">convert</span>(value) &gt;&gt;&gt; <span class="hljs-title function_">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">230</span>, <span class="hljs-number">0.68</span>)<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>rgbHex</code> 方法将 rgba 转化为十六进制格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">rgbHex</span>(color.<span class="hljs-title function_">convert</span>(value))  ===&gt;&gt;&gt;  <span class="hljs-string">&#x27;#030420ad&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>返回处理过后的色值表 <code>colors</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">primary</span>: <span class="hljs-string">&#x27;rgba(8, 12, 132, 0.68)&#x27;</span>, <span class="hljs-comment">// 保留了原始的rgba格式</span><br>  shade-<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;#070b77ad&#x27;</span>,<br>  light-<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;#212490ad&#x27;</span>,<br>  light-<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;#393d9dad&#x27;</span>,<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 <code>getOriginalStyle</code> 方法，获取 element plus 样式表</p></li><li><p>拿到 element plus 样式数据后，通过 <code>getStyleTemplate</code> 方法，根据默认色值 <code>colorMap</code> 为要替换的色值打上标记</p><ol><li>element-plus 中含有变量 <code>--el-color-primary: #409eff</code>，而我们定义的 colorMap 默认值 <code>&#39;#409eff&#39;: &#39;primary&#39;</code> 就是与 element plus 中的十六进制值是对应。</li><li>我们就是要将 element plus 中的 primary 十六进制值替换成我们的标记，<code>primary、shade-*</code>。因为我们已经处理过 <code>formula.json</code> 了，处理过后得到的是 <strong><code>&#123; primary: &#39;rgba(8, 12, 132, 0.68)&#39;, shade-1: &#39;#070b77ad&#39;, light-1: &#39;#212490ad&#39;, ...&#125;</code></strong> 这种形式，这里面的色值，就是我们需要应用到页面上的颜色。</li><li>替换完之后，element plus 中的颜色变量就被标记上了记号，表示将来需要替换成真正的色值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">`--el-color-primary: #409eff`</span> 就变成了 <span class="hljs-string">`--el-color-primary: primary`</span><br><span class="hljs-string">`--el-color-primary-light-9: #ecf5ff`</span> 变成了 <span class="hljs-string">`--el-color-primary-light-9: light-9`</span><br></code></pre></td></tr></table></figure></li><li>返回处理过后的 element plus 样式表 <code>cssText</code></li></ol></li><li><p>接着，我们通过正则以及第二步 <code>generateColors</code> 方法返回的 colors，将 <code>cssText</code> 中每个打了标记的变量值替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">cssText = cssText.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(:|\\s+)&#x27;</span> + key, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-string">&#x27;$1&#x27;</span> + colors[key])<br></code></pre></td></tr></table></figure><ol><li>这个模式中的 (:|\s+) 表示一个冒号或一个【或】多个空白字符(\s+)（包括空格、制表符和换行符）</li><li>\s+ 的第一个 \ 是转义字符</li><li>key 是一个变量，代表一个需要匹配的字符串，比如匹配 <code>primary</code></li><li><code>&#39;$1&#39; + colors[key]</code>: replace 第二个参数是一个字符串，字符串中的 $1 会被替换成第一个括号捕获组（即 (:|\s+)）匹配到的文本。所以加上 $1 就是为了在【替换的文本】中【保留原本匹配到的文本】。</li><li>最后返回 cssText，新的样式表中，含有我们自定义的颜色主题</li></ol></li><li><p>最后，通过 <code>writeNewStyle</code> 将新的样式表 <code>cssText</code> 插入到文档中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>)<br>style.<span class="hljs-property">innerText</span> = cssText<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style)<br></code></pre></td></tr></table></figure></li></ol><p><strong>总结</strong></p><p>到这里，我们对 <code>element plus</code> 的主题换肤就完成了。</p><p>原理就是：拿到用户选中的颜色值(rgba)，通过 formula 颜色转换器转换成十六进制表 colors，然后拿到 <code>element plus</code> 的样式表，将其中需要修改的变量打上标记并返回含有标记的新样式表 cssText，最后，遍历 colors，通过正则将所有标记替换成 colors 中的值。完成样式的替换。</p><h2 id="element-plus-新主题的立即生效"><a href="#element-plus-新主题的立即生效" class="headerlink" title="element-plus 新主题的立即生效"></a>element-plus 新主题的立即生效</h2><p>到目前我们已经完成了 <code>element-plus</code> 的主题变更，但是当前的主题变更还有一个小问题，那就是：<strong>在刷新页面后，新主题会失效</strong></p><p>那么出现这个问题的原因，非常简单：<strong>因为没有写入新的 <code>style</code></strong></p><p>所以我们只需要在 <strong>应用加载后，写入 <code>style</code> 即可</strong></p><p>那么写入的时机，我们可以放入到 <code>app.vue</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> &#123; generateNewStyle, writeNewStyle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/theme&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><span class="hljs-title function_">generateNewStyle</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">mainColor</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">newStyleText</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">writeNewStyle</span>(newStyleText)<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="自定义主题变更"><a href="#自定义主题变更" class="headerlink" title="自定义主题变更"></a>自定义主题变更</h2><p>自定义主题变更相对来说比较简单，因为 <strong>自己的代码更加可控</strong>。</p><p>目前在我们的代码中，需要进行 <strong>自定义主题变更</strong> 为  <strong><code>menu</code> 菜单背景色</strong></p><p>而目前指定 <code>menu</code> 菜单背景色的位置在 <code>layout/components/sidebar/SidebarMenu.vue</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;el-menu<br>  :<span class="hljs-keyword">default</span>-active=<span class="hljs-string">&quot;activeMenu&quot;</span><br>  :collapse=<span class="hljs-string">&quot;!$store.getters.sidebarOpened&quot;</span><br>  :background-color=<span class="hljs-string">&quot;$store.getters.cssVar.menuBg&quot;</span><br>  :text-color=<span class="hljs-string">&quot;$store.getters.cssVar.menuText&quot;</span><br>  :active-text-color=<span class="hljs-string">&quot;$store.getters.cssVar.menuActiveText&quot;</span><br>  :unique-opened=<span class="hljs-string">&quot;true&quot;</span><br>  router<br>&gt;<br></code></pre></td></tr></table></figure><p>此处的 背景色是通过 <code>getters</code> 进行指定的，该 <code>cssVar</code> 的 <code>getters</code> 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">cssVar</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> variables,<br></code></pre></td></tr></table></figure><p>所以，我们想要修改 <strong>自定义主题</strong> ，只需要从这里入手即可。</p><p><strong>根据当前保存的 <code>mainColor</code> 覆盖原有的默认色值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> variables <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/styles/variables.scss&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">MAIN_COLOR</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constant&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-keyword">import</span> &#123; generateColors &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/theme&#x27;</span><br><br><span class="hljs-keyword">const</span> getters = &#123;<br>  ...<br>  <span class="hljs-attr">cssVar</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      ...variables,<br>      ...<span class="hljs-title function_">generateColors</span>(<span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">MAIN_COLOR</span>))<br>    &#125;<br>  &#125;,<br>  ...<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getters<br><br></code></pre></td></tr></table></figure><p>但是我们这样设定之后，整个自定义主题变更，还存在两个问题：</p><ol><li><code>menuBg</code> 背景颜色没有变化</li></ol><p>这个问题是因为咱们的 <code>sidebar</code> 的背景色未被替换，所以我们可以在 <code>layout/index</code> 中设置 <code>sidebar</code> 的 <code>backgroundColor</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sidebar</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guide-sidebar&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-container&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; backgroundColor: $store.getters.cssVar.menuBg &#125;&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>主题色替换之后，需要刷新页面才可响应</li></ol><p>这个是因为 <code>getters</code> 中没有监听到 <strong>依赖值的响应变化</strong>，所以我们希望修改依赖值</p><p>在 <code>store/modules/theme</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> variables <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/styles/variables.scss&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    ...<br>    variables<br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置主题色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">setMainColor</span>(<span class="hljs-params">state, newColor</span>) &#123;<br>      ...<br>      state.<span class="hljs-property">variables</span>.<span class="hljs-property">menuBg</span> = newColor<br>      ...<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 <code>getters</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">....<br><br><span class="hljs-keyword">const</span> getters = &#123;<br> ...<br>  <span class="hljs-attr">cssVar</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      ...state.<span class="hljs-property">theme</span>.<span class="hljs-property">variables</span>,<br>      ...<span class="hljs-title function_">generateColors</span>(<span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">MAIN_COLOR</span>))<br>    &#125;<br>  &#125;,<br>  ...<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getters<br><br></code></pre></td></tr></table></figure><p>那么到这里整个自定义主题我们就处理完成了。</p><p>对于 <strong>自定义主题而言</strong>，核心的原理其实就是 <strong>修改<code>scss</code>变量来进行实现主题色变化</strong> </p><p>明确好了原理之后，对后续实现的步骤就具体情况具体分析了。</p><ol><li>对于 <code>element-plus</code>：因为 <code>element-plus</code> 是第三方的包，所以它 <strong>不是完全可控</strong> 的，那么对于这种最简单直白的方案，就是直接拿到它编译后的 <code>css</code> 进行色值替换，利用 <code>style</code> <strong>内部样式表</strong> 优先级高于 <strong>外部样式表</strong> 的特性，来进行主题替换</li><li>对于自定义主题：因为自定义主题是 <strong>完全可控</strong> 的，所以我们实现起来就轻松很多，只需要修改对应的 <code>scss</code>变量即可</li></ol><p>那么在之后大家遇到 <strong>自定义主题</strong> 的处理时，就可以按照这里所梳理的方案进行处理了。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>这一章我们花了大量的篇幅来介绍换肤的原理以及业务场景如何实现换肤，篇幅有点长，就不在此添加其他功能的描述了。</p><p>如下功能我们放到下一章节去实现：</p><ul><li>screenfull</li><li>headerSearch</li><li>tagView</li><li>guide</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2017/05/css-variables.html">CSS变量教程</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>工程化,Vue3,通用功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目实战(四)：Layout架构实现</title>
    <link href="/post/vue3-project-layout.html"/>
    <url>/post/vue3-project-layout.html</url>
    
    <content type="html"><![CDATA[<h1 id="实现-layout-布局"><a href="#实现-layout-布局" class="headerlink" title="实现 layout 布局"></a>实现 layout 布局</h1><p>首先，我们要改造 <code>layout/index.vue</code>，先定义好结构，然后写样式即可。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-wrapper&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 左侧 menu --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">siderbar</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">siderbar</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fixed-header&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 顶部 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">nav-bar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">nav-bar</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 主要内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">app-main</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-main</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结构定义好了，我再定义样式以及样式文件。在 <code>src</code> 下创建 <code>styles</code> 文件夹，主要存放 <code>scss</code> 的一些样式文件，其中就包括通用的 <code>reset.scss</code> 文件，处理基础的 html 元素样式。<code>mixin.scss</code> 编写通用的样式表，定义通用的样式变量 <code>variables.scss</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// styles/index.scss</span><br><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./reset.scss&#x27;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./variables.scss&#x27;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./mixin.scss&#x27;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./sidebar.scss&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="scss-的使用技巧"><a href="#scss-的使用技巧" class="headerlink" title="scss 的使用技巧"></a>scss 的使用技巧</h2><p>这里我们主要看下 <code>mixin.scss</code> 和 <code>variables.scss</code> 的一些技巧和用法：</p><ul><li>mixin.scss</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 清除浮动，在 .vue 文件中使用的时候直接引用即可：@include clearfix; */</span><br><span class="hljs-keyword">@mixin</span> clearfix &#123;<br>  &amp;<span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: table;<br>    <span class="hljs-attribute">clear</span>: both;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 滚动条的设置 */</span><br><span class="hljs-keyword">@mixin</span> scrollBar &#123;<br>  &amp;::-webkit-scrollbar-track-piece &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#d3dce6</span>;<br>  &#125;<br><br>  &amp;::-webkit-scrollbar &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">6px</span>;<br>  &#125;<br><br>  &amp;::-webkit-scrollbar-thumb &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#99a9bf</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@mixin</span> relative &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>variables.scss</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// sidebar</span><br><span class="hljs-variable">$menuText</span>: <span class="hljs-number">#bfcbd9</span>;<br><span class="hljs-variable">$menuActiveText</span>: <span class="hljs-number">#ffffff</span>;<br><span class="hljs-variable">$subMenuActiveText</span>: <span class="hljs-number">#f4f4f5</span>;<br><br><span class="hljs-variable">$menuBg</span>: <span class="hljs-number">#304156</span>;<br><span class="hljs-variable">$menuHover</span>: <span class="hljs-number">#263445</span>;<br><br><span class="hljs-variable">$subMenuBg</span>: <span class="hljs-number">#1f2d3d</span>;<br><span class="hljs-variable">$subMenuHover</span>: <span class="hljs-number">#001528</span>;<br><br><span class="hljs-variable">$sideBarWidth</span>: <span class="hljs-number">210px</span>;<br><span class="hljs-variable">$hideSideBarWidth</span>: <span class="hljs-number">54px</span>;<br><span class="hljs-variable">$sideBarDuration</span>: <span class="hljs-number">0.28s</span>;<br><br><span class="hljs-comment">// https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass</span><br><span class="hljs-comment">// JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入</span><br>:export &#123;<br>  menuText: <span class="hljs-variable">$menuText</span>;<br>  menuActiveText: <span class="hljs-variable">$menuActiveText</span>;<br>  subMenuActiveText: <span class="hljs-variable">$subMenuActiveText</span>;<br>  menuBg: <span class="hljs-variable">$menuBg</span>;<br>  menuHover: <span class="hljs-variable">$menuHover</span>;<br>  subMenuBg: <span class="hljs-variable">$subMenuBg</span>;<br>  subMenuHover: <span class="hljs-variable">$subMenuHover</span>;<br>  sideBarWidth: <span class="hljs-variable">$sideBarWidth</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关于 <code>:export</code> 的使用方式，我们可以查阅一些文档：</p><blockquote><p><a href="https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass">https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass</a></p></blockquote><h2 id="编写-layout-index-vue-样式"><a href="#编写-layout-index-vue-样式" class="headerlink" title="编写 layout/index.vue 样式"></a>编写 <code>layout/index.vue</code> 样式</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss">&lt;style lang=&quot;scss&quot; scoped&gt;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;~@/styles/mixin.scss&#x27;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;~@/styles/variables.scss&#x27;</span>;<br><br><span class="hljs-selector-class">.app-wrapper</span> &#123;<br>  <span class="hljs-keyword">@include</span> clearfix; <span class="hljs-comment">// 使用 mixin 中的样式</span><br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fixed-header</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9</span>;<br>  <span class="hljs-attribute">width</span>: calc(<span class="hljs-number">100%</span> - #&#123;<span class="hljs-variable">$sideBarWidth</span>&#125;);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="给-SideBar-赋予动态的背景色"><a href="#给-SideBar-赋予动态的背景色" class="headerlink" title="给 SideBar 赋予动态的背景色"></a>给 SideBar 赋予动态的背景色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>...<br>  &lt;!-- 左侧 menu --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sidebar</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-container&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; backgroundColor: variables.menuBg &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span></span><br>...<br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// scss 通过 :export 导出了变量</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> variables <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/styles/variables.scss&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="script导入scss文件报错"><a href="#script导入scss文件报错" class="headerlink" title="script导入scss文件报错"></a>script导入scss文件报错</h2><p>在 vue 项目里引用.scss文件，vscode编辑器会有红色波浪线，提示找不到模块</p><p><img src="/img/import-scss-error.png" alt=""></p><p>找到 <code>shims-vue.d.ts</code> 声明文件，添加如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.scss&#x27;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-comment">// 定义的变量，通过 `variables.menuBg` 取值时，就不会报错了</span><br>    <span class="hljs-attr">menuBg</span>: string;<br>  &#125;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> css<br>&#125;<br></code></pre></td></tr></table></figure><p>将来，新增了新的样式变量，我们在 css 下添加即可。</p><h2 id="设置NavBar样式和头像布局"><a href="#设置NavBar样式和头像布局" class="headerlink" title="设置NavBar样式和头像布局"></a>设置NavBar样式和头像布局</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-menu&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-container&quot;</span> <span class="hljs-attr">trigger</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;40&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;&#x27;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&#x27;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-avatar</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Tools</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">dropdown</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-dropdown&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span> 主页 <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>Vue3<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">divided</span>&gt;</span> 退出 <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Tools</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.navbar</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">41</span>, <span class="hljs-number">0.08</span>);</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.right-menu</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">float</span>: right;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">16px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    ::v-deep .right-menu-item &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">18px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#5a5e66</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">vertical-align</span>: text-bottom;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">      &amp;<span class="hljs-selector-class">.hover-effect</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">transition</span>: background <span class="hljs-number">0.3s</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">        &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.025</span>);</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    ::v-deep .avatar-container &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-selector-class">.avatar-wrapper</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-class">.el-avatar</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attr">--el-avatar-background-color</span>: none;</span></span><br><span class="language-css"><span class="language-xml">          <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/img/layout-base.png" alt=""></p><h1 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h1><p>到目前为止，头像是静态的，也没有实现登出的逻辑，现在来实现一下。</p><h2 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h2><p>我们不希望每次调接口时，都去设置 <code>token</code>，那么我们可以在 <code>请求拦截器</code> 中去设置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>      config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = <span class="hljs-string">`Baerer <span class="hljs-subst">$&#123;store.getters.token&#125;</span>`</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="编写-userInfo-接口"><a href="#编写-userInfo-接口" class="headerlink" title="编写 userInfo 接口"></a>编写 userInfo 接口</h2><p>简单实现一下 <code>/userinfo</code> 接口，主要是模拟前后端联调的流程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/userinfo&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 存在 token，可以返回用户信息</span><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;authorization&#x27;</span>]) &#123;<br><br>    res.<span class="hljs-title function_">json</span>(&#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">avatar</span>: <span class="hljs-string">&#x27;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hello_AlexCc&#x27;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">role</span>: <span class="hljs-string">&#x27;super_admin&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;获取用户信息成功&#x27;</span>,<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>    &#125;)<br>  &#125;<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9999</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server site an port 9999 ...&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="调用-userInfo-接口时机"><a href="#调用-userInfo-接口时机" class="headerlink" title="调用 userInfo 接口时机"></a>调用 userInfo 接口时机</h2><p>我们的 <code>userInfo</code> 接口已经编写好了，那么我们在什么时候调用呢？</p><p>很显然，我们需要在 <code>permission.ts</code> 中去调用，当用户登录才有 <code>token</code>，也就是说，我们可以在 <code>token</code> 存在时，并且 <code>to.path</code> 不等于 <code>/login</code> 的时候去调用用户信息接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>    <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 调用用户信息接口</span><br>    <span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/getUserInfo&#x27;</span>)<br><br>    <span class="hljs-title function_">next</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们获取用户信息接口的动作，放在了 <code>module user</code> 的 <code>actions</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module/user.ts</span><br><br><span class="hljs-comment">// state</span><br><span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>  <span class="hljs-attr">token</span>: <span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>) || <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">userinfo</span>: &#123;&#125;<br>&#125;),<br><br><span class="hljs-comment">// actions</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">getUserInfo</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getUserInfo</span>()<br>  context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setUserInfo&#x27;</span>, info)<br>  <span class="hljs-keyword">return</span> info<br>&#125;,<br></code></pre></td></tr></table></figure><p>方便使用 <code>userInfo</code>，我们可以将其放到 <code>getters</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-attr">token</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">token</span>,<br>  <span class="hljs-attr">userInfo</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">userinfo</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后，我们就能在 <code>NavBar</code> 使用获取到的用户信息了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-avatar</span></span><br><span class="hljs-tag">  <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;40&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;$store.getters.userInfo.avatar&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-avatar</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>避免重复调用 userInfo 接口</strong></p><p>我们发现，每次切换路由时，都会触发路由的前置守卫，从而多次触发 <code>getUserInfo</code> 接口，我们把这个问题解决一下</p><ol><li>在 store 中定义 <code>hasUserInfo</code>，用来判断是否已经有用户信息了，如果有用户信息，我们就不要再触发 <code>getUserInfo</code> 接口了</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// getters.ts</span><br><br><span class="hljs-attr">hasUserInfo</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 如果用户信息存在，return true</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state.<span class="hljs-property">user</span>.<span class="hljs-property">userinfo</span>) !== <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>修改 <code>permission.ts</code> 文件，只有 <code>hasUserInfo</code> 为 <code>false</code> 时，我们才调用用户信息接口</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>    <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (!store.<span class="hljs-property">getters</span>.<span class="hljs-property">hasUserInfo</span>) &#123;<br>      <span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/getUserInfo&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-title function_">next</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="登出逻辑"><a href="#登出逻辑" class="headerlink" title="登出逻辑"></a>登出逻辑</h1><p>登出分为两种形式：</p><ul><li>用户主动退出</li><li>用户被动登录（token 过去 | 账号被挤）</li></ul><p>不管以何种形式退出，登出的逻辑都是相同的。</p><ul><li>清理掉用户的缓存数据</li><li>清理掉权限相关的配置</li><li>返回到登录页</li></ul><p>登出的逻辑，我们也可以写在 <code>module user</code> 中去处理。</p><p>主要执行 3 个步骤：</p><ul><li>清空 store token</li><li>清除浏览器本地存储</li><li>跳转到 login 页</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">logout</span>(<span class="hljs-params">context: any</span>) &#123;<br>  context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setToken&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  <span class="hljs-title function_">removeAllItem</span>()<br>  router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="主动退出"><a href="#主动退出" class="headerlink" title="主动退出"></a>主动退出</h2><p>用户点击登录按钮，通过 store dispatch 触发 action 的 logout 即可。</p><h2 id="被动退出"><a href="#被动退出" class="headerlink" title="被动退出"></a>被动退出</h2><p>被动退出大概分为两种：</p><ul><li>token 失效</li><li>账号被挤下去</li></ul><p>那么这两种场景下，在前端对应的处理方案一共也分为两种，共分为 主动处理 、被动处理 两种 ：</p><ul><li>主动处理：主要应对 token 失效</li><li>被动处理：同时应对 token 失效 与 单点登录（账号被挤）</li></ul><h3 id="用户被动退出解决方案之主动处理"><a href="#用户被动退出解决方案之主动处理" class="headerlink" title="用户被动退出解决方案之主动处理"></a>用户被动退出解决方案之主动处理</h3><p>为了保证用户的信息安全，那么对于 token 而言就被制定了很多的安全策略，比如：</p><ul><li>动态 token（可变 token）</li><li>刷新 token</li><li>时效 token<br>…</li></ul><p>我们这里采用 <code>时效 token</code>。</p><p>那么对应到我们代码中的实现方案为：</p><ul><li>在用户登陆时，记录当前 登录时间</li><li>制定一个 失效时长</li><li>在接口调用时，根据 <code>当前时间</code> 对比 <code>登录时间</code> ，看是否超过了 <code>时效时长</code><ul><li>如果未超过，则正常进行后续操作</li><li>如果超过，则进行 退出登录 操作</li></ul></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>创建 <code>utils/auth.js</code> 文件，并写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">TIME_STAMP</span>, <span class="hljs-variable constant_">TOKEN_TIMEOUT_VALUE</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constant&#x27;</span><br><span class="hljs-keyword">import</span> &#123; setItem, getItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间戳</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTimeStamp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">TIME_STAMP</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置时间戳</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">setTimeStamp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">TIME_STAMP</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>())<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否超时</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isCheckTimeout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 当前时间戳</span><br>  <span class="hljs-keyword">var</span> currentTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  <span class="hljs-comment">// 缓存时间戳</span><br>  <span class="hljs-keyword">var</span> timeStamp = <span class="hljs-title function_">getTimeStamp</span>()<br>  <span class="hljs-keyword">return</span> currentTime - timeStamp &gt; <span class="hljs-variable constant_">TOKEN_TIMEOUT_VALUE</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>constant</code> 中声明对应常量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// token 时间戳</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TIME_STAMP</span> = <span class="hljs-string">&#x27;timeStamp&#x27;</span><br><span class="hljs-comment">// 超时时长(毫秒) 两小时</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TOKEN_TIMEOUT_VALUE</span> = <span class="hljs-number">2</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>在用户登录成功之后去设置时间，到 <code>store/user.js</code> 的 <code>login</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; setTimeStamp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><br><span class="hljs-title function_">login</span>(<span class="hljs-params">context, userInfo</span>) &#123;<br>  ...<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    ...<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>        ...<br>        <span class="hljs-comment">// 保存登录时间</span><br>        <span class="hljs-title function_">setTimeStamp</span>()<br>        <span class="hljs-title function_">resolve</span>()<br>      &#125;)<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p>在 <code>utils/request</code> 对应的请求拦截器中进行 <strong>主动介入</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; isCheckTimeout &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><br><span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isCheckTimeout</span>()) &#123;<br>    <span class="hljs-comment">// 登出操作</span><br>    store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/logout&#x27;</span>)<br><br>    <span class="hljs-comment">// 失败的话，会走到 interceptors.response 的 error 方法。</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;token 失效&#x27;</span>))<br>  &#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>那么至此我们就完成了 <strong>主动处理</strong> 对应的业务逻辑。</p><h3 id="用户被动退出解决方案之被动处理"><a href="#用户被动退出解决方案之被动处理" class="headerlink" title="用户被动退出解决方案之被动处理"></a>用户被动退出解决方案之被动处理</h3><p><strong>背景：</strong></p><p>首先我们需要先明确 <strong>被动处理</strong> 需要应对两种业务场景：</p><ol><li><code>token</code> 过期</li><li>单点登录</li></ol><p>然后我们一个一个来去看，首先是 <code>token</code> 过期</p><blockquote><p>我们知道对于 <code>token</code> 而言，本身就是具备时效的，这个是在服务端生成 <code>token</code> 时就已经确定的。</p><p>而此时我们所谓的 <code>token</code> 过期指的就是：</p><p><strong>服务端生成的 <code>token</code> 超过 服务端指定时效</strong> 的过程，就像我们前端项目指定 token 的失效性一样。</p></blockquote><p>而对于 单点登录 而言，指的是： </p><blockquote><p>当用户 A 登录之后，<code>token</code> 过期之前。</p><p> 用户 A 的账号在其他的设备中进行了二次登录，导致第一次登录的 A 账号被 “顶下来” 的过程。</p><p>即：<strong>同一账户仅可以在一个设备中保持在线状态</strong></p></blockquote><p>那么明确好了对应的背景之后，接下来我们来看对应的业务处理场景：</p><p>从背景中我们知道，以上的两种情况，都是在 <strong>服务端进行判断的</strong>，而对于前端而言其实是 <strong>服务端通知前端的一个过程。</strong></p><p>所以说对于其业务处理，将遵循以下逻辑：</p><ol><li>服务端返回数据时，会通过特定的状态码通知前端</li><li>当前端接收到特定状态码时，表示遇到了特定状态：<strong><code>token</code> 时效</strong> 或 <strong>单点登录</strong></li><li>此时进行 <strong>退出登录</strong> 处理</li></ol><p>这里只做了 token 的过期处理，如果需要到 <strong>单点登录</strong> 时，只需要增加一个状态码判断即可。</p><p><strong>服务端超时间逻辑</strong><br>我们来简单实现一下后端的超时逻辑。</p><p>我们通过 <code>app.use</code> 添加了一个中间件，每一次前端触发了接口请求，都会先走这个中间件逻辑。</p><p>服务器启动时，我们把 <code>now</code> 和 <code>current</code> 设置当前时间戳，当有一个接口触发了，会将 <code>current</code> 设置新的时间戳。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// token 超时 2h</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TOKEN_TIMEOUT_VALUE</span> = <span class="hljs-number">2</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span><br><span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br><span class="hljs-keyword">let</span> current = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-comment">// 每次有接口调用，触发中间件，将 current 更新</span><br>  current = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br><br>  <span class="hljs-comment">// 如果是登录逻辑，我们将 now 设置为 current，这样就不会触发超时逻辑</span><br>  <span class="hljs-comment">// 重新登录，继续走此判断，将 now 设置为 current</span><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>    now = current<br>  &#125;<br><br>  <span class="hljs-comment">// 每次中间件都会将 current 更新为当前时间戳，一旦时间戳的差值，大于了 2h，就会触发 超时逻辑</span><br>  <span class="hljs-keyword">if</span> (current - now &gt; <span class="hljs-variable constant_">TOKEN_TIMEOUT_VALUE</span>) &#123;<br>    <span class="hljs-comment">// 超时</span><br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(&#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">401</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;服务端message: token 失效啦&#x27;</span>,<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    <span class="hljs-comment">// 没有超时，将执行权交给下一个路由</span><br>    <span class="hljs-title function_">next</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>那么明确好了业务之后，接下来我们来实现前端对应代码：</strong></p><p>在 <code>utils/request</code> 的响应拦截器中，增加以下逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    ...<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理 token 超时问题</span><br>    <span class="hljs-keyword">if</span> (<br>      error.<span class="hljs-property">response</span> &amp;&amp;<br>      error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span> &amp;&amp;<br>      error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">401</span><br>    ) &#123;<br>      store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/logout&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (error.<span class="hljs-property">response</span> &amp;&amp; error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span> &amp;&amp; error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>) &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>) <span class="hljs-comment">// 提示服务端抛出的错误信息</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>那么至此，我们就已经完成了 <strong>整个用户退出</strong> 方案。</p><h1 id="Sidebar-动态菜单"><a href="#Sidebar-动态菜单" class="headerlink" title="Sidebar 动态菜单"></a>Sidebar 动态菜单</h1><p>接下来我们来处理 动态menu菜单。</p><p>临时的 menu 菜单，创建 <code>layout/Sidebar/SidebarMenu</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;!-- 一级 menu 菜单 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &#123;/* 只允许一个菜单展开 */&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:uniqueOpened</span>=<span class="hljs-string">&quot;true&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">default-active</span>=<span class="hljs-string">&quot;1&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">background-color</span>=<span class="hljs-string">&quot;#545c64&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">text-color</span>=<span class="hljs-string">&quot;#fff&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">active-text-color</span>=<span class="hljs-string">&quot;#ffd04b&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 子集 menu 菜单 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-sub-menu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">location</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>导航一<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-sub-menu</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 具体菜单项 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>导航四<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Location</span>, <span class="hljs-title class_">Setting</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在 <code>layout/Sidebar/index</code> 中导入该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>占位<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-scrollbar</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-menu</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sidebar-menu</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-scrollbar</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">SidebarMenu</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./SidebarMenu&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>那么至此我们生成了一个临时的 <code>menu</code> 菜单，从这个临时的 <code>menu</code> 菜单出可以看到，<code>el-menu</code> 其实分成了三个部分：</p><ol><li><code>el-menu</code>：整个 <code>menu</code> 菜单</li><li><code>el-submenu</code>：子集 <code>menu</code> 菜单</li><li><code>el-menu-item</code>：具体菜单项</li></ol><p>那么明确好了这些内容之后，接下来我们就可以来去分析一下 <strong>动态 <code>menu</code> 菜单如何生成了</strong></p><h2 id="动态menu菜单处理方案解析"><a href="#动态menu菜单处理方案解析" class="headerlink" title="动态menu菜单处理方案解析"></a>动态menu菜单处理方案解析</h2><p><strong>动态<code>menu</code>菜单</strong> 其实主要是和 <strong>动态路由表</strong>  配合来去实现 <strong>用户权限</strong> 的。</p><p>但是 <strong>用户权限处理</strong> 目前还未涉及到，因为咱们想要处理 <strong>用户权限</strong> 还需要先去处理很多的业务场景，所以暂时先只处理 <strong>动态<code>menu</code>菜单</strong> 。</p><p>所谓 <strong>动态<code>menu</code>菜单</strong> 指的是：</p><blockquote><p>根据路由表的配置，自动生成对应的 <code>menu</code> 菜单。</p><p>当路由表发生变化时，<code>menu</code> 菜单自动发生变化</p></blockquote><p>那么明确了 <strong>动态<code>menu</code>菜单</strong> 的含义之后，接下来咱们就需要来明确 <strong>动态<code>menu</code>菜单</strong> 的实现方案：</p><ol><li>定义 <strong>路由表</strong> 对应 <strong><code>menu</code> 菜单规则</strong></li><li>根据规则制定 <strong>路由表</strong></li><li>根据规则，依据 <strong>路由表</strong> ，生成 <strong><code>menu</code> 菜单</strong></li></ol><p>那么根据我们的实现方案可以发现，实现 <strong>动态<code>menu</code>菜单</strong> 最核心的关键点其实就在步骤一，也就是 </p><blockquote><p>定义 <strong>路由表</strong> 对应 <strong><code>menu</code> 菜单规则</strong></p></blockquote><p>那么下面我们就来看一下，这个规则如何制定：</p><ol><li>对于单个路由规则而言（循环）：<ol><li>如果存在 <code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code> ：则显示在 <code>menu</code> 菜单中，其中 <code>title</code> 为显示的内容，<code>icon</code> 为显示的图标<ol><li>如果存在 <code>children</code> ：则以 <code>el-sub-menu（子菜单）</code> 展示</li><li>否则：则以 <code>el-menu-item（菜单项）</code> 展示</li></ol></li><li>否则：不显示在 <code>menu</code> 菜单中</li></ol></li></ol><p>那么明确好了对应的规则之后，接下来我们就可以来去看一下如何进行实现啦！</p><h2 id="生成项目页面组件"><a href="#生成项目页面组件" class="headerlink" title="生成项目页面组件"></a>生成项目页面组件</h2><p>明确了对应的方案之后，那么下面咱们就来实现对应的代码逻辑。</p><p>根据我们的分析，想要完成动态的 <code>menu</code>，那么我们需要按照以下的步骤来去实现：</p><ol><li>创建页面组件</li><li>生成路由表</li><li>解析路由表</li><li>生成 <code>menu</code> 菜单</li></ol><p>那么明确好了步骤之后，接下来我们就先来实现第一步</p><p><strong>创建页面组件</strong></p><p>在 <code>views</code> 文件夹下，创建如下页面：</p><ol><li>创建文章：<code>article-create</code></li><li>文章详情：<code>article-detail</code></li><li>文章排名：<code>article-ranking</code></li><li>错误页面：<code>error-page</code><ol><li><code>404</code></li><li><code>401</code></li></ol></li><li>导入：<code>import</code></li><li>权限列表：<code>permission-list</code></li><li>个人中心：<code>profile</code></li><li>角色列表：<code>role-list</code></li><li>用户信息：<code>user-info</code></li><li>用户管理：<code>user-manage</code></li></ol><h2 id="创建结构路由表"><a href="#创建结构路由表" class="headerlink" title="创建结构路由表"></a>创建结构路由表</h2><p>想要实现结构路由表，那么我们需要先知道最终我们要实现的结构是什么样子的，大家来看下面的截图：</p><img src="/img/menu.png" /><p>这是我们最终要实现的 <code>menu</code> 截图。</p><p>根据此截图，我们可以知道两点内容：</p><ol><li><p>我们创建的页面并没有全部进行展示</p><ol><li>不显示页面表示 <strong>不满足</strong> 该条件 <code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code></li></ol></li><li><p><code>menu</code> 菜单将具备父子级的结构</p><ol><li>按照此结构规划数据，则数据应为<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;个人中心&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用户&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;员工管理&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;角色列表&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;权限列表&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;文章&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;文章排名&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;创建文章&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><p>又因为将来我们需要进行 <strong>用户权限处理</strong>，所以此时我们需要先对路由表进行一个划分：</p><ol><li>私有路由表 <code>privateRoutes</code> ：权限路由</li><li>公有路由表 <code>publicRoutes</code>：无权限路由</li></ol><p>根据以上理论，生成以下路由表结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 私有路由表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> privateRoutes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">component</span>: layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user/manage&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;user&#x27;</span>,<br>      <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;personnel&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/manage&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/user-manage/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;userManage&#x27;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;personnel-manage&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/role&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/role-list/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;roleList&#x27;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;role&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/permission&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/permission-list/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;permissionList&#x27;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;permission&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/info/:id&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;userInfo&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/user-info/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;userInfo&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/import&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;import&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/import/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;excelImport&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article&#x27;</span>,<br>    <span class="hljs-attr">component</span>: layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/article/ranking&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;article&#x27;</span>,<br>      <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;article&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article/ranking&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/article-ranking/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;articleRanking&#x27;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;article-ranking&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article/:id&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/article-detail/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;articleDetail&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article/create&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/article-create/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;articleCreate&#x27;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;article-create&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article/editor/:id&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/article-create/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;articleEditor&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>]<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 公开路由表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> publicRoutes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/login/index&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-comment">// 注意：带有路径“/”的记录中的组件“默认”是一个不返回 Promise 的函数</span><br>    <span class="hljs-attr">component</span>: layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/profile&#x27;</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/profile&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;profile&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/profile/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;profile&#x27;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;el-icon-user&#x27;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;404&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/error-page/404&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/401&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;401&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/error-page/401&#x27;</span>)<br>      &#125;<br>    ]<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  <span class="hljs-attr">routes</span>: [...publicRoutes, ...privateRoutes]<br>&#125;)<br></code></pre></td></tr></table></figure><p>最后不要忘记在 <code>layout/appMain</code> 下设置路由出口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-main&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="解析路由表，获取结构化数据"><a href="#解析路由表，获取结构化数据" class="headerlink" title="解析路由表，获取结构化数据"></a>解析路由表，获取结构化数据</h2><p>想要获取路由表数据，那么有两种方式：</p><ol><li><p><a href="https://next.router.vuejs.org/zh/api/#routes">router.options.routes</a>：初始路由列表（<a href="https://next.router.vuejs.org/zh/api/#addroute">新增的路由</a> 无法获取到）</p></li><li><p><a href="https://next.router.vuejs.org/zh/api/#getroutes">router.getRoutes()</a>：获取所有 <a href="https://next.router.vuejs.org/zh/api/#routerecord">路由记录</a> 的完整列表</p></li></ol><p>所以，我们此时使用 <code>router.getRoutes()</code> 方法获取完整的路由列表</p><p>在 <code>layout/components/Sidebar/SidebarMenu</code> 下写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-title function_">getRoutes</span>())<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>从返回的数据来看，它与我们想要的数据结构相去甚远。</p><p>出现这个问题的原因，是因为它返回的是一个 <strong>完整的路由表</strong></p><p>这个路由表距离我们想要的存在两个问题：</p><ol><li>存在重复的路由数据</li><li>不满足该条件 <code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code> 的数据不应该存在</li></ol><p>那么接下来我们就应该来处理这两个问题</p><p>创建 <code>utils/route.ts</code> 文件，创建两个方法分别处理对应的两个问题：</p><ol><li><code>filterRouters</code></li><li><code>generateMenus</code></li></ol><p>写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回所有子路由</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getChildrenRoutes</span> = routes =&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = []<br>  routes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (route.<span class="hljs-property">children</span> &amp;&amp; route.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      result.<span class="hljs-title function_">push</span>(...route.<span class="hljs-property">children</span>)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理脱离层级的路由：某个一级路由为其他子路由，则剔除该一级路由，保留路由层级</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; routes router.getRoutes()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">filterRouters</span> = routes =&gt; &#123;<br>  <span class="hljs-keyword">const</span> childrenRoutes = <span class="hljs-title function_">getChildrenRoutes</span>(routes)<br>  <span class="hljs-keyword">return</span> routes.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> !childrenRoutes.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">childrenRoute</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> childrenRoute.<span class="hljs-property">path</span> === route.<span class="hljs-property">path</span><br>    &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断数据是否为空值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isNull</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!data) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data) === <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data) === <span class="hljs-string">&#x27;[]&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据 routes 数据，返回对应 menu 规则数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateMenus</span>(<span class="hljs-params">routes, basePath = <span class="hljs-string">&#x27;&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> result = []<br>  <span class="hljs-comment">// 遍历路由表</span><br>  routes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 不存在 children &amp;&amp; 不存在 meta 直接 return</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isNull</span>(item.<span class="hljs-property">meta</span>) &amp;&amp; <span class="hljs-title function_">isNull</span>(item.<span class="hljs-property">children</span>)) <span class="hljs-keyword">return</span><br>    <span class="hljs-comment">// 存在 children 不存在 meta，进入迭代</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isNull</span>(item.<span class="hljs-property">meta</span>) &amp;&amp; !<span class="hljs-title function_">isNull</span>(item.<span class="hljs-property">children</span>)) &#123;<br>      result.<span class="hljs-title function_">push</span>(...<span class="hljs-title function_">generateMenus</span>(item.<span class="hljs-property">children</span>))<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 合并 path 作为跳转路径</span><br>    <span class="hljs-keyword">const</span> routePath = path.<span class="hljs-title function_">resolve</span>(basePath, item.<span class="hljs-property">path</span>)<br>    <span class="hljs-comment">// 路由分离之后，存在同名父路由的情况，需要单独处理</span><br>    <span class="hljs-keyword">let</span> route = result.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">path</span> === routePath)<br>    <span class="hljs-keyword">if</span> (!route) &#123;<br>      route = &#123;<br>        ...item,<br>        <span class="hljs-attr">path</span>: routePath,<br>        <span class="hljs-attr">children</span>: []<br>      &#125;<br><br>      <span class="hljs-comment">// icon 与 title 必须全部存在</span><br>      <span class="hljs-keyword">if</span> (route.<span class="hljs-property">meta</span>.<span class="hljs-property">icon</span> &amp;&amp; route.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>) &#123;<br>        <span class="hljs-comment">// meta 存在生成 route 对象，放入 arr</span><br>        result.<span class="hljs-title function_">push</span>(route)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 存在 children 进入迭代到children</span><br>    <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span>) &#123;<br>      route.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(...<span class="hljs-title function_">generateMenus</span>(item.<span class="hljs-property">children</span>, route.<span class="hljs-property">path</span>))<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 <code>SidebarMenu</code> 中调用该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; filterRouters, generateMenus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/route&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><span class="hljs-keyword">const</span> routes = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> filterRoutes = <span class="hljs-title function_">filterRouters</span>(router.<span class="hljs-title function_">getRoutes</span>())<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">generateMenus</span>(filterRoutes)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(routes.<span class="hljs-property">value</span>))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>得到该数据结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/profile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;profile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;profile&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;el-icon-user&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;redirect&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/manage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;personnel&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;props&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">false</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/manage&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;userManage&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;userManage&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;personnel-manage&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/role&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;userRole&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;roleList&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;role&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/permission&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;userPermission&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;permissionList&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;permission&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;redirect&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article/ranking&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;article&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;article&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;props&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">false</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article/ranking&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;articleRanking&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;articleRanking&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;article-ranking&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/article/create&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;articleCreate&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;meta&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;articleCreate&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;article-create&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h2 id="生成动态-menu-菜单"><a href="#生成动态-menu-菜单" class="headerlink" title="生成动态 menu 菜单"></a>生成动态 menu 菜单</h2><p>有了数据结构之后，最后的步骤就水到渠成了</p><p>整个 <code>menu</code> 菜单，我们将分成三个组件来进行处理</p><ol><li><code>SidebarMenu</code>：处理数据，作为最顶层 <code>menu</code> 载体</li><li><code>SidebarItem</code>：根据数据处理 <strong>当前项为 <code>el-submenu</code> || <code>el-menu-item</code></strong> </li><li><code>MenuItem</code>：处理 <code>el-menu-item</code> 样式</li></ol><p>那么下面我们一个个来处理</p><p>首先是 <code>SidebarMenu</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;!-- 一级 menu 菜单 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">...</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in routes&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.path&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:route</span>=<span class="hljs-string">&quot;item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sidebar-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span></span><br>&lt;/template&gt;<br><br></code></pre></td></tr></table></figure><p>创建 <code>SidebarItem</code> 组件，用来根据数据处理 <strong>当前项为 <code>el-sub-menu</code> || <code>el-menu-item</code></strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;!-- 支持渲染多级 menu 菜单 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-sub-menu</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;route.children.length &gt; 0&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;route.path&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;route.meta.title&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;route.meta.icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 循环渲染 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in route.children&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.path&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:route</span>=<span class="hljs-string">&quot;item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sidebar-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-sub-menu</span>&gt;</span></span><br>  &lt;!-- 渲染 item 项 --&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;route.path&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;route.meta.title&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;route.meta.icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MenuItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MenuItem&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 定义 props</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">route</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>创建 <code>MenuItem</code> 用来处理 <code>el-menu-item</code> 样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;icon.includes(&#x27;el-icon&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub-el-icon&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">title</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">icon</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>至此，整个的 <code>menu</code> 菜单结构就已经完成了！</p><h2 id="修复最后残余问题"><a href="#修复最后残余问题" class="headerlink" title="修复最后残余问题"></a>修复最后残余问题</h2><p>目前 <code>menu</code> 菜单存在三个问题</p><ol><li>样式问题</li><li>路由跳转问题</li><li>默认激活项</li></ol><p><strong>样式问题：</strong></p><p>首先处理样式，因为后面我们需要处理 <strong>主题替换</strong> ，所以此处我们不能把样式写死。因为我们的样式变量都放在 <code>variables.scss</code> 文件中，并通过 <code>:export</code> 导出了变量以供 js 导入，每次使用都需要导入，比较麻烦，我们可以将其放在 <code>store getters</code> 中，以便 <strong>快捷访问</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> variables <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/styles/variables.scss&#x27;</span><br><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-attr">cssVar</span>: <span class="hljs-function">() =&gt;</span> variables<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getters<br></code></pre></td></tr></table></figure><p>在 <code>SidebarMenu</code> 中写入如下样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:background-color</span>=<span class="hljs-string">&quot;$store.getters.cssVar.menuBg&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:text-color</span>=<span class="hljs-string">&quot;$store.getters.cssVar.menuText&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:active-text-color</span>=<span class="hljs-string">&quot;$store.getters.cssVar.menuActiveText&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:unique-opened</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">&gt;</span><br></code></pre></td></tr></table></figure><p><strong>路由跳转问题：</strong></p><p>为 <code>el-menu</code> 指定 <code>router</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span><br><span class="hljs-tag">  <span class="hljs-attr">...</span></span><br><span class="hljs-tag">  <span class="hljs-attr">router</span></span><br><span class="hljs-tag">&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>添加 router 属性</p><p>表示是否启用 vue-router 模式。 启用该模式会在激活导航时以 index 作为 path 进行路由跳转 使用 default-active 来设置加载时的激活项。</p></blockquote><p><strong>默认激活项：</strong></p><p>根据当前 <code>url</code> 进行判断即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;el-menu<br>  :<span class="hljs-keyword">default</span>-active=<span class="hljs-string">&quot;activeMenu&quot;</span><br>  ...<br>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 计算高亮 menu 的方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> activeMenu = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> &#123; path &#125; = route</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> path</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>至此整个 <strong>动态<code>menu</code>完成</strong></p><h2 id="左侧菜单伸缩功能实现"><a href="#左侧菜单伸缩功能实现" class="headerlink" title="左侧菜单伸缩功能实现"></a>左侧菜单伸缩功能实现</h2><p>下面我们来实现一个标准化功能 <strong>左侧菜单伸缩</strong> ，对于这个功能核心的点在于动画处理</p><p>样式的改变总是由数据进行驱动，所以首先我们去创建对应的数据</p><p>创建 <code>store/app</code> 模块，写入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">sidebarOpened</span>: <span class="hljs-literal">true</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">triggerSidebarOpened</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">sidebarOpened</span> = !state.<span class="hljs-property">sidebarOpened</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在 <code>store/index</code> 中进行导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> app <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/app&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  getters,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    ...<br>    app<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在 <code>store/getters</code> 中创建快捷访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">sidebarOpened</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">app</span>.<span class="hljs-property">sidebarOpened</span><br></code></pre></td></tr></table></figure><p>创建 <code>components/hamburger</code> 组件，用来控制数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger-container&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleClick&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;app/triggerSidebarOpened&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> icon = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-property">getters</span>.<span class="hljs-property">sidebarOpened</span> ? <span class="hljs-string">&#x27;hamburger-opened&#x27;</span> : <span class="hljs-string">&#x27;hamburger-closed&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.hamburger-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">16px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.hamburger</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在 <code>navbar</code> 中使用该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hamburger</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger-container&quot;</span> /&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Hamburger</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hamburger&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.navbar</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  ...</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.hamburger-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">46px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">float</span>: left;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">    // hover 动画</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">transition</span>: background <span class="hljs-number">0.5s</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"> ...</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>在 <code>SidebarMenu</code> 中，控制 <code>el-menu</code> 的 <a href="https://element-plus.org/#/zh-CN/component/menu">collapse</a> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;el-menu<br>    :collapse=<span class="hljs-string">&quot;!$store.getters.sidebarOpened&quot;</span><br>    ...<br></code></pre></td></tr></table></figure><p>在 <code>layout/index</code> 中指定 <strong>整个侧边栏的宽度和缩放动画</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div<br>    <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;app-wrapper&quot;</span><br>    :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[$store.getters.sidebarOpened ? &#x27;openSidebar&#x27; : &#x27;hideSidebar&#x27;]&quot;</span><br>  &gt;<br>  ...<br></code></pre></td></tr></table></figure><p>在 <code>layout/index</code> 中 处理 <code>navbar</code> 的宽度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span> scoped&gt;<br>...<br><br>.<span class="hljs-property">fixed</span>-header &#123;<br>  <span class="hljs-attr">position</span>: fixed;<br>  <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attr">right</span>: <span class="hljs-number">0</span>;<br>  z-<span class="hljs-attr">index</span>: <span class="hljs-number">9</span>;<br>  <span class="hljs-attr">width</span>: <span class="hljs-title function_">calc</span>(<span class="hljs-number">100</span>% - #&#123;$sideBarWidth&#125;);<br>  <span class="hljs-attr">transition</span>: width <span class="hljs-number">0.</span>28s;<br>&#125;<br><br>.<span class="hljs-property">hideSidebar</span> .<span class="hljs-property">fixed</span>-header &#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-title function_">calc</span>(<span class="hljs-number">100</span>% - #&#123;$hideSideBarWidth&#125;);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>在 <code>styles/variables.scss</code> 中指定 <code>hideSideBarWidth</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$hideSideBarWidth</span>: <span class="hljs-number">54px</span>;<br></code></pre></td></tr></table></figure><h2 id="SidebarHeader-处理"><a href="#SidebarHeader-处理" class="headerlink" title="SidebarHeader 处理"></a>SidebarHeader 处理</h2><p>整个左侧的 <code>menu</code> 菜单，到现在咱们还剩下最后一个 <code>header</code> 没有进行处理</p><p>在 <code>sidebar/index</code> 中写入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo-container&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-avatar</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;44&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://m.imooc.com/static/wap/static/common/img/logo-small@2x.png&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo-title&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$store.getters.sidebarOpened&quot;</span>&gt;</span></span><br><span class="language-xml">       imooc-admin</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.logo-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">22px</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.logo-title</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">white-space</span>: nowrap;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>创建 <code>styles/element.scss</code> 文件，统一处理 <code>el-avatar</code> 的背景问题</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.el-avatar</span> &#123;<br>  <span class="hljs-attr">--el-avatar-background-color</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>styles/index.scss</code> 中导入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">...<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./element.scss&#x27;</span>;<br></code></pre></td></tr></table></figure><p>统一处理下动画时长的问题，在 <code>styles/variables.scss</code> 中，加入以下变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">$sideBarDuration: <span class="hljs-number">0.28s</span>;<br></code></pre></td></tr></table></figure><p>为 <code>styles/sidebar.scss</code> 修改时长</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.main-container</span> &#123;<br>  <span class="hljs-attribute">transition</span>: margin-left #&#123;<span class="hljs-variable">$sideBarDuration</span>&#125;;<br> ...<br>&#125;<br><br><span class="hljs-selector-class">.sidebar-container</span> &#123;<br>  <span class="hljs-attribute">transition</span>: width #&#123;<span class="hljs-variable">$sideBarDuration</span>&#125;;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>为 <code>layout/index</code> 修改样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.fixed-header</span> &#123;<br>  ...<br>  <span class="hljs-attribute">transition</span>: width #&#123;<span class="hljs-variable">$sideBarDuration</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Vue3-2：组件状态驱动的动态-CSS-值"><a href="#Vue3-2：组件状态驱动的动态-CSS-值" class="headerlink" title="Vue3.2：组件状态驱动的动态 CSS 值"></a>Vue3.2：组件状态驱动的动态 CSS 值</h1><p>在 <a href="https://blog.vuejs.org/posts/vue-3.2.html">vue 3.2</a> 最新更新中，除了之前我们介绍的 <strong>响应式变化</strong> 之外，还有另外一个很重要的更新，那就是 <strong>组件状态驱动的动态 <code>CSS</code> 值</strong> ，对应的文档也已经公布，大家可以 <a href="https://v3.vuejs.org/api/sfc-style.html#state-driven-dynamic-css">点击这里</a> 查看</p><p>那么下面我们就使用下最新的特性，来为 <code>logo-container</code> 指定下高度：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br> ...<br> &lt;el-avatar<br> :size=<span class="hljs-string">&quot;logoHeight&quot;</span><br> ...<br><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> logoHeight = <span class="hljs-number">44</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.logo-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">v-bind</span>(logoHeight) + <span class="hljs-string">&#x27;px&#x27;</span>;</span></span><br><span class="language-css"><span class="language-xml">...</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h1 id="动态面包屑方案分析"><a href="#动态面包屑方案分析" class="headerlink" title="动态面包屑方案分析"></a>动态面包屑方案分析</h1><p>面包屑导航分为：</p><ol><li>静态面包屑</li><li>动态面包屑</li></ol><p><strong>静态面包屑：</strong></p><p>指的是：<strong>在每个页面中写死对应的面包屑菜单</strong>，缺点也很明显：</p><ol><li>每个页面都得写一遍</li><li>页面路径结构变化了，得手动更改</li></ol><p>简单来说就是 <strong>不好维护，不好扩展</strong> 。</p><p><strong>动态面包屑：</strong></p><p>根据当前的 <code>url</code> 自动生成面包屑导航菜单</p><p>无论之后路径发生了什么变化，<strong>动态面包屑</strong> 都会正确的进行计算</p><p>那么在后面的实现过程中，我们将会分成三大步来实现</p><ol><li>创建、渲染基本的面包屑组件</li><li>计算面包屑结构数据</li><li>根据数据渲染动态面包屑内容</li></ol><h2 id="渲染基本的面包屑组件"><a href="#渲染基本的面包屑组件" class="headerlink" title="渲染基本的面包屑组件"></a>渲染基本的面包屑组件</h2><p>完成第一步，先去创建并渲染出基本的 <a href="https://element-plus.org/#/zh-CN/component/breadcrumb">面包屑</a> 组件</p><p>创建 <code>components/Breadcrumb/index</code>，并写入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-breadcrumb</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-breadcrumb-item</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123; path: &#x27;/&#x27; &#125;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">el-breadcrumb-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-breadcrumb-item</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>活动管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-breadcrumb-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-breadcrumb-item</span>&gt;</span>活动列表<span class="hljs-tag">&lt;/<span class="hljs-name">el-breadcrumb-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 面包屑的最后一项 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-breadcrumb-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;no-redirect&quot;</span>&gt;</span>活动详情<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-breadcrumb-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-breadcrumb</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.breadcrumb</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">8px</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  ::v-deep .no-redirect &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#97a8be</span>;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">cursor</span>: text;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>在 <code>layout/components/Navbar</code> 组件下导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hamburger</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger-container&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">breadcrumb</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb-container&quot;</span> /&gt;</span></span><br><span class="language-xml">...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br>...<br><br>&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span> scoped&gt;<br>.<span class="hljs-property">navbar</span> &#123;<br> ...<br><br>  .<span class="hljs-property">breadcrumb</span>-container &#123;<br>    <span class="hljs-attr">float</span>: left;<br>  &#125;<br>   ...<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h2 id="动态计算面包屑结构数据"><a href="#动态计算面包屑结构数据" class="headerlink" title="动态计算面包屑结构数据"></a>动态计算面包屑结构数据</h2><p>现在我们是完成了一个静态的 面包屑，接下来咱们就需要依托这个静态的菜单来完成动态的。</p><p>对于现在的静态面包屑来说，他分成了两个组件：</p><ol><li><code>el-breadcrumb</code>：包裹性质的容器</li><li><code>el-breadcrumb-item</code>：每个单独项</li></ol><p>如果我们想要完成动态的，那么就需要 *<em>依据动态数据，渲染 <code>el-breadcrumb-item</code> *</em></p><p>所以说接下来我们需要做的事情就很简单了</p><ol><li>动态数据</li><li>渲染 <code>el-breadcrumb-item</code></li></ol><p>咱们先来看 <strong>动态数据如何制作</strong></p><p>我们希望可以制作出一个 <strong>数组</strong>，数组中每个 <code>item</code> 都表示一个 <strong>路由信息</strong>：</p><p>创建一个方法，用来生成数组数据，在这里我们要使用到 <a href="https://next.router.vuejs.org/zh/api/#matched">route.match</a> 属性来：<strong>获取与给定路由地址匹配的<a href="https://next.router.vuejs.org/zh/api/#routerecord">标准化的路由记录</a>数组</strong></p><p>如何理解上面这句话呢？其实我们将 <code>route.matched</code> 打印出来就可以发现，你每次切换菜单（或者说更换了路由），打印出来的就是当前路由的路由表（包含父级、子集的路由信息）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref, reactive, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRoute, <span class="hljs-title class_">RouteRecordRaw</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> breadcrumbData = ref&lt;<span class="hljs-title class_">RouteRecordRaw</span>[]&gt;([]) <span class="hljs-comment">// 存放计算出的面包屑数据</span><br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getBreadcrumbData</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">matched</span>)<br><br>  <span class="hljs-comment">// 只有存在 meta 并且 meta.title 的路由，我们才会显示到面包屑中</span><br>  <span class="hljs-comment">// 就像 menu 菜单一样，类似 404 login 的我们不要显示</span><br>  breadcrumbData.<span class="hljs-property">value</span> = route.<span class="hljs-property">matched</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> r.<span class="hljs-property">meta</span> &amp;&amp; r.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>)<br>&#125;<br><br><span class="hljs-comment">// 监听路由变化时触发</span><br><span class="hljs-title function_">watch</span>(<br>  route,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">getBreadcrumbData</span>()<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>  &#125;<br>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="依据动态数据，渲染面包屑"><a href="#依据动态数据，渲染面包屑" class="headerlink" title="依据动态数据，渲染面包屑"></a>依据动态数据，渲染面包屑</h2><p>有了数据之后，根据数据来去渲染面包屑就比较简单了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt;<br>    &lt;el-breadcrumb-item<br>      v-for=&quot;(item, index) in breadcrumbData&quot;<br>      :key=&quot;item.path&quot;<br>    &gt;<br>      &lt;!-- 不可点击项 --&gt;<br>      &lt;span v-if=&quot;index === breadcrumbData.length - 1&quot; class=&quot;no-redirect&quot;&gt;&#123;&#123;<br>        item.meta.title<br>      &#125;&#125;&lt;/span&gt;<br>      &lt;!-- 可点击项 --&gt;<br>      &lt;a v-else class=&quot;redirect&quot; @click.prevent=&quot;onLinkClick(item)&quot;&gt;&#123;&#123;<br>        item.meta.title<br>      &#125;&#125;&lt;/a&gt;<br>    &lt;/el-breadcrumb-item&gt;<br>  &lt;/el-breadcrumb&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123; ref, watch &#125; from &#x27;vue&#x27;<br>import &#123; useRoute, useRouter, RouteRecordRaw &#125; from &#x27;vue-router&#x27;<br>import &#123; useStore &#125; from &#x27;vuex&#x27;<br><br>const breadcrumbData = ref&lt;RouteRecordRaw[]&gt;([]) // 存放计算出的面包屑数据<br><br>const store = useStore()<br>const route = useRoute()<br>const router = useRouter()<br>const getBreadcrumbData = () =&gt; &#123;<br>  console.log(route.matched)<br><br>  // 只有存在 meta 并且 meta.title 的路由，我们才会显示到面包屑中<br>  // 就像 menu 菜单一样，类似 404 login 的我们不要显示<br>  breadcrumbData.value = route.matched.filter(r =&gt; r.meta &amp;&amp; r.meta.title)<br>&#125;<br><br>watch(<br>  route,<br>  () =&gt; &#123;<br>    getBreadcrumbData()<br>  &#125;,<br>  &#123;<br>    immediate: true<br>  &#125;<br>)<br><br>// 跳转路由<br>const onLinkClick = (item: RouteRecordRaw) =&gt; &#123;<br>  router.push(item.path)<br>&#125;<br><br>// 将来需要进行主题替换，所以这里获取下动态样式<br>const linkHoverColor = ref(store.getters.cssVars.menuBg)<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.breadcrumb &#123;<br> ...<br><br>  .redirect &#123;<br>    color: #666;<br>    font-weight: 600;<br>  &#125;<br><br>  .redirect:hover &#123;<br>    color: v-bind(linkHoverColor); // 应对主题切换<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h2 id="面包屑动画"><a href="#面包屑动画" class="headerlink" title="面包屑动画"></a>面包屑动画</h2><p>vue3对 <a href="https://v3.cn.vuejs.org/guide/transitions-overview.html#%E5%9F%BA%E4%BA%8E-class-%E7%9A%84%E5%8A%A8%E7%94%BB%E5%92%8C%E8%BF%87%E6%B8%A1">动画</a> 进行了一些修改（<a href="https://v3.cn.vuejs.org/guide/migration/transition.html#%E6%A6%82%E8%A7%88">vue 动画迁移文档</a>）</p><p>主要的修改其实只有两个：</p><ol><li>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code></li><li>过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code></li></ol><p>那么依据修改之后的动画，我们来为面包屑增加一些动画样式：</p><ol><li>在 <code>Breadcrumb/index</code> 中增加 <code>transition-group</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-breadcrumb</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class="language-xml">      ...</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-breadcrumb</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>新建 <code>styles/transition</code> 样式文件</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.breadcrumb-enter-active</span>,<br><span class="hljs-selector-class">.breadcrumb-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.breadcrumb-enter-from</span>,<br><span class="hljs-selector-class">.breadcrumb-leave-active</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transform</span>: translateX(<span class="hljs-number">20px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.breadcrumb-leave-active</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在 <code>styles/index</code> 中导入</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;./transition.scss&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里我们的 layout 整体架构就已经做完了，我们来看看效果吧。</p><p><img src="/img/layout-result.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>工程化,Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目实战(三)：登录/请求模块/鉴权</title>
    <link href="/post/vue3-project-generalLogin.html"/>
    <url>/post/vue3-project-generalLogin.html</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境变量-封装-axios"><a href="#配置环境变量-封装-axios" class="headerlink" title="配置环境变量 / 封装 axios"></a>配置环境变量 / 封装 axios</h1><p>封装的 axios 模块，至少具备一种能力，<strong>根据当前环境的不同，设定不同的 baseUrl</strong></p><p><code>@vue/cli</code> 模式</p><blockquote><p>官网：<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F</a></p></blockquote><p>请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中。这是为了避免意外公开机器上可能具有相同名称的私钥。</p><p>除了 VUE_APP_* 变量之外，在你的应用代码中始终可用的还有两个特殊的变量：</p><ul><li>NODE_ENV - 会是 “development”、”production” 或 “test” 中的一个。具体的值取决于应用运行的模式。</li><li>BASE_URL - 会和 vue.config.js 中的 publicPath 选项相符，即你的应用会部署到的基础路径。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .env.development</span><br><br>username=chenghaolun <span class="hljs-comment">// 不会暴露出来</span><br><br><span class="hljs-variable constant_">VUE_APP_BASE_API</span>=<span class="hljs-regexp">/api /</span><span class="hljs-regexp">/ 暴露出来，可以通过 process.env 获取</span><br></code></pre></td></tr></table></figure><p>所有解析出来的环境变量都可以在 public/index.html 中以 HTML 插值中介绍的方式使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;title&gt;网站标题 &lt;%= <span class="hljs-variable constant_">VUE_APP_BASE_API</span> %&gt;&lt;/title&gt;<br></code></pre></td></tr></table></figure><p>我们可以打印 <code>process.env</code> 看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">BASE_URL</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">VUE_APP_BASE_API</span>: <span class="hljs-string">&quot;/api&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="根据环境变量切换-baseUrl"><a href="#根据环境变量切换-baseUrl" class="headerlink" title="根据环境变量切换 baseUrl"></a>根据环境变量切换 baseUrl</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><h1 id="封装接口请求模块"><a href="#封装接口请求模块" class="headerlink" title="封装接口请求模块"></a>封装接口请求模块</h1><p>在 <code>src</code> 下创建 <code>api</code> 文件夹，并创建 <code>sys.ts</code> 文件，用于处理系统的一些接口请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = data =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/sys/login&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    data<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="封装登录请求动作"><a href="#封装登录请求动作" class="headerlink" title="封装登录请求动作"></a>封装登录请求动作</h1><p>我们不希望在点击登录按钮时，就立马调用登录接口，而是将其封装到 <code>vuex</code> 中，当然也可以使用 <code>pinia</code>。</p><p>在 store 下创建 modules 文件夹，并创建 <code>user.ts</code> 模块，用于处理所有的 <code>用户相关</code> 的内容（token获取、用户信息获取、退出登录…）</p><p><strong>注意</strong></p><p>当我们创建好了 store 时，在 vue template 里面使用 <code>$store.state.globalName</code> 可能会爆红，原因是没有声明 <code>$store</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/vuex.d.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Store</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;@vue/runtime-core&#x27;</span> &#123;<br>  <span class="hljs-comment">// 声明自己的 store state</span><br>  interface <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-attr">globalName</span>: string<br>  &#125;<br><br>  <span class="hljs-comment">// 为 `this.$store` 提供类型声明</span><br>  interface <span class="hljs-title class_">ComponentCustomProperties</span> &#123;<br>    <span class="hljs-attr">$store</span>: <span class="hljs-title class_">Store</span>&lt;<span class="hljs-title class_">State</span>&gt;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>创建 user.ts</strong> 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// store/index.js</span><br><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">globalName</span>: <span class="hljs-string">&#x27;Hello_AlexCc&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    user<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>创建 <code>modules</code> 文件夹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;md5&#x27;</span><br><span class="hljs-keyword">import</span> &#123; login &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/sys&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">login</span>(<span class="hljs-params">context: any, userInfo: any</span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; username, password &#125; = userInfo<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">login</span>(&#123;<br>          username,<br>          <span class="hljs-attr">password</span>: <span class="hljs-title function_">md5</span>(password)<br>        &#125;)<br>          .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>(res)<br>          &#125;)<br>          .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">reject</span>(err)<br>          &#125;)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，我们的登录请求动作就完成了，我们只需要在点击登录按钮时，获取到 store 并 dispatch login 方法即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取到 store 实例</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useStore</span>()<br><br><span class="hljs-comment">// user.value 是登录表单的 ref</span><br><br>store<br>  .<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/login&#x27;</span>, user.<span class="hljs-property">value</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;login res&#x27;</span>, res)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err &#x27;</span>, err)<br>  &#125;)<br></code></pre></td></tr></table></figure><h1 id="写一个简单的-node-服务器"><a href="#写一个简单的-node-服务器" class="headerlink" title="写一个简单的 node 服务器"></a>写一个简单的 node 服务器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello server 9999&quot;</span><br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9999</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server site an port 9999 ...&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="配置-devServer"><a href="#配置-devServer" class="headerlink" title="配置 devServer"></a>配置 devServer</h1><p>我们将 项目 和 node 服务跑起来之后，点击登录，发现报错了 404，是因为请求 <code>http://localhost:8080/#/api/user</code> 并不存在，接口请求地址资源找不到，我们的接口写在 node 端，那么 node 服务跑起来后，我们怎么去访问呢，这里就要用到 webpack 的 <code>devServer</code> 了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue.config.js</span><br><br><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-comment">// 配置代理</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-comment">// 当地址中有/api的时候会触发代理机制，因为我们配置了 axios baseURL，所以每个请求中，都会以 `/api` 开头</span><br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>      <span class="hljs-comment">// 要代理的服务器地址  这里不用写 api</span><br>      <span class="hljs-comment">// node 服务</span><br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:9999&#x27;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否跨域</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-comment">// 必须得带上,否则，真正的请求中就会带上 &#x27;/api&#x27;，&#x27;http://localhost:9999/api/user&#x27;</span><br>        <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>最后，我们再重启项目，点击登录，就会拿到 <code>user</code> 接口返回的的结果了。</p><p><img src="/img/api-user.png" alt=""></p><h1 id="本地缓存处理方案"><a href="#本地缓存处理方案" class="headerlink" title="本地缓存处理方案"></a>本地缓存处理方案</h1><p>存储 token 分为两种：</p><ul><li>本地缓存：localstorage</li><li>全局状态管理：vuex</li></ul><p>保存在 <code>localstorage</code> 中，是为了在 token 没过期的情况下，让用户自动登录。保存在 vuex 中，是为了方便在其他位置使用。</p><p>那么我们来定义 <code>localstorage</code> 的相关方法吧！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/storage.ts</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> setItem = (<span class="hljs-attr">key</span>: string, <span class="hljs-attr">value</span>: unknown): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 将数组、对象类型的数据转化为 JSON 字符串进行存储</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    value = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value)<br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, value <span class="hljs-keyword">as</span> string)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getItem = (<span class="hljs-attr">key</span>: string): <span class="hljs-function"><span class="hljs-params">unknown</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(key) <span class="hljs-keyword">as</span> string<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-comment">// 如果报错了，直接将数据发送给使用端</span><br>    <span class="hljs-keyword">return</span> data<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> removeItem = (<span class="hljs-attr">key</span>: string): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">removeItem</span>(key)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除所有数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> removeAllItem = (<span class="hljs-attr">key</span>: string): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">clear</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，我们来处理 vuex user 模块，在 state 中定义 <code>token</code>，以及设置 token 的 mutations 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; setItem, getItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><br><span class="hljs-comment">// 我们可以定义一个常量文件夹，用来设置 TOKEN 常量，或者各种其他常量值</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TOKEN</span> = <span class="hljs-string">&#x27;token&#x27;</span><br><br>&#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">token</span>: <span class="hljs-title function_">getItem</span>(<span class="hljs-variable constant_">TOKEN</span>) || <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">setToken</span>(<span class="hljs-attr">state</span>: <span class="hljs-title class_">IState</span>, <span class="hljs-attr">token</span>: string): <span class="hljs-keyword">void</span> &#123;<br>      state.<span class="hljs-property">token</span> = token<br><br>      <span class="hljs-comment">// 本地存储 token</span><br>      <span class="hljs-title function_">setItem</span>(<span class="hljs-variable constant_">TOKEN</span>, token)<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在 actions login 方法中，请求成功后我们需要 commit 一个 mutation，来触发 setToken 方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setToken&#x27;</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>)<br></code></pre></td></tr></table></figure><p>到这，我们的 token 存储就完成了，我们可以在页面上将其显示出来看看。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;p&gt;<span class="hljs-attr">token</span>: &#123;&#123; $store.<span class="hljs-property">state</span>.<span class="hljs-property">user</span>.<span class="hljs-property">token</span> || <span class="hljs-string">&#x27;暂无Token&#x27;</span> &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><h1 id="接口响应数据统一处理"><a href="#接口响应数据统一处理" class="headerlink" title="接口响应数据统一处理"></a>接口响应数据统一处理</h1><p>我们在 <code>vuex user</code> 模块中通过 login 接口获取到了 <code>token</code>，当我们处理数据时，会发现需要通过好几个 <code>.</code> 的方式去拿到token，层级太深了，不太方便。</p><p>那么我们可以通过 <code>axios</code> 的响应拦截器来处理这种情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><br><span class="hljs-comment">// 响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; success, message, data &#125; = response.<span class="hljs-property">data</span><br><br>    <span class="hljs-keyword">if</span> (success) &#123;<br>      <span class="hljs-keyword">return</span> data<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(message)<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message))<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>) <span class="hljs-comment">// 提示错误信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>修改好 axios 响应拦截器之后，我们就可以改写一下 <code>vuex user</code> 下的 <code>actions login</code> 方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setToken&#x27;</span>, res.<span class="hljs-property">token</span>) <span class="hljs-comment">// 这样获取 token 是不是就方便很多了</span><br>  <span class="hljs-title function_">resolve</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="登录后操作"><a href="#登录后操作" class="headerlink" title="登录后操作"></a>登录后操作</h1><p>我们可以创建一个 <code>src/layout</code> 文件夹，登录成功后，用来显示的主容器，将 <code>layout/index.vue</code> 配置在 router 路由表中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/layout/index.vue&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>登录成功后，跳转到 <code>layout</code> 页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// login/index.vue</span><br><br>store<br>  .<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/login&#x27;</span>, user.<span class="hljs-property">value</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    router.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err &#x27;</span>, err)<br>  &#125;)<br></code></pre></td></tr></table></figure><h1 id="登录鉴权"><a href="#登录鉴权" class="headerlink" title="登录鉴权"></a>登录鉴权</h1><p>到这里，我们点击登录，就可以跳转到 <code>layout</code> 页面了，但是我们如果在地址栏手动输入 <code>/login</code>，我们依然可以回到 <code>login</code> 页面，明明我们登录成功，有了 token 还会跳到 login 页面，这是为什么呢？</p><p>因为我们到这里，还未做登录鉴权，即使存在token，我们并未做任何的权限控制和处理。</p><p>那么我们要做什么处理呢？</p><ul><li><p>当用户未登录时，不允许进入除 <code>login</code> 之外的任何页面</p></li><li><p>用户登录成功之后，token 未过期之前，不让用户进入 <code>login</code> 页面</p></li></ul><p>实现这个功能的核心就是使用 <code>vue-router</code> 的 <strong>路由守卫</strong></p><blockquote><p>传送门：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p></blockquote><p>那么我们创建 <code>permission.ts</code> 来处理路由守卫吧：</p><p>因为我们的 token 定义在 <code>modules user</code> 中，每次获取 token，需要使用 <code>store.state.user.token</code>，这样显得太长了，我们可以定义 <code>store getters</code>，来方便获取 <code>token</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// getters.ts</span><br><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-attr">token</span>: <span class="hljs-function">(<span class="hljs-params">state: any</span>) =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">token</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getters<br></code></pre></td></tr></table></figure><p>然后将其放入 store 的 getters 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> getters <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./getters&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">globalName</span>: <span class="hljs-string">&#x27;Hello_AlexCc&#x27;</span><br>    &#125;<br>  &#125;,<br>  getters,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    user<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>然后创建 permissions.ts 文件，定义路由前置守卫。</p><p>判断 token 是否存在，如果存在 token，并且 <code>to.path</code> 等于 <code>/login</code>，那么不让跳转到登录页，而是去 <code>layout</code> 页面。</p><p>如果 <code>to.path</code> 不是 <code>/login</code>，直接执行 <code>next</code> 方法即可。</p><p>如果 token 不存在，并且 <code>to.path</code> 是 <code>/login</code>，直接跳转 <code>next()</code></p><p>如果 token 不存在并且 <code>to.path</code> 不是 <code>/login</code>，我们让其跳转到登录页 <code>next(&#39;/login&#39;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// permissions.ts</span><br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 判断token是否存在</span><br>  <span class="hljs-keyword">if</span> (store.<span class="hljs-property">getters</span>.<span class="hljs-property">token</span>) &#123;<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">next</span>()<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      <span class="hljs-title function_">next</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>到这里，我们点击登录，就会去到根路径下 ‘/‘，也就是 <code>layout</code> 页面。这时我们在地址栏输入 <code>/login</code>，就不会再去登录页面了。</p><p>我们还可以改进一下，当 <code>token</code> 不存在时，我们判断了 <code>to.path === &#39;/login&#39;</code>，这样限制死了，将来我们还有 <code>/404</code> 以及 <code>/401</code> 等页面，这些页面也是不需要 <code>token</code> 就能访问的，我们不希望在 <code>if</code> 语句里面加太多的判断逻辑，这时，我们可以定义一个 <code>白名单</code>，专门处理不需要 <code>token</code> 的路径:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> whiteList = [<span class="hljs-string">&#x27;/login&#x27;</span>]<br><br><span class="hljs-keyword">if</span> (whiteList.<span class="hljs-title function_">indexOf</span>(to.<span class="hljs-property">path</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-title function_">next</span>()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工程化,Vue3,Config</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目实战(二)：Icon图标（SVG）</title>
    <link href="/post/vue3-project-traning.html"/>
    <url>/post/vue3-project-traning.html</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Element-plus-Icon"><a href="#使用-Element-plus-Icon" class="headerlink" title="使用 Element plus Icon"></a>使用 Element plus Icon</h1><blockquote><p><a href="https://element-plus.gitee.io/zh-CN/component/icon.html">https://element-plus.gitee.io/zh-CN/component/icon.html</a></p></blockquote><h1 id="自定义-SVG-图标"><a href="#自定义-SVG-图标" class="headerlink" title="自定义 SVG 图标"></a>自定义 SVG 图标</h1><p>对于 element plus 的图标，我们可以直接通过 el-icon 来显示。</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span> <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;size&quot;</span> <span class="hljs-attr">:color</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Edit</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 或者独立使用它，不从父级获取属性 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 由于SVG图标默认不携带任何属性，你需要直接提供它们 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Edit</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Edit</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 1em; height: 1em; margin-right: 8px&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Share</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 1em; height: 1em; margin-right: 8px&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>但是自定义的图标，我们却没有显示的方式，那么我们就需要一个自定义的组件，来展示自定义的 <code>svg</code> 图标。</p><p>对于这个自定义的组件，它需要拥有两种能力：</p><ul><li>显示外部的 svg 图标（链接的方式）</li><li>显示项目内的 svg 图标</li></ul><p>接下来，我们就来实现自定义组件。</p><h2 id="显示外部的-svg-图标"><a href="#显示外部的-svg-图标" class="headerlink" title="显示外部的 svg 图标"></a>显示外部的 svg 图标</h2><p>css mask:<br>mask 属性允许使用者通过遮罩或者裁切特定区域的图片的方式来 <code>隐藏一个元素的部分</code> 或者 <code>全部可见区域</code>。</p><blockquote><p>css mask: <a href="https://juejin.cn/post/6846687594693001223">https://juejin.cn/post/6846687594693001223</a></p></blockquote><p>接下来，我们定义组件 <code>SvgIcon</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isExternal&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleExternalIcon&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;svg-external-icon svg-icon&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;className&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">icon</span>: string</span></span><br><span class="language-javascript"><span class="language-xml">  className?: string</span></span><br><span class="language-javascript"><span class="language-xml">&#125;&gt;(), &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 判断是否为外部图标</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> isExternal = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-regexp">/^(https?:|mailto:|tel:)/</span>.<span class="hljs-title function_">test</span>(props.<span class="hljs-property">icon</span>))</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 外部图标样式</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> styleExternalIcon = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> (&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">mask</span>: <span class="hljs-string">`url(<span class="hljs-subst">$&#123;props.icon&#125;</span>) no-repeat 50% 50%`</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&#x27;-webkit-mask&#x27;</span>: <span class="hljs-string">`url(<span class="hljs-subst">$&#123;props.icon&#125;</span>) no-repeat 50% 50%`</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;))</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.svg-icon</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">1em</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">1em</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">vertical-align</span>: -<span class="hljs-number">0.15em</span>;</span></span><br><span class="language-css"><span class="language-xml">  fill: currentColor;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.svg-external-icon</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: currentColor;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">mask-size</span>: cover <span class="hljs-meta">!important</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这样，我们就可以通过 <code>链接</code> 的形式，来使用 <code>svg</code> 图标了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;svg-icon icon=<span class="hljs-string">&quot;https://res.lgdsunday.club/user.svg&quot;</span>&gt;&lt;/svg-icon&gt;<br></code></pre></td></tr></table></figure><h2 id="展示内部图标"><a href="#展示内部图标" class="headerlink" title="展示内部图标"></a>展示内部图标</h2><p>如果不是外部链接的话，我们就展示项目内部的 <code>svg</code> 图标。</p><p>通过 use 的 <code>xlink href</code> 属性，找到 body 下已经处理的过的 svg sprite 元素内容，它其中就包含了 <code>symbol</code> 元素，每个 <code>symbol</code> 元素上都有一个 <code>id</code>，这个 id 就是和 <code>xlink:href</code> 与之对应的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>&lt;svg v-<span class="hljs-keyword">else</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;svg-icon&quot;</span> :<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;className&quot;</span> aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">:xlink:href</span>=<span class="hljs-string">&quot;iconName&quot;</span> /&gt;</span></span><br>&lt;/svg&gt;<br><br><span class="hljs-keyword">const</span> iconName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">`#icon-<span class="hljs-subst">$&#123;props.icon&#125;</span>`</span>) <span class="hljs-comment">// </span><br></code></pre></td></tr></table></figure><p>当我们定义好了组件之后，那么就需要在项目中，导入所有的 svg 图标了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// icons/index.ts</span><br><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./svg/user.svg&#x27;</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./svg/password.svg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>假设我们有几百上千个 svg 图标，我们都要这样子引入吗？会不会太难受了 ~~</p><p>这里，我们可以使用 webpack 提供的 require.context 方法，来 <code>批量</code> 导入 svg 图标:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://webpack.docschina.org/guides/dependency-management/#requirecontext</span><br><span class="hljs-comment">// 通过 require.context() 函数来创建自己的 context</span><br><span class="hljs-keyword">const</span> svgRequire = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&#x27;./svg&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.svg$/</span>)<br><span class="hljs-comment">// 此时返回一个 require 的函数，可以接受一个 request 的参数，用于 require 的导入。</span><br><span class="hljs-comment">// 该函数提供了三个属性，可以通过 require.keys() 获取到所有的 svg 图标 [&#x27;./xxx1.svg&#x27;, &#x27;./xxx2.svg&#x27;]</span><br><span class="hljs-comment">// 遍历图标，把图标作为 request 传入到 require 导入函数中，完成本地 svg 图标的导入</span><br><br>svgRequire.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">svgIcon</span> =&gt;</span> <span class="hljs-title function_">svgRequire</span>(svgIcon))<br></code></pre></td></tr></table></figure><p>这样，就完成了所有的本地 <code>svg</code> 图片导入。</p><p>然后我们注册全局的 <code>SvgIcon</code> 组件，方便使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// icons/index.ts</span><br><br><span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">App</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">SvgIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/SvgIcon/index.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-attr">app</span>: <span class="hljs-title class_">App</span>): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;<br>  app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;svg-icon&#x27;</span>, <span class="hljs-title class_">SvgIcon</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，我们去页面上使用 <code>&lt;svg-icon icon=&quot;user&quot; /&gt;</code>，发现没有效果，图标展示不出来。</p><p>这是因为，我们虽然在 <code>icons/index.ts</code> 中，通过 <code>require.context</code> 导入了所有的 svg 图片，但是并没有做处理，<code>svg-icon</code> 内部的 <code>&lt;use :xlink:href=&quot;#icon-user&quot; /&gt;</code> 找不到任何跟 <code>#icon-user</code> 有关的 svg 图标。</p><p>这里，我们就需要用到 <code>svg-sprite-loader</code> 了。</p><h2 id="svg-sprite-loader"><a href="#svg-sprite-loader" class="headerlink" title="svg-sprite-loader"></a>svg-sprite-loader</h2><p>svg-sprite-loader 的官方解释是：一个用于创建 svg 雪碧图的 Webpack 加载器。这个加载器现在已经被 JetBrains 公司收录和维护了。</p><p>通俗的讲：svg-sprite-loader 会把你引入的 svg 塞到一个个 symbol 中，合成一个大的 svg，最后将这个大的 svg 放入 body 中。symbol 的 id 如果不特别指定，就是你的文件名。在页面上形成这样的元素，下面是导入了本地的 <code>user.svg</code> 和 <code>password.svg</code>：</p><p><img src="/img/svg-sprite.png" alt=""></p><p>我们可以看到，每个 <code>symbol</code> 上，都有一个 <code>id</code> 属性，因为我们在 <code>SvgIcon</code> 中指定了 <code>use</code> 的 <code>:xlink:href</code>，使用时，就能找到页面上对应的图标了。</p><p>接着，我们来配置 <code>svg-sprite-loader</code>，打开 <code>vue.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">dir</span>) &#123;<br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">join</span>(__dirname, dir)<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 使用了 config.module.rule(&#x27;svg&#x27;) 方法来获取对 SVG 文件的处理规则。</span><br>    <span class="hljs-comment">// 然后，它使用了 exclude 属性来添加一个排除规则，这个规则会排除 resolve(&#x27;src/icons&#x27;) 目录中的所有文件。</span><br>    <span class="hljs-comment">// 最后，它使用了 end 方法来结束这个链式调用。</span><br>    <span class="hljs-comment">// 这段代码的作用是在 Webpack 构建流程中排除 src/icons 目录中的所有 SVG 文件。这意味着 Webpack 在构建时不会处理这些文件。</span><br>    config.<span class="hljs-property">module</span>.<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;svg&#x27;</span>).<span class="hljs-property">exclude</span>.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src/icons&#x27;</span>)).<span class="hljs-title function_">end</span>()<br><br>    <span class="hljs-comment">// 使用了 config.module.rule(&#x27;icons&#x27;) 方法来获取对图标文件的处理规则。</span><br>    <span class="hljs-comment">// 然后，它使用了 test 属性来设置这个规则应用于哪些文件，这里使用的是一个正则表达式，表示只有以 .svg 结尾的文件才会被处理。</span><br>    <span class="hljs-comment">// 接着，它使用了 include 属性来添加一个包含规则，这个规则只会包含 resolve(&#x27;src/icons&#x27;) 目录中的文件。</span><br>    <span class="hljs-comment">// 最后，它使用了 use 方法来添加一个新的规则，这个规则使用了 svg-sprite-loader 来处理 SVG 文件。</span><br>    <span class="hljs-comment">// 这段代码的作用是在 Webpack 构建流程中处理 src/icons 目录中的 SVG 文件。</span><br>    <span class="hljs-comment">// 它会使用 svg-sprite-loader 加载器来将这些 SVG 文件转换为可以在浏览器中使用的精灵图（Sprite）。</span><br><br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;icons&#x27;</span>)<br>      .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.svg$/</span>)<br>      .<span class="hljs-property">include</span>.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src/icons&#x27;</span>))<br>      .<span class="hljs-title function_">end</span>()<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;svg-sprite-loader&#x27;</span>)<br>      .<span class="hljs-title function_">options</span>(&#123;<br>        <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[name]&#x27;</span> <span class="hljs-comment">// 指定精灵的符号 ID 应为 icon-[name]。</span><br>      &#125;)<br>      .<span class="hljs-title function_">end</span>()<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这两条规则在 webpack 配置中设置了两种不同的方法来处理 SVG 文件：一种用于排除位于 src/icons 目录中的 SVG 文件，另一种用于使用 svg-sprite-loader 处理位于 src/icons 目录中的 SVG 文件。</p><p>到这里，我们就完成了 <code>svg-sprite-loader</code> 的配置，然后重新启动项目，就可以愉快的使用本地的 <code>svg</code> 了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;svg-icon icon=<span class="hljs-string">&quot;user&quot;</span>&gt;&lt;/svg-icon&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p><img src="/img/svg-sprite-result.png" alt=""></p><p>页面上的效果是这样的</p><p><img src="/img/login.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过 <code>svg-sprite-loader</code> 加载之后，不仅可以通过指定 id 的方式引入 icon，而且相比图片引入的方式，最大的优点就在于可以通过给 svg 标签添加 fill 属性来调整 icon 的颜色。</p><p>除此之外，还可以通过给 svg 添加 class 来调整 icon 的样式，虽然说图片引入的方式也能做到，但是如果图片指定宽高与原图的宽高不成比例，就会导致图片的失真，而 svg 不会。即使随意调整 svg 的宽高样式，它也是按照原尺寸进行缩放，达到高保真的效果。</p><p>而且通过<code>svg-sprite-loader</code>的处理后，生成了精灵图，它是一种将多个图标放在一张图片中的技术，可以减少 HTTP 请求数，从而提升网站性能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工程化,Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3的响应式系统</title>
    <link href="/post/vue3-reactive.html"/>
    <url>/post/vue3-reactive.html</url>
    
    <content type="html"><![CDATA[<h1 id="响应式系统实现"><a href="#响应式系统实现" class="headerlink" title="响应式系统实现"></a>响应式系统实现</h1><h2 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h2><ol><li><p>通过 proxy 代理对象，读取属性时触发 get 方法，设置属性时触发 set 方法</p></li><li><p>在 get 方法中收集副作用函数，在 set 方法中触发副作用函数</p></li><li><p>假设有这么一个对象：<code>&#123; ok: true, text: &#39;hello world&#39; &#125;</code>，注册副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">ok</span> ? obj.<span class="hljs-property">text</span> : <span class="hljs-string">&#x27;ok not&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><p>当 ok 为 true，我们会走 obj.text 的读取逻辑，触发 get 拦截方法。这个时候页面上会显示 <code>hello world</code>，当我们将 obj.ok 设置为 false 后，我们会有副作用遗留函数（text的），因为 ok 为 false，永远不会再读取 obj.text 了。</p><p>但是，当我们修改 obj.text 时， effect 副作用函数依然会触发，虽然页面上永远是 <code>ok not</code>。</p><h2 id="清除不必要的副作用函数"><a href="#清除不必要的副作用函数" class="headerlink" title="清除不必要的副作用函数"></a>清除不必要的副作用函数</h2><ol start="4"><li><p>这时，我们就需要进行 <code>分支切换和 cleanup</code> 函数了，通过 cleanup 函数，我们将只收集使用到的 key 的副作用函数，也就是说，当 ok 为false 时，我们不再对 obj.text 进行依赖手机，无论我们如何修改 obj.text，都不会触发 effect 方法。</p></li><li><p>我们对注册副作用函数，做一些改变，在注册函数内部，定义了一个新的副作用函数方法，这个方法内部执行 删除副作用函数的方法 和真正的副作用函数（设置 document.body 内容）</p></li></ol><p>同时，我们还在 副作用函数 上定义了一个 deps 属性，用来存储与该副作用函数相关联的依赖集合，将来在 <code>cleanup</code> 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 某个 key 的 deps 中的副作用函数删除了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">effectFn</span>(<span class="hljs-params"></span>) &#123;<br>    activeEffect = effectFn<br><br>    <span class="hljs-title function_">cleanup</span>(effectFn) <span class="hljs-comment">// 删除所有key 收集到的依赖</span><br><br>    <span class="hljs-title function_">fn</span>() <span class="hljs-comment">// 重新执行副作用函数，重新收集依赖</span><br>  &#125;<br><br>  effectFn.<span class="hljs-property">deps</span> = [] <br><br>  <span class="hljs-title function_">effectFn</span>()<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>定义 cleanup 函数，每一次触发 set 方法时，都会先删除所有 key 对应的依赖，然后重新执行 <code>effectFn</code> 内部的 <code>fn</code> 函数，重新收集依赖</li></ol><p>因为 obj.ok = false 了，不会再读取 <code>obj.text</code>，所以也就不会再对 obj.text 收集依赖了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cleanup</span>(<span class="hljs-params">effectFn</span>) &#123;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; effectFn.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> deps = effectFn.<span class="hljs-property">deps</span>[i] <span class="hljs-comment">// Set 集合</span><br><br>    deps.<span class="hljs-title function_">delete</span>(effectFn)<br>  &#125;<br><br>  effectFn.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span> = []<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 ‘ok、text’ 中对应的依赖集合（Set）的副作用函数，因为 effectFn.deps 中存放的集合 和 Map key 对应的 Value 的集合，是同一个集合</p><p>删除后，Map 中的所有 value 都是空的 Set</p><p>然后执行 <code>fn</code> 函数，重新进行读取 obj 属性，进行依赖收集。</p><h2 id="竟然无限循环？"><a href="#竟然无限循环？" class="headerlink" title="竟然无限循环？"></a>竟然无限循环？</h2><ol start="7"><li>最后一步，我们还需要改造一下 trigger 函数，否则会造成 <code>无限循环</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, key</span>) &#123;<br>  <span class="hljs-keyword">const</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target)<br><br>  <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span><br><br>  <span class="hljs-keyword">const</span> effects = depsMap.<span class="hljs-title function_">get</span>(key)<br>  <span class="hljs-keyword">const</span> effectsToRun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(effects)<br><br>  <span class="hljs-comment">// effects &amp;&amp; effects.forEach(fn =&gt; fn())</span><br>  effectsToRun &amp;&amp; effectsToRun.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>())<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么新建一个 <code>Set</code> 集合呢?  <code>const effectsToRun = new Set(effects)</code></p><p>因为，我们遍历 effects 时，执行了每一个 <code>副作用</code> 函数，当副作用函数执行时，会调用 cleanup 进行清除，实际上就是从 effects 集合中奖当前执行的副作用函数剔除</p><p>但是，副作用函数的执行 <code>fn()</code> 会触发属性的读取操作，执行 <code>track</code>，导致副作用函数重新被收集到依赖中，而对于 effects集合的遍历仍然在执行，从而造成 <code>无限循环</code>。</p><p><strong>解决办法</strong>就是：根据 effects 重新建立一个集合，进行遍历。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>收集 key 的依赖<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 存储被注册的副作用函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> activeEffect;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> data = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">ok</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;hello world&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>() <span class="hljs-comment">// target =&gt; Map</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(data, &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 追踪依赖</span></span><br><span class="language-javascript">        <span class="hljs-title function_">track</span>(target, key)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> target[key]</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value</span>) &#123;</span><br><span class="language-javascript">        target[key] = value</span><br><span class="language-javascript">        <span class="hljs-comment">// 触发依赖</span></span><br><span class="language-javascript">        <span class="hljs-title function_">trigger</span>(target, key)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">track</span>(<span class="hljs-params">target, key</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!activeEffect) <span class="hljs-keyword">return</span> target[key]</span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!depsMap) &#123;</span><br><span class="language-javascript">        bucket.<span class="hljs-title function_">set</span>(target, depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>())</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">let</span> deps = depsMap.<span class="hljs-title function_">get</span>(key)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!deps) &#123;</span><br><span class="language-javascript">        depsMap.<span class="hljs-title function_">set</span>(key, deps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>())</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 添加副作用函数</span></span><br><span class="language-javascript">      deps.<span class="hljs-title function_">add</span>(activeEffect)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// deps 存储与该副作用函数相关联的依赖集合</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 deps 中的副作用函数删除了</span></span><br><span class="language-javascript">      activeEffect.<span class="hljs-property">deps</span>.<span class="hljs-title function_">push</span>(deps)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, key</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> depsMap = bucket.<span class="hljs-title function_">get</span>(target)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!depsMap) <span class="hljs-keyword">return</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> effects = depsMap.<span class="hljs-title function_">get</span>(key)</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> effectsToRun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(effects)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// effects &amp;&amp; effects.forEach(fn =&gt; fn())</span></span><br><span class="language-javascript">      effectsToRun &amp;&amp; effectsToRun.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> <span class="hljs-title function_">fn</span>())</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">effectFn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        activeEffect = effectFn</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">cleanup</span>(effectFn)</span><br><span class="language-javascript">        <span class="hljs-title function_">fn</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      effectFn.<span class="hljs-property">deps</span> = [] <span class="hljs-comment">// 存储所有包含当前副作用函数的依赖 集合，在 get 拦截函数中处理 deps</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">effectFn</span>()</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">cleanup</span>(<span class="hljs-params">effectFn</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;effectFn &#x27;</span>, effectFn.<span class="hljs-property">deps</span>)</span><br><span class="language-javascript">      <span class="hljs-comment">// 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 &#x27;xxx&#x27;(key) 中对应的依赖集合的副作用函数</span></span><br><span class="language-javascript">      <span class="hljs-comment">// effectFn.deps[i] 中，存放的依赖集合，和 Map key 对应的依赖集合，是同一个集合，删除某一项，自然会影响到另一个</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 当我们在 trigger 中执行 effects 时，就是执行副作用函数</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 这个时候，会执行 cleanup，删除所有的 key 对应的副作用函数，最后执行 fn，重新走 属性的读取逻辑，触发 get 方法，重新收集依赖</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 当我们设置 obj.ok = false 后，不会再读取 obj.text 了，从而不会对其 key 收集依赖。</span></span><br><span class="language-javascript">      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; effectFn.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> deps = effectFn.<span class="hljs-property">deps</span>[i]</span><br><span class="language-javascript"></span><br><span class="language-javascript">        deps.<span class="hljs-title function_">delete</span>(effectFn)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      effectFn.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span> = <span class="hljs-number">0</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27; obj.ok&#x27;</span>,  obj.<span class="hljs-property">ok</span>)</span><br><span class="language-javascript">      <span class="hljs-comment">// obj.ok = true 会触发 obj 的 get拦截方法，并且通过 track 函数收集到了副作用函数，并且将其存储在 deps 中</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = obj.<span class="hljs-property">ok</span> ? obj.<span class="hljs-property">text</span> : <span class="hljs-string">&#x27;ok not&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// obj.text = &#x27;Vue3 Reactive&#x27;</span></span><br><span class="language-javascript">      obj.<span class="hljs-property">ok</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bucket &#x27;</span>, bucket)</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//   console.log(&#x27;执行了&#x27;)</span></span><br><span class="language-javascript">    <span class="hljs-comment">//   obj.text = &#x27;Vue3 Reactive&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;, 3000)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Reactive,Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 实战</title>
    <link href="/post/nginx.html"/>
    <url>/post/nginx.html</url>
    
    <content type="html"><![CDATA[<h1 id="查看-Nginx-命令"><a href="#查看-Nginx-命令" class="headerlink" title="查看 Nginx 命令"></a>查看 Nginx 命令</h1><h2 id="查看安装目录"><a href="#查看安装目录" class="headerlink" title="查看安装目录"></a>查看安装目录</h2><blockquote><p>whereis nginx</p></blockquote><p>nginx: /usr/bin/nginx</p><h2 id="查看-nginx-进程"><a href="#查看-nginx-进程" class="headerlink" title="查看 nginx 进程"></a>查看 nginx 进程</h2><blockquote><p>ps -ef | grep nginx</p></blockquote><h2 id="查看-nginx-可执行文件"><a href="#查看-nginx-可执行文件" class="headerlink" title="查看 nginx 可执行文件"></a>查看 nginx 可执行文件</h2><blockquote><p>ps -ef | grep nginx</p></blockquote><p>/www/server/nginx/conf/nginx.conf 表示配置文件</p><p>或者也可以通过 <code>nginx -t</code> 来查看配置文件在哪，虽然这个命令是检测 nginx 配置文件是否有语法错误：</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">nginx</span>: the configuration file /www/server/nginx/conf/nginx.<span class="hljs-property">conf</span> syntax is ok<br><span class="hljs-attr">nginx</span>: configuration file /www/server/nginx/conf/nginx.<span class="hljs-property">conf</span> test is successful<br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><blockquote><p>nginx.conf</p></blockquote><h2 id="全局模块"><a href="#全局模块" class="headerlink" title="全局模块"></a>全局模块</h2><p>worker_processes auto; // 进程数量<br>error_log  /www/wwwlogs/nginx_error.log  crit; // 错误日志存放路径<br>pid        /www/server/nginx/logs/nginx.pid; // 存放 pid 文件</p><h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><p>worker_connections 51200; // 单个进程最大的连接数（最大连接数：连接数+进程数）</p><h2 id="http-块"><a href="#http-块" class="headerlink" title="http 块"></a>http 块</h2><ul><li>include 引入其他的配置文件</li><li>default_type 文件类型</li></ul><h1 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h1><p>首先启动 nginx 服务，输入命令 <code>nginx</code>，修改根路径下的 index.html 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// nginx 配置，访问 localhost:8080/ 时，会打开 index.html</span><br>location / &#123;<br>  root   html;<br>  index  index.<span class="hljs-property">html</span> index.<span class="hljs-property">htm</span>;<br>&#125;<br><br><span class="hljs-comment">// 修改index.html</span><br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  btn.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:9999/list&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;返回结果&#x27;</span>, xhr.<span class="hljs-property">responseText</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    xhr.<span class="hljs-title function_">send</span>(<span class="hljs-literal">null</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>起一个本地 node 服务 <code>9999</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello server&quot;</span><br>  &#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9999</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server site an port 9999 ...&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>当我们点击<code>发送</code>按钮时，会出现跨域问题，这是因为浏览器 <code>同源策略</code>限制，<code>协议、域名、端口号</code>不同，会形成跨域。</p><p>这里是端口不同。</p><p>我们可以利用 <code>nginx</code> 来解决。</p><p>打开 <code>nginx.conf</code>，新增一条转发规则，表示遇到 <code>api</code> 开头的，都将转发到某个服务下</p><p>比如 <code>xhr.open(&#39;GET&#39;, &#39;/api/list&#39;)</code>, 会将 <code>api</code> 替换成 <code>http://localhost:9999/</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加</span><br><br>location /api/ &#123;<br>    proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:9999/;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改调用接口的地方:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/api/list&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此时，再次点击 <code>发送</code>,不会再出现跨域了。</p><h1 id="Vue-Router-History-模式-404-问题"><a href="#Vue-Router-History-模式-404-问题" class="headerlink" title="Vue Router History 模式 404 问题"></a>Vue Router History 模式 404 问题</h1><p>Vue 项目，采用 history 的路由模式，打包后放到 nginx 上部署，切换路由时出现 <code>404</code> 现象。</p><p>解决方案：<code>try_files $uri $uri/ /index.html;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>location / &#123;<br>    root   html;<br>    index  index.<span class="hljs-property">html</span> index.<span class="hljs-property">htm</span>;<br>    try_files $uri $uri/ /index.<span class="hljs-property">html</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>我们可以建 3 个（或者更多）node 服务来模拟实现，<strong>可以通过 count 计数，来查看每个服务被分配到的请求数</strong></p><ol><li>server1</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello server 9999&quot;</span><br>  &#125;)<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`server 9999 ------ <span class="hljs-subst">$&#123;count&#125;</span>`</span>)<br>  count++<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9999</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server site an port 9999 ...&#x27;</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>通过 pm2 log 查看日志</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><br><span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;pm2 start index.js index2.js index3.js --watch&quot;</span>,<br><span class="hljs-string">&quot;stop&quot;</span>: <span class="hljs-string">&quot;pm2 stop index.js&quot;</span>,<br><span class="hljs-string">&quot;allList&quot;</span>: <span class="hljs-string">&quot;pm2 list&quot;</span>,<br><span class="hljs-string">&quot;monit&quot;</span>: <span class="hljs-string">&quot;pm2 monit&quot;</span>,<br><span class="hljs-string">&quot;log&quot;</span>: <span class="hljs-string">&quot;pm2 log&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>server2、server3 只是端口不一样</li></ol><h2 id="修改-nginx-配置"><a href="#修改-nginx-配置" class="headerlink" title="修改 nginx 配置"></a>修改 nginx 配置</h2><p>配置根路径，代理到本地服务，当我们启动 nginx，访问 <code>http://localhost:8080/</code> 时，服务会代理到我们配置的 <code>upstream node</code> 服务上，访问 <code>http://localhost:8080/list</code> 即可调用咱们写好的 node 接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">upstream node &#123;<br>server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9997</span>;<br>server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9998</span>;<br>server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9999</span>;<br>&#125;<br><br>server &#123;<br>  location / &#123;<br>    proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//node; // node 是 upstream 指定的 name</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后我们可以通过 postman 或 apifox 来进行压测了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">接口：<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080/list</span><br></code></pre></td></tr></table></figure><p><img src="/img/%E5%8E%8B%E6%B5%8B%E9%85%8D%E7%BD%AE.jpg" alt=""><br><img src="/img/%E5%8E%8B%E6%B5%8B%E7%BB%93%E6%9E%9C.png" alt=""></p><p>这里设置的<code>接口循环次数</code>是 <code>33</code>，意味着我们将要调用 33 次接口，运行之后，33次均可以成功跑通。</p><p>来看下结果：</p><p><img src="/img/%E5%8E%8B%E6%B5%8Blog.png" alt=""></p><p>每个 server 分配均匀，33次，每个服务分配了 <code>11</code> 次请求。</p><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p>还可以给服务设置权重 <code>weight</code>，数值越大，权重越高，请求数越多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9997</span> weight=<span class="hljs-number">3</span>;<br>server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9998</span> weight=<span class="hljs-number">2</span>;<br>server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9999</span> weight=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>修改完配置后，重启 nginx <code>nginx -s reload</code>，继续运行 <code>apifox</code> 压测接口：</p><p><img src="/img/weight.png" alt=""></p><p>权重最高的 <code>9997</code> 请求被分配了 17 次，权重最低的 <code>9999</code> 只分配了 5 次请求。</p><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>设置超时备用模式，如果存在超时，就会选用备用的服务 <code>9003</code>，如果不存在超时请求，则不会有请求打到 <code>9999</code> 服务上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">upstream node &#123;<br>  server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9997</span> fail_timeout=<span class="hljs-number">60</span>;<br>  server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9998</span> fail_timeout=<span class="hljs-number">20</span>;<br>  server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9999</span> backup;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://xiaoman.blog.csdn.net/article/details/123958967">小满介绍Nginx</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://xiaoman.blog.csdn.net/article/details/123965492">安装Nginx</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/qq1195566313/category_11727192.html">Nginx相关</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Linux上部署 Node 接口</title>
    <link href="/post/nodejs.html"/>
    <url>/post/nodejs.html</url>
    
    <content type="html"><![CDATA[<h1 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h1><p>打开 mac 终端:</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js">ssh root@<span class="hljs-number">124.221</span><span class="hljs-number">.230</span><span class="hljs-number">.105</span> (公网<span class="hljs-variable constant_">IP</span>)<br><br><span class="hljs-comment">// 接着输入密码，即可登录远程服务器</span><br></code></pre></td></tr></table></figure><p>登录进去，输入 pwd，会输出 <code>/root</code>，这时我们切到 ‘/‘ 目录下: <code>cd ..</code></p><h1 id="在远程安装-nodejs"><a href="#在远程安装-nodejs" class="headerlink" title="在远程安装 nodejs"></a>在远程安装 nodejs</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">wget <span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.npmmirror.com/binaries/node/v14.19.1/node-v14.19.1-linux-x64.tar.xz</span><br></code></pre></td></tr></table></figure><h1 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h1><p>使用 tar 命令</p><ul><li>-c 压缩</li><li>-x 解压</li><li>-t 查看内容</li><li>-r 想压缩归档文件末尾追加文件</li><li>-v 显示所有过程</li><li>-f 使用档案名字，切记，这是最后一个参数，最后只能接档案名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">tar -xvf node-v14<span class="hljs-number">.19</span><span class="hljs-number">.1</span>-linux-x64.<span class="hljs-property">tar</span>.<span class="hljs-property">xz</span><br></code></pre></td></tr></table></figure><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>找到根目录 ‘/‘ 下的 etc文件夹，进去里面，打开 profile 文件，打开，执行命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// &#x27;/&#x27;</span><br><br>cd etc<br><br>vim profile<br></code></pre></td></tr></table></figure><p>在最后一行加上如下这句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">PATH</span>=<span class="hljs-attr">$PATH</span>:<span class="hljs-regexp">/node-v14.19.1-linux-x64/</span>bin<br></code></pre></td></tr></table></figure><p>最后，使文件生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// /etc</span><br>source profile<br></code></pre></td></tr></table></figure><p>查看 node 版本</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br><br>npm -v<br></code></pre></td></tr></table></figure><h1 id="安装-pm2"><a href="#安装-pm2" class="headerlink" title="安装 pm2"></a>安装 pm2</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g pm2<br></code></pre></td></tr></table></figure><h1 id="部署-node-接口"><a href="#部署-node-接口" class="headerlink" title="部署 node 接口"></a>部署 node 接口</h1><p>在根目录下 <code>/</code>，创建 <code>node-server</code> 文件夹</p><p>可以通过 express 建立一个 node 服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;current IP&#x27;</span>, req.<span class="hljs-property">ip</span>)<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;linux node server&#x27;</span><br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9999</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;node server at port 9999...&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="通过-pm2-启动node服务"><a href="#通过-pm2-启动node服务" class="headerlink" title="通过 pm2 启动node服务"></a>通过 pm2 启动node服务</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// node-server</span><br>pm2 start index.<span class="hljs-property">js</span> --watch<br></code></pre></td></tr></table></figure><p>通过 <code>pm2 monit</code> 查看 node 服务的打印日志</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>访问接口，如果打不开，大概率是因为没有放开防火墙。</p><blockquote><p><a href="http://124.221.230.105:9999/list">http://124.221.230.105:9999/list</a></p></blockquote><ol><li>找到服务器地址，放开 node 服务对应的端口号</li></ol><p><img src="/img/firewall.png" alt=""></p><p>此时依然无法打开对应的接口</p><ol start="2"><li>登录服务器，查看防火墙所有的端口</li></ol><blockquote><p>firewall-cmd –zone=public –list-ports</p></blockquote><ol start="3"><li>添加新的端口</li></ol><blockquote><p>firewall-cmd –zone=public –add-port=9999/tcp –permanent</p></blockquote><p>删除 firewall-cmd –zone=public –remove-port=9999/tcp</p><p>–permanent 表示永久有效</p><ol start="4"><li>重启防火墙</li></ol><blockquote><p>firewall-cmd –reload</p></blockquote><p>至此，就可以访问服务器上 node 服务的接口了。</p><p><img src="/img/node-res.png" alt=""></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/qq1195566313/article/details/123885302">小满Linux介绍</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue Router 4+</title>
    <link href="/post/vue-router4.html"/>
    <url>/post/vue-router4.html</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">createWebHashHistory</span>(), <span class="hljs-comment">// hash 模式</span><br>  routes,<br>&#125;)<br></code></pre></td></tr></table></figure><p>hash 模式底层是通过 <code>hashchange</code> 监听的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;hashchange&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; ... &#125;)<br></code></pre></td></tr></table></figure><p>history 模式 (<code>createWebHistory</code>)，底层是通过 <code>popstate</code> 监听的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;popstate&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123; ... &#125;)<br></code></pre></td></tr></table></figure><h1 id="在-setup-中访问路由和当前路由"><a href="#在-setup-中访问路由和当前路由" class="headerlink" title="在 setup 中访问路由和当前路由"></a>在 setup 中访问路由和当前路由</h1><p>因为我们在 setup 里面没有访问 this，所以我们不能再直接访问 this.$router 或 this.$route。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useRouter, useRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br>    <span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">pushWithQuery</span>(<span class="hljs-params">query</span>) &#123;<br>      router.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;search&#x27;</span>,<br>        <span class="hljs-attr">query</span>: &#123;<br>          ...route.<span class="hljs-property">query</span>,<br>        &#125;,<br>      &#125;)<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>route 对象是一个响应式对象，所以它的任何属性都可以被监听，但你应该避免监听整个 route 对象。在大多数情况下，你应该直接<code>监听你期望改变的参数</code>。</p><p>请注意，在模板中我们仍然可以访问 $router 和 $route，所以不需要在 setup 中返回 router 或 route。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JS,Vue-Router,Vue3,</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目实战(一)：工程化配置</title>
    <link href="/post/vue3-project-config.html"/>
    <url>/post/vue3-project-config.html</url>
    
    <content type="html"><![CDATA[<h1 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h1><p>编程规范的重要作用：</p><ul><li>规范的代码可以促进团队合作</li><li>规范的代码可以减少bug处理，规范不是对开发的制约，而确实是有助于提高开发效率的</li><li>规范的代码可以降低维护成本</li><li>规范的代码有助于代码审查</li><li>养成代码规范的习惯，有助于自身的成长</li></ul><h2 id="ESLint-Prettier-自动格式化代码"><a href="#ESLint-Prettier-自动格式化代码" class="headerlink" title="ESLint + Prettier 自动格式化代码"></a>ESLint + Prettier 自动格式化代码</h2><ol><li>VSCode 安装 ESLint 插件，在根目录创建 <code>.eslintrc</code> 配置文件</li></ol><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs json">module.exports = <span class="hljs-punctuation">&#123;</span><br>  root<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 表示当前目录为根目录</span><br>  env<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    node<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// ESLint 中基础配置需要继承的配置</span><br>  extends<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;plugin:vue/vue3-essential&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;eslint:recommended&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;@vue/typescript/recommended&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;@vue/prettier&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;@vue/prettier/@typescript-eslint&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  parserOptions<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    ecmaVersion<span class="hljs-punctuation">:</span> <span class="hljs-number">2020</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 错误规则：off(0) warn(1) error(2)</span><br>  rules<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;no-console&quot;</span><span class="hljs-punctuation">:</span> process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-attr">&quot;warn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;no-debugger&quot;</span><span class="hljs-punctuation">:</span> process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-attr">&quot;warn&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 关闭 no-used 检查</span><br>    <span class="hljs-attr">&quot;@typescript-eslint/no-unused-vars&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  overrides<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    files<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;**/__tests__/*.&#123;j,t&#125;s?(x)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;**/tests/unit/**/*.spec.&#123;j,t&#125;s?(x)&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    env<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      jest<span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>VSCode 安装 <code>Prettier</code> 插件，在根目录创建 <code>.prettierrc</code> 配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否加分号</span><br>  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 单引号</span><br>  <span class="hljs-attr">&quot;arrowParens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;avoid&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// (x) =&gt; &#123;&#125; 箭头函数参数只有一个时，是否要小括号， avoid: 省略小括号</span><br>  <span class="hljs-attr">&quot;trailingComma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span> <span class="hljs-comment">// 以多个逗号相隔的，最后是否加逗号</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>我们打开 <code>VSCode</code> 设置，切换到 <code>工作区</code>，找到 <code>Code Action on Save</code>，修改配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;source.fixAll&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;source.fixAll.stylelint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;source.fixAll.tslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure></li><li><p>注意项</p></li></ol><ul><li><p>对 VSCode 而言，默认一个 tab 等于 4 个空格，而 ESlint 默认为两个空格，我们在 VSCode 设置中，找到 <code>tab size</code> 改为 2 就行。</p></li><li><p>可能安装了多个代码格式化工具，我们右键文件，找到 <code>使用...格式化文档</code>，设置默认的为 <code>Prettier</code> 即可。</p></li><li><p>有可能 Prettier 和 eslint 规则存在冲突，比如 eslint 希望方法名和括号之间有空格，而 Prettier 不希望有空格，控制台就会报出 ESlint 错误，我们就可以找到 ESlint 配置文件，找到 <code>rules</code>，将 <code>space-before-function-paren</code> 设置为 <code>0</code> 或者 <code>off</code> 即可。</p></li></ul><h2 id="Git-提交规范"><a href="#Git-提交规范" class="headerlink" title="Git 提交规范"></a>Git 提交规范</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">&lt;类型&gt;[可选 范围]: &lt;描述&gt;<br><br>[可选 正文]<br><br>[可选 脚注]<br></code></pre></td></tr></table></figure><h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><p>Github: cz-cli</p><p>当你使用 commitizen 进行代码提交时，commitizen 会提交你在提交时填写所有必须得提交字段</p><ol><li><p>全局安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g commitizen@<span class="hljs-number">4.2</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure></li><li><p>项目配置</p></li></ol><ul><li>安装 cz-customizable</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install cz-customizable@<span class="hljs-number">6.3</span><span class="hljs-number">.0</span> --save-dev<br></code></pre></td></tr></table></figure><ul><li>在 package.json 中配置</li></ul><p>表示 commitizen 的配置在 node_modules 中的第三方包之中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">...<br><span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;commitizen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node_modules/cz-customizable&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>...<br></code></pre></td></tr></table></figure><p>3.项目根目录下创建 <code>.cz-config.js</code>，配置自定义提示文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">types</span>: [<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;feat:     新功能&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fix:     修复&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;docs:     文档变更&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;style:     代码格式（不影响代码运行的变动）&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;refactor:     重构（既不是增加 feature，也不是修复 bug）&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;perf:     性能优化&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test:     增加测试&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;chore&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chore:     构建过程或辅助工具的变动&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;revert:     回退&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;build:     打包&#x27;</span> &#125;,<br>  ],<br>  <span class="hljs-comment">// 步骤</span><br>  <span class="hljs-attr">messages</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;请选择提交的类型&#x27;</span>,<br>    <span class="hljs-attr">customScope</span>: <span class="hljs-string">&#x27;请输入修改的范围（可选）&#x27;</span>,<br>    <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;请简要描述提交内容（必填）&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;请输入详细的描述（可选）&#x27;</span>,<br>    <span class="hljs-attr">footer</span>: <span class="hljs-string">&#x27;请输入要关闭的 issue（可选）&#x27;</span>,<br>    <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">&#x27;确认要使用以上信息提交?(y/n)&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 需要跳过的问题</span><br>  <span class="hljs-attr">skipQuestions</span>: [<span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>],<br>  <span class="hljs-attr">subjectLimit</span>: <span class="hljs-number">72</span>, <span class="hljs-comment">// 描述内容的限制</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><p>使用 <code>git cz</code> 代替 <code>git commit</code></p></li><li><p>最后</p></li></ol><p>我们可以通过 <code>git cz</code> 规范化了 git 提交，那么存在一个问题，我们必须通过 <code>git cz</code> 提交，才能规范化，如果我们忘记了使用 <code>git cz</code>，依然使用的 <code>git commit</code> 直接提交了怎么办呢？</p><p>那么，有没有办法限制这种错误的出现？</p><p>使用 <code>git hooks</code></p><h3 id="Git-Hooks"><a href="#Git-Hooks" class="headerlink" title="Git Hooks"></a>Git Hooks</h3><p>当《提交描述信息》不符合 <code>约定式提交规范</code> 的时候，阻止当前的提交，并抛出相应的错误提示。</p><p>通过 <code>git hooks</code> 在执行某个事件之前或者之后进行一些额外的操作。</p><p>git hooks 非常多，实际用的比较多的就两个：</p><ul><li>pre-commit：git commit 执行前，在获取提交日志信息并进行提交之前调用</li><li>commit-msg：git commit 执行前，可用于将消息规范化为某种项目标准格式</li></ul><h3 id="使用-husky-commitlint-检查提交信息"><a href="#使用-husky-commitlint-检查提交信息" class="headerlink" title="使用 husky + commitlint 检查提交信息"></a>使用 husky + commitlint 检查提交信息</h3><p>使用 <code>git hooks</code>去检验我们的提交信息，需要使用两个工具：</p><ul><li>commitlint: 用于检查提交信息</li><li>husky: git hooks 工具</li></ul><p>主要: <strong>npm 版本需要在 7.x 以上</strong></p><ol><li><p>安装依赖:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install @commitlint/config-conventional@<span class="hljs-number">12.1</span><span class="hljs-number">.4</span> @commitlint/cli@<span class="hljs-number">12.1</span><span class="hljs-number">.4</span> --save-dev<br></code></pre></td></tr></table></figure></li><li><p>创建 <code>commitlint-config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>增加配置项</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>],<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// type 的类型定义，表示 git 提交的 type 必须在以下范围内</span><br>    <span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br>      <span class="hljs-comment">// 当前验证的错误级别</span><br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-comment">// 在什么情况下验证</span><br>      <span class="hljs-string">&#x27;always&#x27;</span>,<br>      <span class="hljs-comment">// 枚举的内容</span><br>      [<span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;chore&#x27;</span>, <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-string">&#x27;build&#x27;</span>],<br>    ],<br>    <span class="hljs-comment">// subject 大小写不做校验</span><br>    <span class="hljs-string">&#x27;subject-case&#x27;</span>: [<span class="hljs-number">0</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>: 必须确保我们的配置文件保存为 <code>utf-8</code> 的编码格式，否则可能会报错。</p><p>打开配置文件，查看 <code>vscode</code> 右下角，是否显示了 <code>utf-8</code>，如果不是就要将其切换为正确的编码格式。</p><ol start="4"><li>安装 husky</li></ol><p>检测 git hooks 的工具</p><ol><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install husky@<span class="hljs-number">7.0</span><span class="hljs-number">.1</span> --save-dev<br></code></pre></td></tr></table></figure></li><li><p>启动 hooks，在根目录下生成 <code>.husky</code> 文件夹</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx husky install<br></code></pre></td></tr></table></figure><ol start="3"><li>在 package.json 中生成 <code>prepare</code> 指令（npm &gt; 7）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 执行指令，会在 npm scripts 中生成配置</span><br>npm set-script prepare <span class="hljs-string">&quot;husky install&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>执行 prepare 指令</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm run prepare<br></code></pre></td></tr></table></figure><ol start="5"><li>添加 <code>commitlint</code> 的 hook 到 husky 中，并在 commit-msg 的 hooks 下，执行 <code>npx --no-install commitlint --edit &quot;$1&quot;</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx husky add .<span class="hljs-property">husky</span>/commit-msg <span class="hljs-string">&#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="6"><li>打开 .husky，就可以看到 commit-msg 文件了。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// commit-msg</span><br><br>#!<span class="hljs-regexp">/bin/</span>sh<br>. <span class="hljs-string">&quot;$&#123;dirname &quot;</span>$&#123;<span class="hljs-number">0</span>&#125;<span class="hljs-string">&quot;&#125;/_/husky.sh&quot;</span><br><br>npx --no-install commitlint --edit $<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="7"><li>最后，我们就可以愉快的提交了。</li></ol><h2 id="pre-commit-检测代码提交规范"><a href="#pre-commit-检测代码提交规范" class="headerlink" title="pre-commit 检测代码提交规范"></a>pre-commit 检测代码提交规范</h2><p>虽然我们使用了 eslint + prettier 在本地自动格式化代码，但是，有可能有的小伙伴，忘记将 vscode 的自动保存格式化打开了，并且写的代码格式不符合规范，也是可以提交上去的。</p><p>那么我们就得加一些配置，来检测小伙伴们提交的代码是否符合规范了。</p><p>要完成这一操作，就需要使用 husky 配合 eslint 来实现了。</p><p>我们期望通过 <code>husky</code> 检测 <code>pre-commit</code> 钩子，在该钩子下执行 <code>npx eslint --ext .js,.vue, src</code> 指令去进行相关的检测。</p><ol><li>执行 <code>npx husky add .husky/pre-commit &quot;npx eslint --ext .js,.vue, src&quot;</code> 命令</li></ol><p>会在 .husky 文件夹下面，生成 <code>pre-commit</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pre-commit</span><br><br>#!<span class="hljs-regexp">/bin/</span>sh<br>. <span class="hljs-string">&quot;$&#123;dirname &quot;</span>$&#123;<span class="hljs-number">0</span>&#125;<span class="hljs-string">&quot;&#125;/_/husky.sh&quot;</span><br><br>npx eslint --ext .<span class="hljs-property">js</span>,.<span class="hljs-property">vue</span>, src<br></code></pre></td></tr></table></figure><p>每次我们提交代码，都会触发 pre-commit 钩子，从而使用 eslint 去检测我们的代码文件。</p><ol start="2"><li>关闭自动保存，修改代码提交试试吧</li></ol><h2 id="lint-staged-自动修复错误"><a href="#lint-staged-自动修复错误" class="headerlink" title="lint staged 自动修复错误"></a>lint staged 自动修复错误</h2><p>我们通过 <code>pre-commit</code> + husky 处理了代码提交时的规范化问题，当我们进行代码提交时，会检测所有的代码格式规范。</p><p>但是这样就有两个问题：</p><ol><li>我们只修改了个别文件，没有必要检测所有的文件代码格式</li><li>它只能给我们提示出对应的错误，竟然还需要我们手动进行修复？不合理</li></ol><p>我们使用 <code>lint-staged</code> 插件，来帮助我们解决这两个问题。</p><p>lint-staged 可以 <code>只检测本次更新的代码，并在错误出现的时候，自动修复并且推送</code></p><p><strong>安装</strong></p><p>使用 <code>vue-cli</code> 生成项目时，lint-staged 不需要安装了，项目已经有了。如果没有的话，就需要单独安装</p><ol><li><p>修改 <code>package.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;src/**/*.&#123;js,jsx,vue&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-string">&quot;eslint --fix&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;git add&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>修改 .husky/pre-commit 文件</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pre-commit</span><br><br>#!<span class="hljs-regexp">/bin/</span>sh<br>. <span class="hljs-string">&quot;$&#123;dirname &quot;</span>$&#123;<span class="hljs-number">0</span>&#125;<span class="hljs-string">&quot;&#125;/_/husky.sh&quot;</span><br><br><span class="hljs-comment">// npx eslint --ext .js,.vue, src // 删除</span><br><br>npx lint-staged <span class="hljs-comment">// 新增</span><br></code></pre></td></tr></table></figure><ol start="3"><li>尝试将代码修改为不符合规范的，通过 <code>git cz</code> 再次提交试试！</li></ol><ul><li><p>lint-staged 会尝试自动修复错误</p></li><li><p>错误修复完成，继续执行，并将代码提交</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>工程化,Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出Vue3</title>
    <link href="/post/vue3.html"/>
    <url>/post/vue3.html</url>
    
    <content type="html"><![CDATA[<h1 id="ref-和-reactive-使用上有什么区别"><a href="#ref-和-reactive-使用上有什么区别" class="headerlink" title="ref 和 reactive 使用上有什么区别?"></a>ref 和 reactive 使用上有什么区别?</h1><ol><li>ref 支持所有的类型，reactive 只接收引用类型（Array/Object/Map/Set）</li><li>ref 取值和赋值都需要加 .value，reactive 不需要 .value</li><li>reactive 不能直接赋值，否则会破坏响应式（proxy）</li></ol><p>如果要改变数组，可以通过 push 方法，将要 push 的数组结构 (xx.push(…arr))</p><h2 id="如何抉择呢？"><a href="#如何抉择呢？" class="headerlink" title="如何抉择呢？"></a>如何抉择呢？</h2><p>因为社区大佬 <code>basvanmeurs</code>提出了一个新的 PR，大概就是重构了响应式的部分内容，由于重构内容过于庞大，所以一直等到 2021 年 8 月 5 号，伴随着 Vue3.2 的发布，尤大大才合并对应的代码。</p><p><code>ref</code> 被重构之后，有了更高效的实现（提升了 约 260% 的读取速度 / 约 50% 的写入速度），依赖跟踪速度提高了约 40%，内存使用量减少了约 17%，毫无疑问这是一个伟大的变化。</p><p>那么，在以后的使用过程当中，能使用 <code>ref</code> 就用 <code>ref</code>吧，毕竟它的性能得到了如此大的提升。</p><h1 id="defineProps-如何定义默认值？"><a href="#defineProps-如何定义默认值？" class="headerlink" title="defineProps 如何定义默认值？"></a>defineProps 如何定义默认值？</h1><blockquote><p>针对类型的 defineProps 声明的不足之处在于，它没有可以给 props 提供默认值的方式。</p></blockquote><p>使用TS 特有的默认值方式 <code>withDefaults</code> 函数，无须引入开箱即用，接受一个props函数第二个参数是一个对象设置默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">Props</span> &#123;<br>  msg?: string<br>  labels?: string[]<br>&#125;<br><br><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">withDefaults</span>(defineProps&lt;<span class="hljs-title class_">Props</span>&gt;(), &#123;<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-attr">labels</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>]<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><p>如果使用 withDefaults 报错 <code>&#39;withDefaults&#39; is not defined</code>，我们修改 <code>.eslintrc</code> 文件</p><p>添加如下配置代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">globals</span>: &#123;<br>    <span class="hljs-attr">withDefaults</span>: <span class="hljs-string">&#x27;readonly&#x27;</span><br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><blockquote><p>component</p></blockquote><p>当我们要渲染的组件不确定时，可以使用 <code>&lt;component is=&quot;&#39;component-name&#39;&quot; /&gt;</code> 来处理，要渲染的实际组件由 is 属性决定。</p><ul><li>当 is 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。</li><li>或者，is 也可以直接绑定组件。</li></ul><p>按注册名渲染组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Foo.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Bar.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Foo</span>, <span class="hljs-title class_">Bar</span> &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">view</span>: <span class="hljs-string">&#x27;Foo&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;view&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>按定义渲染组件 <code>&lt;script setup&gt; 组合式 API</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;component :is=<span class="hljs-string">&quot;Math.random() &gt; 0.5 ? Foo : Bar&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>渲染 HTML 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;component :is=<span class="hljs-string">&quot;href ? &#x27;a&#x27; : &#x27;span&#x27;&quot;</span>&gt;&lt;/component&gt;<br></code></pre></td></tr></table></figure><h1 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽 slot"></a>插槽 slot</h1><p>默认插槽、具名插槽。</p><p>作用域插槽：<code>:headerName=&quot;&#39;我是头部&#39;&quot;</code>，父组件可以通过 <code>v-slot=&quot;&#123; headerName &#125;&quot;</code> 拿到组件内部暴露出来的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// SlotComp.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;slot-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">:headerName</span>=<span class="hljs-string">&quot;&#x27;我是头部&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>使用具有插槽的组件，<code>headerName</code> 是作用域插槽从内部提供的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">SlotComp</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>=<span class="hljs-string">&quot;&#123; headerName &#125;&quot;</span>&gt;</span>&#123;&#123; headerName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>&gt;</span>default slot<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">SlotComp</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>插槽简写方式 #</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">SlotComp</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>=<span class="hljs-string">&quot;&#123; headerName &#125;&quot;</span>&gt;</span>&#123;&#123; headerName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span>default slot<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span>footer<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">SlotComp</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>动态插槽</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">SlotComp</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #[<span class="hljs-attr">slotName</span>]&gt;</span>动态插槽<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">SlotComp</span>&gt;<br><br><br><span class="hljs-comment">// js</span><br><span class="hljs-keyword">const</span> slotName = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;header&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><p><a href="https://cn.vuejs.org/guide/components/async.html#basic-usage">官方描述</a></p><blockquote><p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从加载相关组件。</p></blockquote><h2 id="Vue2-用法"><a href="#Vue2-用法" class="headerlink" title="Vue2 用法"></a>Vue2 用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>异步组件测试<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">async-component</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;showAsync&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./main.js&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title class_">AsyncComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./async.js&#x27;</span>) <span class="hljs-comment">// 异步加载组件，页面需要时才加载 async.js 资源</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">showAsync</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">showAsync</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">showAsync</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着我们创建一个组件 <code>async.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;h3&gt;我是局部注册的 异步组件&lt;/h3&gt;</span><br><span class="hljs-string">  `</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们回到页面上，因为 <code>showAsync</code> 刚开始是 false，所以 <code>AsyncComponent</code> 不会显示出来。</p><p>打开控制台，会发现并没有加载 <code>async.js</code> 资源。</p><p>这时，我们点击 <code>toggle</code> 按钮，此时 network 显示加载了 <code>async.js</code> 资源，并且 <code>AsyncComponent</code> 组件的内容也显示出来了。</p><h2 id="Vue3-提供了-defineAsyncComponent-方法来实现异步加载组件："><a href="#Vue3-提供了-defineAsyncComponent-方法来实现异步加载组件：" class="headerlink" title="Vue3 提供了 defineAsyncComponent 方法来实现异步加载组件："></a>Vue3 提供了 <code>defineAsyncComponent</code> 方法来实现异步加载组件：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AsyncComp</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...从服务器获取组件</span><br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-comment">/* 获取到的组件 */</span>)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>ES 模块动态导入</code> 也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用。类似 Vite 和 Webpack 这样的构建工具也支持此语法 (并且会将它们作为打包时的代码分割点  <code>分包、性能优化</code>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AsyncComp</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span><br>  <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./components/MyComponent.vue&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure><p>最后得到的 AsyncComp 是一个外层包装过的组件，<code>仅在页面需要它渲染时</code> 才会调用加载内部实际组件的函数。</p><h2 id="顶层-await"><a href="#顶层-await" class="headerlink" title="顶层 await"></a>顶层 await</h2><p><code>&lt;script setup&gt;</code> 中可以使用顶层 await。结果代码会被编译成 <code>async setup()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">const</span> post = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api/post/1`</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> r.<span class="hljs-title function_">json</span>())<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="搭配-Suspense-组件使用"><a href="#搭配-Suspense-组件使用" class="headerlink" title="搭配 Suspense 组件使用"></a>搭配 Suspense 组件使用</h2><ol><li>定义异步组件 Sync.vue</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    Name: &#123;&#123; name &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> iTools <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/Tools&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> iTools.<span class="hljs-property">Axios</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;./sync-data.json&#x27;</span>) <span class="hljs-comment">// 定义在 public 下的json文件</span></span></span><br><span class="language-javascript"><span class="language-xml">name.<span class="hljs-property">value</span> = data.<span class="hljs-property">name</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过 <code>defineAsyncComponent</code> 动态导入 <code>Sync.vue</code> 组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Sync</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/components/Sync.vue&#x27;</span>))<br></code></pre></td></tr></table></figure><ol start="3"><li>使用 <code>Suspense</code> 内置组件</li></ol><p>在请求过程中，会一直显示 loading… 状态，真实项目中我们可以替换成骨架屏。当接口请求成功，才会显示 <code>Sync.vue</code> 的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Suspense</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Sync</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fallback</span>&gt;</span></span><br><span class="language-xml">    Loading...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Suspense</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>当我们使用了 defineAsyncComponent 动态导入组件，build 项目时，会单独将 Sync.vue 的 js 包拎出来，不会将其打包到index.js 中，通过拆包的方式，减少入口文件的大小，从而减少白屏的时间。</p><h1 id="Teleport-传送门"><a href="#Teleport-传送门" class="headerlink" title="Teleport 传送门"></a>Teleport 传送门</h1><p>将其插槽内容渲染到 DOM 中的另一个位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">TeleportProps</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 必填项。指定目标容器。</span><br><span class="hljs-comment">   * 可以是选择器或实际元素。</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">to</span>: string | <span class="hljs-title class_">HTMLElement</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当值为 `true` 时，内容将保留在其原始位置</span><br><span class="hljs-comment">   * 而不是移动到目标容器中。</span><br><span class="hljs-comment">   * 可以动态更改。</span><br><span class="hljs-comment">   */</span><br>  disabled?: boolean<br>&#125;<br><br><span class="hljs-comment">// examples</span><br>&lt;teleport to=<span class="hljs-string">&quot;#some-id&quot;</span> /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;.some-class&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;[data-teleport]&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="Mitt"><a href="#Mitt" class="headerlink" title="Mitt"></a>Mitt</h1><p>Vue 2可以支持$on，$off来实现event bus，但是 Vue3 已经不支持这些属性，不过Vue 3可以支持第三方event bus来实现事件通信，</p><p>这里使用 <code>mitt</code>，官方地址：<a href="https://github.com/developit/mitt">https://github.com/developit/mitt</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mitt&#x27;</span><br><br><span class="hljs-comment">// vue3挂载到全局</span><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$mitt</span> = <span class="hljs-title function_">mitt</span>()<br></code></pre></td></tr></table></figure><h1 id="tsx"><a href="#tsx" class="headerlink" title="tsx"></a>tsx</h1><blockquote><p>安装插件 npm install @vitejs/plugin-vue-jsx -D</p></blockquote><p>安装如果失败，将 node 版本切换至 v14.16.0</p><p>使用插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> vueJsx <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue-jsx&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>(), <span class="hljs-title function_">vueJsx</span>()],<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>但是导入 .tsx 文件，TypeScript 会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 找不到模块“@/components/Foo”或其相应的类型声明。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Foo&#x27;</span> <span class="hljs-comment">// 省略了 .tsx 后缀</span><br><br><span class="hljs-comment">// 导入路径不能以“.tsx”扩展名结束。考虑改为导入“@/components/Bar.js”。</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Bar.tsx&#x27;</span><br></code></pre></td></tr></table></figure><p>配置 <code>tsconfig.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;baseUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;paths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@/*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/*&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>之后我们导入 tsx 类型的组件，就不要带上后缀了。</p><p><strong>编写 tsx 组件的3中方式</strong></p><ol><li><p>函数模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>TSX componen111t<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>options API 模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">compname</span>: <span class="hljs-string">&#x27;jsx comp&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;this.compname&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>setup 函数模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>interface <span class="hljs-title class_">IProps</span> &#123;<br>  name?: string;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>,<br>  &#125;,<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;on-click&#x27;</span>],<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props: IProps</span>) &#123;<br>    <span class="hljs-keyword">const</span> is = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// 返回渲染函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#123;is&#125;</span>&gt;</span>setup 渲染函数 &#123;props?.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>      )<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="tsx-slot-使用"><a href="#tsx-slot-使用" class="headerlink" title="tsx slot 使用"></a>tsx slot 使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Foo</span> = (<span class="hljs-params">_, &#123; slots &#125;</span>) =&gt; &#123;<br>  <br>  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123; slots?.header?.()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>slot comp<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123; slots.default ? slots.default() : &#x27;默认插槽&#x27; &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/&gt;</span></span>)<br>&#125;<br><br><br>&lt;<span class="hljs-title class_">Foo</span> v-slots=&#123;&#123;<br>  <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;setup default slot&#x27;</span><br>  &#125;,<br>  <span class="hljs-title function_">header</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;header&#x27;</span><br>  &#125;<br>&#125;&#125; /&gt;<br><br></code></pre></td></tr></table></figure><h1 id="自动引入"><a href="#自动引入" class="headerlink" title="自动引入"></a>自动引入</h1><blockquote><p>安装插件 unplugin-auto-import/vite  <a href="https://github.com/antfu/unplugin-auto-import">https://github.com/antfu/unplugin-auto-import</a></p></blockquote><p>注册完 plugin 之后，不再引入 <code>ref, reactive</code> 等等方法了，直接使用即可。</p><h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><blockquote><p>官网：<a href="https://cn.vuejs.org/guide/components/events.html">https://cn.vuejs.org/guide/components/events.html</a></p></blockquote><h2 id="v-model-在原生元素上的用法："><a href="#v-model-在原生元素上的用法：" class="headerlink" title="v-model 在原生元素上的用法："></a>v-model 在原生元素上的用法：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input v-model=<span class="hljs-string">&quot;searchText&quot;</span> /&gt;<br><br><span class="hljs-comment">// 等价于</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;searchText&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">/&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="在自定义组件上使用（Vue2）"><a href="#在自定义组件上使用（Vue2）" class="headerlink" title="在自定义组件上使用（Vue2）"></a>在自定义组件上使用（Vue2）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;Comp&#x27;</span>, &#123;<br>  <span class="hljs-attr">model</span>: &#123;<br>    <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;compValue&#x27;</span>,<br>    <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;change&#x27;</span> <span class="hljs-comment">// event值必须要和 $emit 中的第一个参数相同，不一定非得是 `chagne`，可以随便填</span><br>  &#125;,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">compValue</span>: &#123;<br>      <span class="hljs-attr">text</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input :value=&quot;compValue&quot; @input=&quot;$emit(&#x27;change&#x27;, $event.target.value)&quot; /&gt;  </span><br><span class="hljs-string">  `</span><br>&#125;)<br><br><span class="hljs-comment">// 使用</span><br>&lt;<span class="hljs-title class_">Comp</span> v-model=<span class="hljs-string">&quot;compValue&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="在自定义组件上使用（Vue3）"><a href="#在自定义组件上使用（Vue3）" class="headerlink" title="在自定义组件上使用（Vue3）"></a>在自定义组件上使用（Vue3）</h2><p>而当 v-model 使用在一个自定义组件上时，v-model 会被展开为如下的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue3</span><br>&lt;<span class="hljs-title class_">CustomInput</span><br>  :modelValue=<span class="hljs-string">&quot;searchText&quot;</span><br>  @<span class="hljs-attr">update</span>:modelValue=<span class="hljs-string">&quot;newValue =&gt; searchText = newValue&quot;</span><br>/&gt;<br><br><br><span class="hljs-comment">// 内部定义 props 和 方法</span><br><span class="hljs-keyword">const</span> props = defineProps&lt;&#123;<br>  <span class="hljs-attr">modelValue</span>: boolean<br>&#125;&gt;()<br><br><span class="hljs-keyword">const</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>])<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-title function_">emits</span>(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, !props.<span class="hljs-property">modelValue</span>)<br></code></pre></td></tr></table></figure><p>当然，我们也可以给 <code>v-model</code> 指定一个参数，不使用默认的 <code>modelValue</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">MyComponent</span> v-<span class="hljs-attr">model</span>:title=<span class="hljs-string">&quot;bookTitle&quot;</span> /&gt;<br><br><span class="hljs-comment">// 定义 props</span><br><span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;title&#x27;</span>])<br><span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;update:title&#x27;</span>])<br></code></pre></td></tr></table></figure><p>我们还可以绑定多个 v-model:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">UserName</span><br>  v-<span class="hljs-attr">model</span>:first-name=<span class="hljs-string">&quot;first&quot;</span><br>  v-<span class="hljs-attr">model</span>:last-name=<span class="hljs-string">&quot;last&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h1><p>Vue 是异步渲染，data 改变之后，DOM不会立刻渲染</p><p><code>$nextTick</code> 表示在 DOM 渲染之后触发，以获取最新的 DOM 节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><blockquote><p><a href="https://cn.vuejs.org/guide/reusability/custom-directives.html">https://cn.vuejs.org/guide/reusability/custom-directives.html</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myDirective = &#123;<br>  <span class="hljs-comment">// 在绑定元素的 attribute 前</span><br>  <span class="hljs-comment">// 或事件监听器应用前调用</span><br>  <span class="hljs-title function_">created</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 在元素被插入到 DOM 前调用</span><br>  <span class="hljs-title function_">beforeMount</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 在绑定元素的父组件</span><br>  <span class="hljs-comment">// 及他自己的所有子节点都挂载完成后调用</span><br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 绑定元素的父组件更新前调用</span><br>  <span class="hljs-title function_">beforeUpdate</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 在绑定元素的父组件</span><br>  <span class="hljs-comment">// 及他自己的所有子节点都更新后调用</span><br>  <span class="hljs-title function_">updated</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 绑定元素的父组件卸载前调用</span><br>  <span class="hljs-title function_">beforeUnmount</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 绑定元素的父组件卸载后调用</span><br>  <span class="hljs-title function_">unmounted</span>(<span class="hljs-params">el, binding, vnode, prevVnode</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div v-<span class="hljs-attr">example</span>:foo.<span class="hljs-property">bar</span>=<span class="hljs-string">&quot;baz&quot;</span>&gt;<br><br><span class="hljs-comment">// binding 参数会是一个这样的对象：</span><br>&#123;<br>  <span class="hljs-attr">arg</span>: <span class="hljs-string">&#x27;foo&#x27;</span>,<br>  <span class="hljs-attr">modifiers</span>: &#123; <span class="hljs-attr">bar</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">value</span>: <span class="hljs-comment">/* `baz` 的值 */</span>,<br>  <span class="hljs-attr">oldValue</span>: <span class="hljs-comment">/* 上一次更新时 `baz` 的值 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="全局函数或变量"><a href="#全局函数或变量" class="headerlink" title="全局函数或变量"></a>全局函数或变量</h1><p>在 Vue2 中，我们经常将全局用到的函数定义在 Vue 的 prototype 上，在 Vue3 中已经不这样使用了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$env</span> = <span class="hljs-string">&#x27;dev&#x27;</span><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$filters</span> = &#123;<br>  format&lt;T&gt;(<span class="hljs-attr">str</span>: T): string &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">trim</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用的时候，不需要导入什么，直接在 .vue 文件使用即可:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;env &#123;&#123;$env&#125;&#125;&lt;/div&gt;<br><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getCurrentInstance</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app?.<span class="hljs-property">proxy</span>?.<span class="hljs-property">$filters</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;getCurrentInstance&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在组件中使用全局的变量或者函数时，会出现 ts 报错，这时我们需要去声明它的类型:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;vue&#x27;</span> &#123;<br>  <span class="hljs-keyword">export</span> interface <span class="hljs-title class_">ComponentCustomProperties</span> &#123;<br>    <span class="hljs-attr">$filters</span>: &#123;<br>      format&lt;T&gt;(<span class="hljs-attr">str</span>: T): string,<br>    &#125;,<br>    <span class="hljs-attr">$env</span>: string,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h1><blockquote><p>一个插件可以是一个拥有 install() 方法的对象，也可以直接是一个安装函数本身。</p></blockquote><p>插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：</p><ol><li><p>通过 app.component() 和 app.directive() 注册一到多个全局组件或自定义指令。</p></li><li><p>通过 app.provide() 使一个资源可被注入进整个应用。</p></li><li><p>向 app.config.globalProperties 中添加一些全局实例属性或方法</p></li></ol><p>以一个全局的 <code>Loading</code> 组件为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Loading/index.ts</span><br><br><span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">App</span>, <span class="hljs-title class_">VNode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createVNode, render &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Loading</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  install (<span class="hljs-attr">app</span>: <span class="hljs-title class_">App</span>) &#123;<br>    <span class="hljs-comment">// Loading 需要转成 VNode</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">VNode</span>: <span class="hljs-title class_">VNode</span> = <span class="hljs-title function_">createVNode</span>(<span class="hljs-title class_">Loading</span>)<br><br>    <span class="hljs-comment">// 将组件挂在到某个元素下</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-title class_">VNode</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>)<br><br>    <span class="hljs-comment">// Loading 组件通过 defineExpose 方法，暴露内部方法会在 exposed 字段上</span><br><br>    app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$loading</span> = &#123;<br>      <span class="hljs-attr">onShow</span>: <span class="hljs-title class_">VNode</span>.<span class="hljs-property">component</span>?.<span class="hljs-property">exposed</span>?.<span class="hljs-property">onShow</span>,<br>      <span class="hljs-attr">onHide</span>: <span class="hljs-title class_">VNode</span>.<span class="hljs-property">component</span>?.<span class="hljs-property">exposed</span>?.<span class="hljs-property">onHide</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Loading 组件内部实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onHide&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../assets/imgs/loading.gif&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref, reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onShow</span> = (<span class="hljs-params"></span>) =&gt; show.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onHide</span> = (<span class="hljs-params"></span>) =&gt; show.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 暴露内部方法供外部调用</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineExpose</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  onShow,</span></span><br><span class="language-javascript"><span class="language-xml">  onHide,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.loading</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#1f2123</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: absolute;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这样我们就可以在任何地方使用 全局 Loading 了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// setup</span><br><span class="hljs-keyword">const</span> instance = <span class="hljs-title function_">getCurrentInstance</span>()<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">showLoading</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  instance?.<span class="hljs-property">proxy</span>?.<span class="hljs-property">$loading</span>.<span class="hljs-title function_">onShow</span>()<br>&#125;<br><br><span class="hljs-comment">// or 直接在 template 中使用</span><br>&lt;button @click=<span class="hljs-string">&quot;$loading.onShow&quot;</span>&gt;show loading&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>如果调用 $loading 报ts错误，我们可以声明全局类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;vue&#x27;</span> &#123;<br>  <span class="hljs-keyword">export</span> interface <span class="hljs-title class_">ComponentCustomProperties</span> &#123;<br>    <span class="hljs-attr">$loading</span>: &#123;<br>      <span class="hljs-title function_">onShow</span>(): <span class="hljs-keyword">void</span>;<br>      <span class="hljs-title function_">onHide</span>(): <span class="hljs-keyword">void</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Scoped原理-amp-样式穿透"><a href="#Scoped原理-amp-样式穿透" class="headerlink" title="Scoped原理 &amp; 样式穿透"></a>Scoped原理 &amp; 样式穿透</h1><ol><li>给 HTML DOM节点加一个不重复的 data 属性（形如: data-v-xxxxx），来表示它的唯一性</li><li>在每句 CSS 选择器的末尾，加一个当前组件的 data 属性选择器，来私有化样式</li><li>如果组件内部包含其他组件，只会给其他组件的最外层标签加上当前组件的 data 属性.</li></ol><p>想要直接修改开源组件的样式，大概率是失败的，解决方案就是要使用样式穿透</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">/deep/ <span class="hljs-selector-class">.input</span> &#123;<br>  ...<br>&#125;<br><br>// or<br><br>:<span class="hljs-built_in">deep</span>(.input) &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="css新特性"><a href="#css新特性" class="headerlink" title="css新特性"></a>css新特性</h1><h2 id="插槽选择器"><a href="#插槽选择器" class="headerlink" title="插槽选择器"></a>插槽选择器</h2><p>我们在使用插槽时，如何在子组件中修改插槽内容的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:slotted</span>(<span class="hljs-selector-class">.p-footer</span>) &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义全局样式"><a href="#定义全局样式" class="headerlink" title="定义全局样式"></a>定义全局样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">:<span class="hljs-built_in">global</span>(div) &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="动态-css"><a href="#动态-css" class="headerlink" title="动态 css"></a>动态 css</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// js</span><br><span class="hljs-keyword">const</span> color = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;red&#x27;</span>)<br><span class="hljs-keyword">const</span> font = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;24px&#x27;</span>,<br>  <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">&#x27;bold&#x27;</span>,<br>&#125;)<br><br><span class="hljs-comment">// css</span><br>.<span class="hljs-property">box</span> &#123;<br>  <span class="hljs-attr">color</span>: v-<span class="hljs-title function_">bind</span>(color);<br>  font-<span class="hljs-attr">size</span>: v-<span class="hljs-title function_">bind</span>(<span class="hljs-string">&#x27;font.fontSize&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模块化-css"><a href="#模块化-css" class="headerlink" title="模块化 css"></a>模块化 css</h2><p>给 style 标签加上 module 属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">// template<br>// 如果有多个，就写成数组形式<br>&lt;<span class="hljs-selector-tag">div</span> :class=<span class="hljs-string">&quot;[$style.box]&quot;</span>&gt;<br>  模块 css<br>&lt;/div&gt;<br><br>// css<br>&lt;style module&gt;<br>.box &#123;<br>  <span class="hljs-attribute">color</span>: red<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><code>$style</code> 是固定的写法，如果不想用这个变量，我们可以指定 <code>module=&quot;myStyle&quot;</code> 。</p><p>我们还可以通过 <code>useCssModule</code> 获取当前组件下的样式类名</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// 默认</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">class</span> = <span class="hljs-symbol">useCssModule</span>()<br><span class="hljs-symbol">const</span> <span class="hljs-symbol">class</span> = <span class="hljs-symbol">useCssModule</span>(&#x27;$<span class="hljs-symbol">style</span>&#x27;)<br><br>// 如果指定了 <span class="hljs-symbol">module</span><br><span class="hljs-symbol">const</span> <span class="hljs-symbol">class</span> = <span class="hljs-symbol">useCssModule</span>(&#x27;<span class="hljs-symbol">myStyle</span>&#x27;)<br></code></pre></td></tr></table></figure><h1 id="集成-Tailwind-CSS"><a href="#集成-Tailwind-CSS" class="headerlink" title="集成 Tailwind CSS"></a>集成 Tailwind CSS</h1><blockquote><p><a href="https://blog.csdn.net/qq1195566313/article/details/124951311?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167109189716782427434983%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=167109189716782427434983&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124951311-null-null.nonecase&amp;utm_term=tailwind&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/qq1195566313/article/details/124951311?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167109189716782427434983%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=167109189716782427434983&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124951311-null-null.nonecase&amp;utm_term=tailwind&amp;spm=1018.2226.3001.4450</a></p></blockquote><p>安装 vscode 提示插件 <code>Tailwind CSS IntelliSense</code></p><h1 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; h &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Btn</span> = (<span class="hljs-params">props, ctx</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<br>    <span class="hljs-attr">class</span>: [...],<br>    <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      ctx.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;on-click&#x27;</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    &#125;,<br>  &#125;, ctx.<span class="hljs-property">slots</span>.<span class="hljs-title function_">default</span>())<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/u012961419/article/details/124299803">Vue3+Vite+Ts 项目实战 01 Vite 创建项目、ESLint+TS+GitCommit配置、Vue3新特性介绍</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>JS,Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高性能渲染十万条数据(虚拟列表)</title>
    <link href="/post/virtual-list.html"/>
    <url>/post/virtual-list.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在工作中，有时会遇到需要一些不能使用分页方式来加载列表数据的业务情况，对于此，我们称这种列表叫做长列表。比如，在一些外汇交易系统中，前端会实时的展示用户的持仓情况(收益、亏损、手数等)，此时对于用户的持仓列表一般是不能分页的。</p><p><code>时间分片</code> 提到了可以使用时间分片的方式来对长列表进行渲染，但这种方式更适用于列表项的DOM结构十分简单的情况。本文会介绍使用虚拟列表的方式，来同时加载大量数据。</p><p>当我们渲染10w条数据时，其实主要是的时间花费在 <code>Recalculate Style</code> 和 <code>Layout</code> 上</p><ul><li>Recalculate Style：样式计算，浏览器根据css选择器计算哪些元素应该应用哪些规则，确定每个元素具体的样式。</li><li>Layout：布局，知道元素应用哪些规则之后，浏览器开始计算它要占据的空间大小及其在屏幕的位置。</li></ul><p><img src="/img/render-10w-data.jpg" alt=""></p><p>在实际的工作中，列表项必然不会像例子中仅仅只由一个li标签组成，必然是由复杂DOM节点组成的。</p><p>那么可以想象的是，当列表项数过多并且列表项结构复杂的时候，同时渲染时，会在<code>Recalculate Style</code>和<code>Layout</code>阶段消耗大量的时间。</p><p>而<code>虚拟列表</code>就是解决这一问题的一种实现。</p><h1 id="什么是虚拟列表"><a href="#什么是虚拟列表" class="headerlink" title="什么是虚拟列表"></a>什么是虚拟列表</h1><p>虚拟列表其实是按需显示的一种实现，即只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p><p>假设有1万条记录需要同时渲染，我们屏幕的可见区域的高度为1000px,而列表项的高度为50px，则此时我们在屏幕中最多只能看到20个列表项，那么在首次渲染的时候，我们只需加载20条即可。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15195cf16a558~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>说完首次加载，再分析一下当滚动发生时，我们可以通过计算当前滚动值得知此时在屏幕可见区域应该显示的列表项。</p><p>假设滚动发生，滚动条距顶部的位置为150px,则我们可得知在可见区域内的列表项为第4项至`第13项。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>虚拟列表的实现，实际上是在首屏加载的时候，只加载 <code>可视区域</code> 内需要的列表项，当滚动发生时，通过计算动态获得可视区域内的列表项，并将非可视区域内存在的列表项删除。</p><ul><li>计算当前可视区域<code>起始数据</code>索引（startIndex）</li><li>计算当前可视区域<code>结束数据</code>索引（endIndex）</li><li>计算当前可视区域的数据，并渲染到页面中</li><li>计算startIndex对应的数据在整个列表中的偏移位置startOffset并设置到列表上</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>由于只是对可视区域内的列表项进行渲染，所以为了保持列表容器的高度并可正常的触发滚动，将Html结构设计成如下结构：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list-container&quot;</span> @<span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;scrollEvent($event)&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 所有数据的总高度 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list-phantom&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 可视区区域，可以当做滑块看待 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; transform: getTransform &#125;&quot;</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 每一项数据 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;items&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list-item&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in visibleData&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; height: itemSize + &#x27;px&#x27;, lineHeight: itemSize + &#x27;px&#x27; &#125;&quot;</span></span><br><span class="hljs-tag">      &gt;</span><br>        &#123;&#123; item.value &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着，监听infinite-list-container的 <code>scroll事件</code>，获取滚动位置 <code>scrollTop</code>。</p><ul><li>列表总高度 <code>listHeight = listData.length * itemSize</code></li><li>可显示的列表项数 <code>visibleCount = Math.ceil(screenHeight / itemSize)</code></li><li>数据的起始索引 <code>startIndex = Math.floor(scrollTop / itemSize)</code></li><li>数据的结束索引 <code>endIndex = startIndex + visibleCount</code></li><li>列表显示数据为 <code>visibleData = listData.slice(startIndex,endIndex)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">scrollEvent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//当前滚动位置</span><br>  <span class="hljs-keyword">let</span> scrollTop = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">list</span>.<span class="hljs-property">scrollTop</span>;<br><br>  <span class="hljs-comment">//此时的开始索引（向下取整），itemSize 是 100</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(scrollTop / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>);<br><br>  <span class="hljs-comment">//此时的结束索引</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">end</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">visibleCount</span>;<br><br>  <span class="hljs-comment">//此时的偏移量</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">startOffset</span> = scrollTop - (scrollTop % <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p>当滚动后，由于 <code>渲染区域</code> 相对于 <code>可视区域</code> 已经发生了偏移，此时我需要获取一个 <code>偏移量startOffset</code>，通过样式控制将渲染区域偏移至可视区域中，当用户在滑动时，渲染区域就会根据 <code>startOffset</code> 计算出偏移量，渲染区域就会一直在可视区域内呈现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">startOffset</span> = scrollTop - (scrollTop % <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>);<br><br><span class="hljs-comment">// computed</span><br><span class="hljs-comment">//偏移量对应的style</span><br><span class="hljs-title function_">getTransform</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`translate3d(0,<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.startOffset&#125;</span>px,0)`</span>;<br>&#125;,<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">html</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#app</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">VirtualList</span> <span class="hljs-attr">:listData</span>=<span class="hljs-string">&quot;state.data&quot;</span> <span class="hljs-attr">:itemSize</span>=<span class="hljs-string">&quot;100&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>VirtualList comp.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;VirtualList&quot;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">//所有列表数据</span><br>    <span class="hljs-attr">listData</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Array</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> [],<br>    &#125;,<br>    <span class="hljs-comment">//每项高度</span><br>    <span class="hljs-attr">itemSize</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">200</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">//列表总高度</span><br>    <span class="hljs-title function_">listHeight</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">listData</span>.<span class="hljs-property">length</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>;<br>    &#125;,<br>    <span class="hljs-comment">//可显示的列表项数</span><br>    <span class="hljs-title function_">visibleCount</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 向上取整: Math.ceil(13.06) =&gt; 14，表示整个屏幕，可以放 14 条数据</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">screenHeight</span> / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>);<br>    &#125;,<br>    <span class="hljs-comment">//偏移量对应的style</span><br>    <span class="hljs-title function_">getTransform</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`translate3d(0,<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.startOffset&#125;</span>px,0)`</span>;<br>    &#125;,<br>    <span class="hljs-comment">//获取真实显示列表数据</span><br>    <span class="hljs-title function_">visibleData</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">listData</span>.<span class="hljs-title function_">slice</span>(<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span>,<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">end</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">listData</span>.<span class="hljs-property">length</span>)<br>      );<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this.$el 表示当前组件的根节点，这里是 infinite-list-container</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">screenHeight</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">clientHeight</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">end</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">visibleCount</span>;<br>  &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">//可视区域高度</span><br>      <span class="hljs-attr">screenHeight</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-comment">//偏移量</span><br>      <span class="hljs-attr">startOffset</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-comment">//起始索引</span><br>      <span class="hljs-attr">start</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-comment">//结束索引</span><br>      <span class="hljs-attr">end</span>: <span class="hljs-literal">null</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">scrollEvent</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">//当前滚动位置</span><br>      <span class="hljs-keyword">let</span> scrollTop = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">list</span>.<span class="hljs-property">scrollTop</span>;<br><br>      <span class="hljs-comment">//此时的开始索引（向下取整），itemSize 是 100</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(scrollTop / <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>);<br>      <span class="hljs-comment">//此时的结束索引</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">end</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">start</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">visibleCount</span>;<br><br>      <span class="hljs-comment">//此时的偏移量</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">startOffset</span> = scrollTop - (scrollTop % <span class="hljs-variable language_">this</span>.<span class="hljs-property">itemSize</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list-container&quot;</span> @<span class="hljs-attr">scroll</span>=<span class="hljs-string">&quot;scrollEvent($event)&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 所有数据的总高度 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list-phantom&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 可视区区域，可以当做滑块看待 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; transform: getTransform &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;items&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infinite-list-item&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in visibleData&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; height: itemSize + &#x27;px&#x27;, lineHeight: itemSize + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        &#123;&#123; item.value &#125;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.infinite-list-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">overflow</span>: auto;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  -webkit-<span class="hljs-attribute">overflow</span>-scrolling: touch;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.infinite-list-phantom</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: absolute;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.infinite-list</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: absolute;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.infinite-list-item</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#555</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-sizing</span>: border-box;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h1 id="列表项动态高度"><a href="#列表项动态高度" class="headerlink" title="列表项动态高度"></a>列表项动态高度</h1><p>在之前的实现中，列表项的高度是固定的，因为高度固定，所以可以很轻易的获取列表项的整体高度以及滚动时的显示数据与对应的偏移量。</p><p>而实际应用的时候，当列表中包含文本之类的可变内容，会导致 <code>列表项的高度并不相同</code>。</p><p>比如这样：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519f1e121be9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>在虚拟列表中应用动态高度的解决方案一般有如下三种：</p><blockquote><p>1.对组件属性itemSize进行扩展，支持传递类型为数字、数组、函数</p></blockquote><ul><li>可以是一个固定值，如 100，此时列表项是固高的</li><li>可以是一个包含所有列表项高度的数据，如 [50, 20, 100, 80, …]</li><li>可以是一个根据列表项索引返回其高度的函数：(index: number): number</li></ul><p>这种方式虽然有比较好的灵活度，但仅适用于可以预先知道或可以通过计算得知列表项高度的情况，依然无法解决列表项高度由内容撑开的情况。</p><blockquote><p>2.将列表项 <code>渲染到屏幕外</code>，对其高度进行测量并缓存，然后再将其渲染至可视区域内。</p></blockquote><p>由于 <code>预先渲染至屏幕外</code>，再渲染至屏幕内，这导致渲染成本增加一倍，这对于数百万用户在低端移动设备上使用的产品来说是不切实际的。</p><blockquote><p>3.以预估高度先行渲染，然后获取真实高度并缓存。</p></blockquote><p>这是可以选择的实现方式，可以避免前两种方案的不足。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高性能渲染十万条数据(时间分片)</title>
    <link href="/post/time-fragment.html"/>
    <url>/post/time-fragment.html</url>
    
    <content type="html"><![CDATA[<h1 id="最粗暴的做法（一次性渲染"><a href="#最粗暴的做法（一次性渲染" class="headerlink" title="最粗暴的做法（一次性渲染"></a>最粗暴的做法（一次性渲染</h1><p>JS的运行时间为<code>187ms</code>，还是蛮快的，但是最终渲染完成后的总时间确是<code>2844ms</code>，中间会白屏一段时间。</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 记录任务开始时间</span><br><span class="hljs-keyword">let</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-comment">// 插入十万条数据</span><br><span class="hljs-keyword">const</span> total = <span class="hljs-number">100000</span>;<br><span class="hljs-comment">// 获取容器</span><br><span class="hljs-keyword">let</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>);<br><span class="hljs-comment">// 将数据插入容器中</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; total; i++) &#123;<br>  <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>  li.<span class="hljs-property">innerText</span> = i<br>  ul.<span class="hljs-title function_">appendChild</span>(li);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;JS运行时间：&#x27;</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - now);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;总运行时间：&#x27;</span>, <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - now);<br>&#125;, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h1 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h1><p>页面的卡顿是由于同时渲染大量DOM所引起的，所以考虑将渲染过程分批进行，这里用到的就是 <code>setTimeout</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>);<br><span class="hljs-comment">// 插入十万条数据</span><br><span class="hljs-keyword">let</span> total = <span class="hljs-number">100000</span>;<br><span class="hljs-comment">// 一次插入 20 条</span><br><span class="hljs-keyword">let</span> once = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//总页数</span><br><span class="hljs-keyword">let</span> page = total / once<br><span class="hljs-comment">//每条记录的索引</span><br><span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//循环加载数据</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params">curTotal, curIndex</span>) &#123;<br>  <span class="hljs-keyword">if</span> (curTotal &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">//每页多少条</span><br>  <span class="hljs-keyword">let</span> pageCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(curTotal, once);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pageCount; i++) &#123;<br>      <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>      li.<span class="hljs-property">innerText</span> = curIndex + i + <span class="hljs-string">&#x27; : &#x27;</span> + ~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * total)<br>      ul.<span class="hljs-title function_">appendChild</span>(li)<br>    &#125;<br>    <span class="hljs-title function_">loop</span>(curTotal - pageCount, curIndex + pageCount)<br>  &#125;, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-title function_">loop</span>(total, index);<br></code></pre></td></tr></table></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/10/16d18aa76affbeb0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>页面加载的时间已经非常快了，每次刷新时可以很快的看到第一屏的所有数据，但是当我们快速滚动页面的时候，会发现页面出现闪屏或白屏的现象。</p><h2 id="为什么会出现闪屏现象呢"><a href="#为什么会出现闪屏现象呢" class="headerlink" title="为什么会出现闪屏现象呢"></a>为什么会出现闪屏现象呢</h2><p>首先，理清一些概念。FPS表示的是每秒钟画面更新次数。我们平时所看到的连续画面都是由一幅幅静止画面组成的，每幅画面称为一帧，FPS是描述帧变化速度的物理量。</p><p>大多数电脑显示器的刷新频率是60Hz，大概相当于每秒钟重绘60次，FPS为60frame/s，为这个值的设定受屏幕分辨率、屏幕尺寸和显卡的影响。</p><p>因此，当你对着电脑屏幕什么也不做的情况下，大多显示器也会以每秒60次的频率正在不断的更新屏幕上的图像。</p><p>为什么你感觉不到这个变化？</p><p>那是因为人的眼睛有视觉停留效应，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了，这中间只间隔了16.7ms(1000/60≈16.7)，所以会让你误以为屏幕上的图像是静止不动的。</p><p>而屏幕给你的这种感觉是对的，试想一下，如果刷新频率变成1次/秒，屏幕上的图像就会出现严重的闪烁，<br>这样就很容易引起眼睛疲劳、酸痛和头晕目眩等症状。</p><p>大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。<br>因此，最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms。</p><p>直观感受，不同帧率的体验：</p><ul><li>帧率能够达到 50 ～ 60 FPS 的动画将会相当流畅，让人倍感舒适；</li><li>帧率在 30 ～ 50 FPS 之间的动画，因各人敏感程度不同，舒适度因人而异；</li><li>帧率在 30 FPS 以下的动画，让人感觉到明显的卡顿和不适感；</li><li>帧率波动很大的动画，亦会使人感觉到卡顿。</li></ul><h2 id="简单聊一下-setTimeout-和闪屏现象"><a href="#简单聊一下-setTimeout-和闪屏现象" class="headerlink" title="简单聊一下 setTimeout 和闪屏现象"></a>简单聊一下 setTimeout 和闪屏现象</h2><ul><li><p>setTimeout的执行时间并不是确定的。在JS中，setTimeout任务被放进事件队列中，只有主线程执行完才会去检查事件队列中的任务是否需要执行，因此setTimeout的实际执行时间可能会比其设定的时间晚一些。</p></li><li><p>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。</p></li></ul><p>以上两种情况都会导致setTimeout的执行步调和屏幕的刷新步调不一致。</p><p>在setTimeout中对dom进行操作，必须要等到屏幕下次绘制时才能更新到屏幕上，如果两者步调不一致，就可能导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素，从而导致丢帧现象。</p><h1 id="使用-requestAnimationFrame"><a href="#使用-requestAnimationFrame" class="headerlink" title="使用 requestAnimationFrame"></a>使用 requestAnimationFrame</h1><p>与setTimeout相比，requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。</p><p>如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了<code>1000/75=13.3ms</code>，换句话说就是，<code>requestAnimationFrame</code> 的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。</p><p>将 setTimeout 替换成 requestAnimationFrame:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 其他 ...</span><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pageCount; i++)&#123;<br>    <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    li.<span class="hljs-property">innerText</span> = curIndex + i + <span class="hljs-string">&#x27; : &#x27;</span> + ~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * total)<br>    ul.<span class="hljs-title function_">appendChild</span>(li)<br>  &#125;<br>  <span class="hljs-title function_">loop</span>(curTotal - pageCount,curIndex + pageCount)<br>&#125;)<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/10/16d18aa76abe9fe3~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h1 id="使用-DocumentFragment"><a href="#使用-DocumentFragment" class="headerlink" title="使用 DocumentFragment"></a>使用 DocumentFragment</h1><blockquote><p>DocumentFragment，文档片段接口，表示一个没有父级文件的最小文档对象。它被作为一个轻量版的Document使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会触发DOM树的（重新渲染) ，且不会导致性能等问题。可以使用document.createDocumentFragment方法或者构造函数来创建一个空的DocumentFragment</p></blockquote><p>从MDN的说明中，我们得知DocumentFragments是DOM节点，但并不是DOM树的一部分，可以认为是存在内存中的，所以将子元素插入到文档片段时不会引起页面回流（什么是回流? 回流是会导致页面重新渲染的一些元素,从而影响性能）。</p><p>当append元素到document中时，被append进去的元素的样式表的计算是同步发生的，此时调用 getComputedStyle 可以得到样式的计算值。</p><p>而append元素到 documentFragment 中时，是不会计算元素的样式表，所以documentFragment 性能更优。当然现在浏览器的优化已经做的很好了，</p><p>当append元素到document中后，没有访问 getComputedStyle 之类的方法时，现代浏览器也可以把样式表的计算推迟到脚本执行之后。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 其他 ...</span><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> fragment = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>()<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pageCount; i++)&#123;<br>    <span class="hljs-keyword">let</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    li.<span class="hljs-property">innerText</span> = curIndex + i + <span class="hljs-string">&#x27; : &#x27;</span> + ~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * total)<br>    fragment.<span class="hljs-title function_">appendChild</span>(li)<br>  &#125;<br>  ul.<span class="hljs-title function_">appendChild</span>(fragment)<br>  <span class="hljs-title function_">loop</span>(curTotal - pageCount,curIndex + pageCount)<br>&#125;)<br><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES Module / Babel</title>
    <link href="/post/ESModule&amp;babel.html"/>
    <url>/post/ESModule&amp;babel.html</url>
    
    <content type="html"><![CDATA[<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><p>在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。</p><p>ES6在语言规格的层面上实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p><h2 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h2><blockquote><p>文件划分方式，约定每一个 js 文件就是一个独立的模块</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./lib.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 直接使用导入文件中的变量与方法</span></span><br><span class="language-javascript">  <span class="hljs-title function_">method1</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 模块成员可以被修改</span></span><br><span class="language-javascript">  count = <span class="hljs-number">2</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点：</p><ol><li>污染全局作用域</li><li>命名冲突</li><li>无法管理模块间的依赖关系</li><li>模块成员可以在外部直接修改</li></ol><h2 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h2><blockquote><p>命名空间，减少命名冲突</p></blockquote><p>每个文件中，通过一个命名对象来包裹所有的变量和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module a 相关的数据和方法</span><br><br><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;module a&#x27;</span>,<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-title function_">incCount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> ++<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：</p><ol><li>污染全局作用域</li><li>无法管理模块间的依赖关系</li><li>模块成员可以在外部直接修改</li></ol><h2 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h2><blockquote><p>IIFE（立即执行函数）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">;(<span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)&#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;moduleA&#x27;</span><br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">incCount</span>(<span class="hljs-params"></span>) &#123;<br>    count++<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">moduleA</span> = &#123;<br>    incCount<br>  &#125;<br>&#125;)(jQuery)<br></code></pre></td></tr></table></figure><p>通过闭包的方式，模块内部的变量只能被模块内部修改，外部无法修改。</p><p>通过 IIFE 的传参，我们可以传递一些依赖包给模块使用。</p><h1 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h1><ul><li><p>CommonJS（NodeJS）</p><ol><li>一个文件就是一个模块</li><li>每个模块都有单独的作用域</li><li>通过 module.exports 导出成员</li><li>通过 require 函数加载成员</li></ol></li></ul><p>以同步的方式加载模块，如果放在浏览器中，那么会出现大量的文件请求，有时候并不是立马就需要的文件也会被加载，从而造成性能问题，不适合在浏览器中使用。</p><ul><li><p>AMD（Asyncronous module definition）</p><p>异步的模块定义</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个模块</span><br><span class="hljs-comment">// 第二个参数表示当前模块的依赖项</span><br><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;module1&#x27;</span>, [<span class="hljs-string">&#x27;lodash&#x27;</span>, <span class="hljs-string">&#x27;./module2&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-string">&#x27;lodash&#x27;</span>, <span class="hljs-string">&#x27;module2&#x27;</span></span>) &#123;<br>  <br>  <span class="hljs-comment">// 导出成员，外部可以方法 start 方法</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">start</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// lodash</span><br><br>      <span class="hljs-title function_">module2</span>()<br>    &#125;<br>  &#125;<br>&#125;)<br><br>  <span class="hljs-comment">// 加载模块</span><br><br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module1&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">module1</span>) &#123;<br>    module1.<span class="hljs-title function_">start</span>()<br>  &#125;)<br></code></pre></td></tr></table></figure><ul><li><p>CMD规范（类似 CommonJS）</p></li><li><p>ES Modules（浏览器）</p></li></ul><h1 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特性：</p><ul><li>ES6的模块自动采用严格模式，不管有没有在模块头部加上＂use strict＂。</li><li>每个 ES Module 都运行在私有作用域中</li><li>ESM 是通过 CORS(跨域) 的方式去请求外部的 JS 资源的。（原 script 标签默认支持跨域）</li><li>ESM 的 script 标签会延迟执行脚本（类似标签的 defer 属性），等待网页渲染完成后，再执行。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 会比有 type=&quot;module&quot; 的script 先执行</span><br>&lt;script&gt;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&lt;/script&gt;<br><br><span class="hljs-comment">// 延迟执行</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"> <span class="hljs-comment">// 等同于加了 defer 属性</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><p>严格模式主要有以下限制：</p><ul><li>变量必须声明后再使用。</li><li>函数的参数不能有同名属性，否则报错。</li><li>不能使用with语句。</li><li>不能对只读属性赋值，否则报错。</li><li>不能使用前缀0表示八进制数，否则报错。</li><li>不能删除不可删除的属性，否则报错。</li><li>不能删除变量(delete prop)，会报错，只能删除属性(delete global[prop])。</li><li>eval不会在其外层作用域引入变量。</li><li>eval和arguments不能被重新赋值。</li><li>arguments不会自动反映函数参数的变化。</li><li>不能使用arguments.callee。</li><li>不能使用arguments.caller。</li><li>禁止this指向全局对象。</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈。</li><li>增加了保留字（比如protected、static和interface）。</li></ul><h2 id="export-amp-import"><a href="#export-amp-import" class="headerlink" title="export &amp; import"></a>export &amp; import</h2><p>模块功能主要由两个命令构成：export和import。</p><p>export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</p><p>如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> myName = <span class="hljs-string">&#x27;Hello_AlexCC&#x27;</span><br><br><span class="hljs-comment">// 组合导出</span><br><span class="hljs-keyword">const</span> myAge = <span class="hljs-number">18</span><br><span class="hljs-keyword">const</span> sayMe = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;myName&#125;</span>, and I&#x27;m <span class="hljs-subst">$&#123;myAge&#125;</span> years old!`</span>)<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>  myAge,<br>  sayMe<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在一个模块中先输入后输出同一个模块，import语句可以与export语句写在一起。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> &#123; sayName <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./someModule&#x27;</span><br><br><span class="hljs-comment">// 等价于</span><br><br><span class="hljs-keyword">import</span> &#123; sayName &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./someModule&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> sayName<br></code></pre></td></tr></table></figure><p>另外，ES7有一个提案(<a href="https://github.com/leebyron/ecmascript-more-export-from)，简化先输入后输出的写法，拿掉了输出时的大括号。">https://github.com/leebyron/ecmascript-more-export-from)，简化先输入后输出的写法，拿掉了输出时的大括号。</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 提案</span><br><span class="hljs-keyword">export</span> v <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mod&#x27;</span><br><br><span class="hljs-comment">// 现在</span><br><span class="hljs-keyword">export</span> &#123; v &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mod&#x27;</span><br></code></pre></td></tr></table></figure><p>import语句会执行所加载的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="模块整体加载"><a href="#模块整体加载" class="headerlink" title="模块整体加载"></a>模块整体加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./myModule&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="module-命令"><a href="#module-命令" class="headerlink" title="module 命令"></a>module 命令</h2><p>module命令可以取代import语句，达到整体输入模块的作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./myModule&#x27;</span><br><br>myModule.<span class="hljs-title function_">sayName</span>()<br></code></pre></td></tr></table></figure><h2 id="动态加载模块"><a href="#动态加载模块" class="headerlink" title="动态加载模块"></a>动态加载模块</h2><p>返回的是 Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./moduleA.js&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="ES6模块加载的实质"><a href="#ES6模块加载的实质" class="headerlink" title="ES6模块加载的实质"></a>ES6模块加载的实质</h2><p>ES6模块加载的机制与CommonJS模块完全不同。</p><p>CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是 <code>值的引用</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">incCount</span>(<span class="hljs-params"></span>) &#123;<br>  count++<br>&#125;<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; count, incCount &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./lib.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count) <span class="hljs-comment">// 1</span><br><br><span class="hljs-title function_">incCount</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>注意加上 type=”module”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ES-Module-in-NodeJS"><a href="#ES-Module-in-NodeJS" class="headerlink" title="ES Module in NodeJS"></a>ES Module in NodeJS</h2><p>如何在 Nodejs 中使用 ES module!</p><p>有两个步骤：</p><ol><li><code>.js</code> 后缀都改为 <code>.mjs</code></li><li>执行脚本时，加上 <code>node --experimental-modules main.mjs</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// node</span><br><br><span class="hljs-comment">// main.mjs</span><br><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span><br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li>在 node 环境中，我们可以使用 ES Module 导入 CommonJS 导出的成员</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// commonjs.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;commonjs exports foo&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// esmodule.js</span><br><span class="hljs-keyword">import</span> mod <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./commonjs.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mod.<span class="hljs-property">foo</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>在 node 环境中，CommonJS 中<code>不能</code>导入 ES Module 导出的成员</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mod = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./esmodule.js&#x27;</span>) <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h2 id="CommonJS-与-ES-Module-差异"><a href="#CommonJS-与-ES-Module-差异" class="headerlink" title="CommonJS 与 ES Module 差异"></a>CommonJS 与 ES Module 差异</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// CommonJS</span><br><br><span class="hljs-built_in">require</span> <span class="hljs-comment">// 加载模块函数</span><br><br><span class="hljs-variable language_">module</span> <span class="hljs-comment">// 模块对象</span><br><br><span class="hljs-built_in">exports</span> <span class="hljs-comment">// 导出对象别名 exports.name = &#x27;hello world&#x27;</span><br><br>__filename <span class="hljs-comment">// 当前文件的绝对路径</span><br><br>__dirname <span class="hljs-comment">// 当前文件所在目录</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES Module</span><br><br><span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span> <span class="hljs-comment">// 文件路径信息</span><br><br><span class="hljs-comment">// 可以通过内置模块 url 和 path 处理，拿到 __filename 和 __dirname</span><br><span class="hljs-keyword">import</span> &#123; fileURLToPath &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;url&#x27;</span><br><span class="hljs-keyword">import</span> &#123; dirname &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><br><span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br><span class="hljs-keyword">const</span> __dirname = <span class="hljs-title function_">dirname</span>(__filename)<br></code></pre></td></tr></table></figure><h2 id="高版本-NodeJS-已支持-ESM-Version-gt-12-10-0"><a href="#高版本-NodeJS-已支持-ESM-Version-gt-12-10-0" class="headerlink" title="高版本 NodeJS 已支持 ESM (Version &gt; 12.10.0)"></a>高版本 NodeJS 已支持 ESM (Version &gt; 12.10.0)</h2><p>不需要再写 <code>.mjs</code> 结尾了，直接 <code>.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br>&#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;module&quot;</span><br>&#125;<br><br><span class="hljs-comment">// 执行</span><br>node --experimental-modules main.<span class="hljs-property">js</span> <br></code></pre></td></tr></table></figure><p>加上 type module 配置之后，如果我们还想用 <code>CommonJS</code> 规范，发现会报错了。因为我们已经使用了 ESM。</p><p>如果继续使用 <code>CommonJS</code> 规范，那么就需要将 <code>.js</code> 改为 <code>.cjs</code>。</p><h2 id="ESM-in-NodeJS-（babel-兼容方案）"><a href="#ESM-in-NodeJS-（babel-兼容方案）" class="headerlink" title="ESM in NodeJS （babel 兼容方案）"></a>ESM in NodeJS （babel 兼容方案）</h2><blockquote><p>yarn add @babel/node @babel/preset-env –save-dev</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 通过 babel-node 命令执行脚本</span><br>yarn babel-node main.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><p>要注意的是，<code>babel/core</code> 并不会转换我们的代码，转换代码的工作交给 babel 内置的插件去实现的。也就是说，我们需要一个插件，去转换 ES6 中的一个新特性。</p><img src="/img/babel.jpg" /><p>而 <code>@bable/preset-env</code> 是插件的集合，所以不需要每个插件都安装一遍。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 命令行使用</span><br>yarn babel-node main.<span class="hljs-property">js</span> --presets=@bable/preset-env<br></code></pre></td></tr></table></figure><p>结合 babel 配置文件使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/presets-env&quot;</span>]<br>&#125;<br><br>yarn babel-node main.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><p>既然 <code>@babel/preset-env</code> 是插件的集合，而我不想要那么多，只是想处理 <code>ESM</code> 怎么办呢？</p><p>我们卸载掉 <code>@babel/preset-env</code>，安装 <code>@babel/plugin-transform-modules-commonjs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/plugin-transform-modules-commonjs&quot;</span>]<br>&#125;<br><br>yarn babel-node main.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><blockquote><p>编译器</p></blockquote><p>主要用于将ES6版本的JS代码转换为ES5等向后兼容的JS代码，从而使代码可以运行在低版本浏览器或其他环境中。</p><blockquote><p>npm install –save-dev babel-core babel-preset-es2015 babel-preset-latest –registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p></blockquote><p>配置文件 <code>.babelrc</code>（或者 babel.config.js || .babelrc.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>], <span class="hljs-comment">// 安装包的别名，用来处理最新的 ES6 语法</span><br>  <span class="hljs-string">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>安装 <code>babel-cli</code>，命令行编译工具，依赖 <code>babel/core</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save-dev babel-cli <br></code></pre></td></tr></table></figure><p>查看 babel 版本（npx 是新版 NodeJS 附带的命令）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npx babel --version <span class="hljs-comment">// ===== node_modules/.bin/babel --version </span><br><br><span class="hljs-comment">// ====&gt; 6.26.0 (babel-core 6.26.3)</span><br></code></pre></td></tr></table></figure><p>到这里，我们就可以使用 babel 来编译js 文件了。创建一个 babel.js 文件，写入一些 es6 的语法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// babel.js</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * <span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-keyword">const</span> count = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>打开命令行工具：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx babel babel.<span class="hljs-property">js</span> -o compiled.<span class="hljs-property">js</span> <span class="hljs-comment">// 等效 node_modules/.bin/babel babel.js -o compiled.js </span><br></code></pre></td></tr></table></figure><p>转化后的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * <span class="hljs-number">3</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> count = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><h2 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h2><p>Babel默认只转换新的JS语法（syntax），而不转换新的API（Promise、Map）。如果只是做语法转换，Promise 是不会被降级的，在低版本的浏览器中可能无法使用。</p><p>引入 Polyfill，为当前环境提供一个“垫片”。所谓“垫片”，是指垫平不同浏览器之间差异的东西。polyfill提供了全局的ES6对象及通过修改原型链Array.prototype等来补充对实例的实现。</p><h2 id="babel-版本"><a href="#babel-版本" class="headerlink" title="babel 版本"></a>babel 版本</h2><p>Babel版本主要是Babel 6和Babel 7这两个版本。</p><p>提到Babel版本的时候，通常指的是@babel/core这个Babel核心包的版本。</p><p>Babel 7的npm包都存放在babel域下，即在安装npm包的时候，我们安装的是名称以@babel/开头的npm包，如@babel/cli、@babel/core等。而在Babel 6中，我们安装的包名是babel-cli、babel-core等以babel-开头的npm包。其实它们本质上是一样的，都是Babel官方提供的cli命令行工具和core核心包。在平时开发和学习的过程中，碰到@babel/和babel-时应该认识到它俩是作用相同、内容接近的包，只是版本不一样而已。</p><h2 id="babel-配置文件"><a href="#babel-配置文件" class="headerlink" title="babel 配置文件"></a>babel 配置文件</h2><blockquote><p>指定编译的规则。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">.<span class="hljs-property">babelrc</span> || babel.<span class="hljs-property">config</span>.<span class="hljs-property">js</span> || .<span class="hljs-property">babelrc</span>.<span class="hljs-property">js</span> || package.<span class="hljs-property">json</span>（配置 babel 属性，配置项都是 一样的）<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><br>&#123;<br>  ...<br><br>  <span class="hljs-attr">babel</span>: &#123;<br>    <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>, <span class="hljs-string">&quot;react&quot;</span>],<br>    <span class="hljs-string">&quot;plugin&quot;</span>: [<span class="hljs-string">&quot;transform-class-properties&quot;</span>]<br>  &#125;,<br><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐使用后缀名是js的配置文件来进行配置，因为可以使用该文件做一些逻辑处理，适用性更强。</p><h2 id="插件-amp-预设"><a href="#插件-amp-预设" class="headerlink" title="插件 &amp; 预设"></a>插件 &amp; 预设</h2><p>plugin代表插件，preset代表预设。通常每个插件或预设都是一个npm包。</p><p>Babel的插件实在太多了，假如只配置插件数组，那我们前端工程要把ES2015、ES2016、ES2017……下的所有插件都写到配置项里，这样的Babel配置文件会非常臃肿。</p><p>preset预设就是帮我们解决这个问题的。预设是一组Babel插件的集合，通俗的说法就是插件包，例如babel-preset-es2015就是所有处理ES2015的二十多个Babel插件的集合。这样我们就不用写一大堆插件配置项了，只需要用一个预设代替就可以。另外，预设也可以是插件和其他预设的集合。</p><p>Babel官方已经针对常用的环境做了如下这些preset包。</p><p>1）@babel/preset-env.</p><p>2）@babel/preset-react.</p><p>3）@babel/preset-typescript.</p><p>4）@babel/preset-stage-0.</p><p>5）@babel/preset-stage-1.</p><h2 id="插件与预设的简称"><a href="#插件与预设的简称" class="headerlink" title="插件与预设的简称"></a>插件与预设的简称</h2><p>如果插件的npm包名称的前缀为babel-plugin-，则可以省略其前缀。</p><p>如果npm包名称的前缀带有npm作用域@，如@org/babel-plugin-xxx，则短名称可以写成@org/xxx。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;babel-plugin-transform-decorators-legacy&quot;</span>]<br>&#125;<br><br><span class="hljs-comment">// =====</span><br><br>&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-decorators-legacy&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>预设的短名称规则与插件的类似，预设npm包名称的前缀为babel-preset-或作用域@xxx/babel-preset-xxx的可以省略掉babel-preset-。</p><h2 id="插件和预设执行顺序"><a href="#插件和预设执行顺序" class="headerlink" title="插件和预设执行顺序"></a>插件和预设执行顺序</h2><p>plugins插件数组和presets预设数组是有顺序要求的。如果两个插件或预设都要处理同一个代码片段，那么会根据插件和预设的顺序来执行。规则如下:</p><p>1）插件比预设先执行。</p><p>2）插件执行顺序是插件数组元素从前向后依次执行。</p><p>3）预设执行顺序是预设数组元素从后向前依次执行。</p><h2 id="预设的选择"><a href="#预设的选择" class="headerlink" title="预设的选择"></a>预设的选择</h2><p>babel-preset-latest，在Babel 6时期，是所有年代preset的集合，在Babel 6最后一个版本中，它是babel-preset-es2015、babel-preset-es2016、babel-preset-es2017的集合。</p><p>@babel/preset-env<code>包含了babel-preset-latest的功能，并对其进行了增强</code>，现在@babel/preset-env完全可以替代babel-preset-latest。</p><p>Babel 6 中是babel-preset-env，Babel 7版本开始，@babel/preset-env。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// babel 6</span><br>npm install babel-preset-env --save-dev<br><br><span class="hljs-comment">// .babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;env&quot;</span>]<br>&#125;<br><br><span class="hljs-comment">// babel 7</span><br>npm install @babel/preset-env --save-dev<br><br><span class="hljs-comment">// .babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>总结起来，Babel官方提供的预设，我们实际会用到的其实就只有四个。</p><p>1）@babel/preset-env.</p><p>2）@babel/preset-flow.</p><p>3）@babel/preset-react.</p><p>4）@babel/preset-typescript.</p><h2 id="插件的选择"><a href="#插件的选择" class="headerlink" title="插件的选择"></a>插件的选择</h2><p>Babel 7 官方有九十多个插件，不过其中大多数都已经整合在@babel/preset-env和@babel/preset-react等预设里了，我们在开发的时候直接使用预设就可以。</p><p>目前比较常用的插件只有@babel/plugin-transform-runtime。</p><h2 id="browserslist"><a href="#browserslist" class="headerlink" title="browserslist"></a>browserslist</h2><p>在 package.json 中经常遇到这个配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><br>&#123;<br>  <span class="hljs-string">&quot;browserslist&quot;</span>: [<br>    <span class="hljs-string">&quot;&gt; 1%&quot;</span>,<br>    <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>上面配置的含义是，该项目工程的目标环境是市场份额大于1%的浏览器并且不考虑IE 8及以下的IE浏览器。</p><p>browserslist叫作目标环境配置表，除了写在package.json文件里，也可以单独写在工程目录下的.browserslistrc文件里。</p><p>我们写一个含有箭头函数的 js 文件，如果我们在browserslist里指定目标环境是Chrome 60浏览器，再来看一下转换结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br>&#123;<br>  <span class="hljs-string">&quot;browserslist&quot;</span>: [<span class="hljs-string">&quot;chrome 60&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现转换后的代码仍然是箭头函数，因为Chrome 60浏览器已经实现了箭头函数语法，所以不会转换成ES5的函数定义语法。</p><h2 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="@babel/runtime"></a>@babel/runtime</h2><p>我们写个 js 文件，里面包含 es6 的 class 语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后执行 babel 命令，查看转换后的结果 <code>npx babel babel.js -o compiled.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">var</span> _createClass = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">function</span> <span class="hljs-title function_">defineProperties</span>(<span class="hljs-params">target, props</span>) &#123; <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; props.<span class="hljs-property">length</span>; i++) &#123; <span class="hljs-keyword">var</span> descriptor = props[i]; descriptor.<span class="hljs-property">enumerable</span> = descriptor.<span class="hljs-property">enumerable</span> || <span class="hljs-literal">false</span>; descriptor.<span class="hljs-property">configurable</span> = <span class="hljs-literal">true</span>; <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-keyword">in</span> descriptor) descriptor.<span class="hljs-property">writable</span> = <span class="hljs-literal">true</span>; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, descriptor.<span class="hljs-property">key</span>, descriptor); &#125; &#125; <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">Constructor, protoProps, staticProps</span>) &#123; <span class="hljs-keyword">if</span> (protoProps) <span class="hljs-title function_">defineProperties</span>(<span class="hljs-title class_">Constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, protoProps); <span class="hljs-keyword">if</span> (staticProps) <span class="hljs-title function_">defineProperties</span>(<span class="hljs-title class_">Constructor</span>, staticProps); <span class="hljs-keyword">return</span> <span class="hljs-title class_">Constructor</span>; &#125;; &#125;();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_classCallCheck</span>(<span class="hljs-params">instance, Constructor</span>) &#123; <span class="hljs-keyword">if</span> (!(instance <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Constructor</span>)) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot;Cannot call a class as a function&quot;</span>); &#125; &#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">_classCallCheck</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-title class_">Person</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">_createClass</span>(<span class="hljs-title class_">Person</span>, [&#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;sayName&quot;</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>  &#125;]);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Person</span>;<br>&#125;();<br></code></pre></td></tr></table></figure><p>可以看到，转换后的代码上部增加了好几个函数声明，这些函数是Babel转码时注入的，我们称之为辅助函数。@babel/preset-env在做语法转换的时候，注入了这些函数声明，以便语法转换后使用。</p><p>但这样做存在一个问题。在我们正常地进行前端工程开发的时候，少则有几十个JS文件，多则有上千个。如果每个文件里都使用了class类语法，那么会导致每个转换后的代码上部都会注入这些相同的函数声明。这会导致我们用构建工具打包出来的包体积非常大。</p><p>那么应该怎么办呢？一个思路就是，我们把这些函数声明都放在一个npm包里，需要使用的时候直接从这个包里引入我们的文件。这样即使有上千个文件，也会从相同的包里引入这些函数。使用Webpack这一类的构建工具进行打包时，我们只需要引入一次npm包里的函数，这样就做到了复用，减小了包的体积。</p><p><code>@babel/runtime</code> 就是上面说的这个npm包，<strong>@babel/runtime把所有语法转换会用到的辅助函数都集中在了一起。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// babbel 6</span><br>npm install babel-runtime --save-dev <span class="hljs-comment">// /node_modules/babel-runtime/helpers/createClass.js</span><br><br><span class="hljs-comment">// babel 7</span><br>npm install @babel/runtime@<span class="hljs-number">7.12</span><span class="hljs-number">.5</span> --save-dev<br></code></pre></td></tr></table></figure><p>然后到node_modules目录下看一下这个包的结构，找到 _classCallCheck、_defineProperties与_createClass这三个辅助函数的位置，我们直接引入即可。</p><p>这时，我们就可以替换转换后自动创建的方法，而是使用 @babel/runtime/helpers 中已有的方法。</p><p>不过，这么多辅助函数要一个个记住并手动引入，是很难做到的。这时Babel插件 <code>@babel/plugin-transform-runtime</code> 就可以用来帮我们解决这个问题。</p><h2 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a>@babel/plugin-transform-runtime</h2><p>辅助函数的自动引入。</p><p>@babel/plugin-transform-runtime有三大作用，其中之一就是自动移除语法转换后内联的辅助函数（inline Babel helpers），而是使用@babel/runtime/helpers里的辅助函数来替代，这样就减少了我们手动引入的麻烦。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// babel6</span><br>npm install babel-plugin-transform-runtime --save-dev<br><br><span class="hljs-comment">// babel 7</span><br>npm install @babel/plugin-transform-runtime@<span class="hljs-number">7.12</span><span class="hljs-number">.10</span> --save-dev<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span>] <span class="hljs-comment">// babel 6: &quot;babel-plugin-transform-runtime&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还是上面的例子，我们再看看转换后的结果，会发现插件已经自动帮我们处理了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">var</span> _classCallCheck2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;babel-runtime/helpers/classCallCheck&quot;</span>);<br><br><span class="hljs-keyword">var</span> _classCallCheck3 = <span class="hljs-title function_">_interopRequireDefault</span>(_classCallCheck2);<br><br><span class="hljs-keyword">var</span> _createClass2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;babel-runtime/helpers/createClass&quot;</span>);<br><br><span class="hljs-keyword">var</span> _createClass3 = <span class="hljs-title function_">_interopRequireDefault</span>(_createClass2);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_interopRequireDefault</span>(<span class="hljs-params">obj</span>) &#123; <span class="hljs-keyword">return</span> obj &amp;&amp; obj.<span class="hljs-property">__esModule</span> ? obj : &#123; <span class="hljs-attr">default</span>: obj &#125;; &#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;<br>    (<span class="hljs-number">0</span>, _classCallCheck3.<span class="hljs-property">default</span>)(<span class="hljs-variable language_">this</span>, <span class="hljs-title class_">Person</span>);<br>  &#125;<br><br>  (<span class="hljs-number">0</span>, _createClass3.<span class="hljs-property">default</span>)(<span class="hljs-title class_">Person</span>, [&#123;<br>    <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;sayName&quot;</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>  &#125;]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Person</span>;<br>&#125;();<br></code></pre></td></tr></table></figure><p>实际进行前端开发时，我们除了安装@babel/runtime包，基本也会安装@babel/plugin-transform-runtime这个Babel插件。</p><h1 id="Babel-原理与插件开发"><a href="#Babel-原理与插件开发" class="headerlink" title="Babel 原理与插件开发"></a>Babel 原理与插件开发</h1><p>Babel的转码过程主要由三个阶段组成：解析（parse）、转换（transform）和生成（generate）。这三个阶段分别由@babel/parser、@babel/core和@babel/generator来完成。</p><ol><li><strong>解析阶段</strong></li></ol><p>该阶段由Babel读取源码并生成抽象语法树（AST），该阶段由两部分组成：词法分析与语法分析。</p><p>词法分析会将字符串形式的代码转换成tokens流，语法分析会将tokens流转换成AST。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;hello AlexCc&quot;</span><br></code></pre></td></tr></table></figure><p>AST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">-<br>#<span class="hljs-number">1</span><br>  <span class="hljs-attr">type</span>: <span class="hljs-title class_">VariableDeclaration</span><br>  declarations<br>    #<span class="hljs-number">1</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">VariableDeclarator</span><br>    id<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Identifier</span><br>      <span class="hljs-attr">name</span>: name<br>    init<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Literal</span><br>      <span class="hljs-attr">value</span>: hello <span class="hljs-title class_">AlexCc</span><br>      <span class="hljs-attr">raw</span>: <span class="hljs-string">&quot;hello AlexCc&quot;</span><br>    <span class="hljs-attr">kind</span>: <span class="hljs-keyword">const</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>转换阶段</strong></li></ol><p>完成了解析工作，生成了AST，AST是一个树状的JSON结构。接下来就可以通过Babel插件对该树状结构执行修改操作，修改完成后就得到了新的AST。</p><ol start="3"><li><strong>生成阶段</strong></li></ol><p>通过转换阶段的工作，我们得到了新的AST。在生成阶段，我们对AST的树状JSON结构进行还原操作，生成新的JS代码，通常这就是我们需要的ES5代码。</p><h2 id="Babel-插件开发"><a href="#Babel-插件开发" class="headerlink" title="Babel 插件开发"></a>Babel 插件开发</h2><blockquote><p>babel-handbook</p><p><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</a></p></blockquote><p>开发Babel转码插件的重点是在第二阶段（转换阶段），在这一阶段我们要从AST上找出需要转换的节点，改成我们需要的形式，最后在生成阶段把AST变回JS代码。</p><p>插件模板结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">&#123; types: t &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;pluginName&#x27;</span>,<br>    <span class="hljs-attr">visitor</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设我们有这样一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dog = <span class="hljs-string">&#x27;is dog&#x27;</span><br></code></pre></td></tr></table></figure><p>现在我想将 dog 变成喵咪。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">&#123; types: t &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">visitor</span>: &#123;<br>      <span class="hljs-title class_">Identifier</span>(path, state) &#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-property">node</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;dog&#x27;</span>) &#123;<br>          path.<span class="hljs-property">node</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;cat&#x27;</span><br>          path.<span class="hljs-property">parent</span>.<span class="hljs-property">init</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;is cat&#x27;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-keyword">var</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cat = <span class="hljs-string">&#x27;is cat&#x27;</span>;<br></code></pre></td></tr></table></figure><p>我们编写Babel插件的主要工作就是修改<code>visitor</code>对象，该对象是遍历AST各个节点的方法。</p><p>在上面的插件里，要把变量名dog修改为cat，于是我们修改了visitor.Identifier方法，那我们如何知道要修改的是Identifier方法呢？</p><p>Babel原理里讲过Babel转码的三个阶段：解析阶段、转换阶段和生成阶段，我们编写的Babel插件实际上是在执行第二个阶段（转换阶段）的工作，该工作需要前一个阶段解析工作先完成。在解析阶段，我们得到了转码前代码的AST树状结构信息，该AST上会有Identifier等节点信息，我们编写插件的时候参考该AST的信息即可。</p><img src="/img/ast.jpg" /><p>接着看Identifier方法，可以看到它有两个参数path和state，visitor中的每个方法都接收这两个参数，path代表路径。最后我们判断path上节点信息name是不是dog，是的话把它修改为cat即可。</p><p>同理，我们也可以修改 <code>const</code>、<code>value</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">&#123; types: t &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">visitor</span>: &#123;<br>      <span class="hljs-title class_">Identifier</span>(path, state) &#123;<br>        path.<span class="hljs-property">node</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;cat&#x27;</span><br>        path.<span class="hljs-property">parent</span>.<span class="hljs-property">init</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;is cat&#x27;</span><br>      &#125;,<br>      <span class="hljs-title class_">VariableDeclaration</span>(path, state) &#123;<br>        <span class="hljs-keyword">if</span> (path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span> === <span class="hljs-string">&#x27;const&#x27;</span>) &#123;<br>          path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span> = <span class="hljs-string">&#x27;let&#x27;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-title class_">Literal</span>(path, state) &#123;<br>        <span class="hljs-comment">// 修改 value</span><br>        path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;is caaat...&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插件传参"><a href="#插件传参" class="headerlink" title="插件传参"></a>插件传参</h2><p>给插件传递参数，注意第一个成员变成了数组，数组的第二项是参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;plugins&quot;</span>: [[<span class="hljs-string">&quot;./plugin.js&quot;</span>, &#123;<br>    <span class="hljs-string">&quot;ES5&quot;</span>: <span class="hljs-literal">false</span><br>  &#125;]]<br>&#125;<br></code></pre></td></tr></table></figure><p>在插件中，我们可以通过 <code>state.opts</code> 获取到参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// plugin.js</span><br><br>...<br><span class="hljs-title class_">VariableDeclaration</span>(path, state) &#123;<br>  <span class="hljs-keyword">if</span> (state.<span class="hljs-property">opts</span>.<span class="hljs-property">ES5</span> === <span class="hljs-literal">true</span> &amp;&amp; [<span class="hljs-string">&#x27;let&#x27;</span>, <span class="hljs-string">&#x27;const&#x27;</span>].<span class="hljs-title function_">includes</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span>)) &#123;<br>    path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span> = <span class="hljs-string">&#x27;var&#x27;</span><br>  &#125;<br>&#125;,<br>...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ESM、babel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出TypeScript</title>
    <link href="/post/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript.html"/>
    <url>/post/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript.html</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="d-ts-和-declare-是干嘛用的"><a href="#d-ts-和-declare-是干嘛用的" class="headerlink" title=".d.ts 和 declare 是干嘛用的"></a>.d.ts 和 declare 是干嘛用的</h2><p>如果一个文件有扩展名 <code>.d.ts</code>，则表示它是一个声明文件，可以用来声明全局的类型定义和接口，或者是其它模块。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// global.d.ts</span><br><br><span class="hljs-comment">// 声明接口</span><br>declare interface <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br><br><span class="hljs-comment">// 声明类型 (别名)</span><br>declare type <span class="hljs-title class_">TName</span> = string;<br><br><span class="hljs-comment">// 声明模块</span><br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.css&#x27;</span>;<br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.less&#x27;</span>;<br>declare <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;*.png&#x27;</span>;<br><br><span class="hljs-comment">// 拓展 window 属性，在 window 对象上显式设置属性</span><br>declare interface <span class="hljs-title class_">Window</span> &#123;<br>  <span class="hljs-title class_">MyNameSpace</span>: any<br>&#125;<br></code></pre></td></tr></table></figure><p>但是也不是说创建了.d.ts文件，里面声明的东西就能生效了，毕竟归根到底也是.ts文件，需要预编译，所以需要在tsconfig.json文件里面的include数组里面添加 <code>global.d.ts</code> 文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/**/*.ts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/**/*.d.ts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/**/*.tsx&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/**/*.vue&quot;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p><code>.d.ts</code> 文件中的顶级声明必须以 “declare” 或 “export” 修饰符开头。通过<code>declare</code>声明的类型或者变量或者模块，在<code>include</code>包含的文件范围内，都可以直接引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .vue setup / .ts</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">me</span>: <span class="hljs-title class_">Person</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alex.cheng&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong><br><code>.d.ts</code>文件顶级声明<code>declare</code>最好不要跟<code>export</code>同级使用，不然在其他<code>ts</code>文件引用这个<code>.d.ts</code>的内容的时候，就需要手动import导入了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// global.d.ts</span><br><span class="hljs-keyword">export</span> type <span class="hljs-title class_">TName</span> = string;<br><br><span class="hljs-comment">// 这个时候，外部 ts 就无法直接使用 Person 了，需要引入 import &#123; Person &#125; from &#x27;../global.d.ts&#x27;</span><br><span class="hljs-keyword">export</span> declare interface <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="给对象分配动态（未知）属性"><a href="#给对象分配动态（未知）属性" class="headerlink" title="给对象分配动态（未知）属性"></a>给对象分配动态（未知）属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-attr">o</span>: &#123; [<span class="hljs-attr">key</span>: string]: any &#125; = &#123;&#125;<br><br><span class="hljs-comment">// 使用 ts 内置工具 Record，效果同上</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">o</span>: <span class="hljs-title class_">Record</span>&lt;string, any&gt; = &#123;&#125;<br><br>interface <span class="hljs-title class_">IPerson</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&lt;string, any&gt; &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  age?: number;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">me1</span>: <span class="hljs-title class_">IPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alex&#x27;</span>,<br>  <span class="hljs-attr">hair</span>: <span class="hljs-string">&#x27;black&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="interface-和-type-有什么区别"><a href="#interface-和-type-有什么区别" class="headerlink" title="interface 和 type 有什么区别"></a>interface 和 type 有什么区别</h2><ol><li><p><code>接口</code>和<code>类型别名</code>都可以用来描述对象的形状或函数签名。</p></li><li><p>与<code>接口类型</code>不一样的是，<code>类型别名</code>可以用于一些其他类型，比如原始类型、联合类型（<code>|</code>）和元组。</p></li><li><p>接口和类型别名都能够被扩展，但语法有所不同。此外，接口和类型别名不是互斥的。接口可以扩展类型别名，而反过来是不行的。</p><p><code>interface</code> 扩展（接口、类型）使用 <code>extends</code> 关键字，类型别名扩展（接口、类型）使用的是 <code>交叉类型（&amp;）</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 接口扩展</span><br>interface <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">name</span>: string;<br>&#125;<br>interface <span class="hljs-title class_">IMe</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IPerson</span> &#123;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br><br><span class="hljs-comment">// 类型扩展</span><br>type <span class="hljs-title class_">TPerson</span> = &#123;<br>  <span class="hljs-attr">name</span>: string;<br>&#125;<br>type <span class="hljs-title class_">TMe</span> = <span class="hljs-title class_">TPerson</span> &amp; &#123;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类可以以相同的方式实现(<code>implements</code>)接口或类型别名，但类不能实现使用类型别名定义的联合类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Error:</span><br>type <span class="hljs-title class_">PartialPoint</span> = &#123; <span class="hljs-attr">x</span>: number; &#125; | &#123; <span class="hljs-attr">y</span>: number; &#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomePartialPoint</span> implements <span class="hljs-title class_">PartialPoint</span> &#123; <span class="hljs-comment">// 类只能实现具有静态已知成员的对象类型或对象类型的交集。ts(2422)</span><br>  x = <span class="hljs-number">1</span>;<br>  y = <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">// Success</span><br>type <span class="hljs-title class_">PartialPoint</span> = &#123; <span class="hljs-attr">x</span>: number; &#125; &amp; &#123; <span class="hljs-attr">y</span>: number; &#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomePartialPoint</span> implements <span class="hljs-title class_">PartialPoint</span> &#123;<br>  x = <span class="hljs-number">1</span>;<br>  y = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>与类型别名不同，接口可以定义多次，会被自动合并为单个接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">IMerge</span> &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>;<br>&#125;<br>interface <span class="hljs-title class_">IMerge</span> &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">ab</span>: <span class="hljs-title class_">IMerge</span> = &#123;&#125;; <span class="hljs-comment">// 类型“&#123;&#125;”缺少类型“IMerge”中的以下属性: a, bts(2739)</span><br><br><br><span class="hljs-comment">// Error: 标识符“TOne”重复。ts(2300)</span><br>type <span class="hljs-title class_">TOne</span> = string;<br>type <span class="hljs-title class_">TOne</span> = number;<br></code></pre></td></tr></table></figure></li></ol><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><ol><li>typeof</li><li>instanceof</li><li>in</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6872111128135073806">TS 学习指南</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://jkchao.github.io/typescript-book-chinese/">深入理解TypeScript</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript TS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端开发实践</title>
    <link href="/post/app-h5.html"/>
    <url>/post/app-h5.html</url>
    
    <content type="html"><![CDATA[<h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><p>现在 Android App大多嵌入了 Android Webview 组件进行 Hybrid 开发，它具备开发周期短、灵活性好的优点，但是缺点也很明显，加载速度慢 &amp; 消耗流量。引起缺点的主要原因如下：</p><ol><li>js解析效率，以及手机硬件设备的性能</li><li>页面资源的下载（图片、js文件、css文件）</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6844903673697402887">Android Webview H5 秒开方案实现</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>RN H5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何编写高标准的 JavaScript 代码</title>
    <link href="/post/js-advice.html"/>
    <url>/post/js-advice.html</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>你是否曾经为了提供一个简单的应用解决方案而彻夜地查看源代码？<br>你是否曾经为了理解某个框架而冥思苦想、阅览群书？<br>你是否曾经为了提升0.1s的DOM性能而对多种实现方案进行严格测试和对比？<br>你是否曾经为了避免兼容问题而遍寻高手共同“诊治”？</p><p>跟我一起，专注高质量 <code>JavaScript</code> 代码，少出 <code>Bug🐛</code>，早下班 !</p><blockquote><p>期望为读者带来如下帮助 📚：</p></blockquote><p>  ❑ 能写出简单、清晰、高效的代码。<br>  ❑ 能搭建一个稳定、健壮、快捷的应用框架。<br>  ❑ 能回答一个困扰很多人的技术问题。<br>  ❑ 能修复一个应用开发中遇到的大的Bug。<br>  ❑ 能非常熟悉某个开源产品。<br>  ❑ 能提升客户端应用性能。</p><h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><p>代码量少，运行速度不一定快；代码量多，运行速度也不一定慢。</p><h3 id="减少全局变量"><a href="#减少全局变量" class="headerlink" title="减少全局变量"></a>减少全局变量</h3><ol><li><p>多个全局变量都追加在一个名称空间下，将显著降低与其他应用程序产生冲突的概率</p> <figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> namespace = &#123;&#125;<br><br>namespace.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;my namespace&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>使用闭包体将信息隐藏，它是另一种有效减少“全局污染”的方法。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sayName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;closure&#x27;</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(name)<br>  &#125;<br>&#125;()<br></code></pre></td></tr></table></figure></li><li><p>作用域控制着变量与参数的可见性及生命周期。</p><p> JavaScript支持函数作用域，定义在函数中的参数和变量在函数外部是不可见的，并且在一个函数中的任何位置定义的变量在该函数中的任何地方都可见。它不仅减少了名称冲突，并且提供了自动内存管理。</p></li><li><p>ES6 模块化编程中每个 js 文件内部定义的变量，外部无法获取。如果外部需要模块内部变量，通过 export 导出。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">var</span> windowA = <span class="hljs-string">&#x27;window a&#x27;</span><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">windowA</span>) <span class="hljs-comment">// 输出 &#x27;window a&#x27;</span><br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> moduleA = <span class="hljs-string">&#x27;module a&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">moduleA</span>) <span class="hljs-comment">// 输出 undefined</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h3 id="谨慎JS数据类型"><a href="#谨慎JS数据类型" class="headerlink" title="谨慎JS数据类型"></a>谨慎JS数据类型</h3><p>在自动转换数据类型时，JavaScript一般遵循：如果某个类型的值被用于需要其他类型的值的环境中，JavaScript就自动将这个值转换成所需要的类型。</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>慎用JavaScript类型自动转换，注意<code>自动转换规则</code>:</p><ol><li><p>如果把非空对象用在逻辑运算环境中，则对象被转换为true。此时的对象包括所有类型的对象，即使是值为false的包装对象也被转换为true。</p></li><li><p>果把对象用在数值运算环境中，则对象会被自动转换为数字，如果转换失败，则返回值为NaN。</p></li><li><p>当数组被用在数值运算环境中时，数组将根据包含的元素来决定转换的值。如果数组为空数组，则被转换为数值0。如果数组仅包含一个数字元素，则被转换为该数字的数值。如果数组包含多个元素，或者仅包含一个非数字元素，则返回NaN。</p><p>🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 对象</span><br><span class="hljs-keyword">const</span> obj = &#123;&#125;<br>obj &amp;&amp; <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span><br>obj + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-string">&#x27;[object Object]1&#x27;</span><br><br>obj.<span class="hljs-property">valueOf</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">99</span> &#125;<br>obj + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">100</span><br><br><span class="hljs-comment">// 数组自动转换规则</span><br>+[] &gt;&gt; <span class="hljs-number">0</span><br>+[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span><br>+[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><ol><li><p><code>typeof</code><br>对于任何变量来说，使用typeof运算符总是以字符串的形式返回以下6种类型之一：<br>❑ “number”<br>❑ “string”<br>❑ “boolean”<br>❑ “object”<br>❑ “function”<br>❑ “undefined”</p><p>令人疑惑的是，在使用 <code>typeof</code> 检测null值时，返回的是“object”，而不是“null”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> &gt;&gt; <span class="hljs-string">&#x27;object&#x27;</span><br><br><span class="hljs-keyword">typeof</span> [] &gt;&gt; <span class="hljs-string">&#x27;object&#x27;</span><br><br><span class="hljs-keyword">typeof</span> &#123;&#125; &gt;&gt; <span class="hljs-string">&#x27;object&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><code>instanceof</code></p><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的<code>原型链</code>上。</p><p>这个在判断对象时存在一些不确定性，来看下例子：</p><p>🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span> &gt;&gt; <span class="hljs-literal">true</span><br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> &gt;&gt; <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>再看一个🌰:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span><br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;hello child&#x27;</span>)<br><br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span> &gt;&gt; <span class="hljs-literal">true</span><br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> &gt;&gt; <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如果是判断数组呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> &gt;&gt; <span class="hljs-literal">true</span><br><br>[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> &gt;&gt; <span class="hljs-literal">true</span><br><br><span class="hljs-comment">// 当然这种方式存在不确定性，我们可以使用 Array.isArray() 方法来判断</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>([]) &gt;&gt; <span class="hljs-literal">true</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(&#123;&#125;) &gt;&gt; <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>从上面例子可以看出，使用 <code>instanceof</code> 来判断时存在种种不确定性，只要出现在原型链上的对象都会返回 <code>true</code>，使用的时候还需要着重注意！</p><p>为什么会这样，想必大家应该想起来了！</p><p><strong>Object类是所有对象类型的的父类!</strong></p></li><li><p><code>toString() 方法</code></p><blockquote><p>每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 “[object type]”，其中 type 是对象的类型。</p></blockquote><p>toString() 方法，它定义在 Object 的原型对象上，对象在调用时会返回一个表示该对象的字符串。</p><p>使用 <code>toString()</code> 方法检测对象类型是最安全、最准确的。调用toString()方法把对象转换为字符串，然后通过检测字符串中是否包含数组所特有的标志字符可以确定对象的类型。</p><p>为什么说 <code>toString</code> 方法用来检测对象类型是最安全、最准确的，我们慢慢来看吧~</p><p>先看看在对象上直接使用 <code>toString</code>会是什么结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><br>obj.<span class="hljs-title function_">toString</span>() &gt;&gt; <span class="hljs-string">&#x27;[object Object]&#x27;</span><br><br><span class="hljs-comment">// 如果是数组的话，则输出字符串</span><br>arr.<span class="hljs-title function_">toString</span>() &gt;&gt; <span class="hljs-string">&#x27;1,2&#x27;</span><br><br><br><span class="hljs-comment">// 当然我们可以重写/覆盖原型链上的 toString 方法</span><br>obj.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;overwrite&#x27;</span><br>&#125;<br>obj.<span class="hljs-title function_">toString</span>() &gt;&gt; <span class="hljs-string">&#x27;overwrite&#x27;</span><br></code></pre></td></tr></table></figure><p>既然 toString 方法定义在原型对象上，我们看看如果单独调用它，会是什么结果呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">toString</span>() &gt;&gt; <span class="hljs-string">&#x27;[object Object]&#x27;</span><br></code></pre></td></tr></table></figure><p>如果通过 <code>call/apply</code> 方法，改变 <code>toString</code> 方法内部的 <code>this</code> 执行，又会是什么结果呢?</p><p>看到如下结果，我相信这绝对可以完美 cover 住项目里面所有的类型判断了！所以说它是最安全、最准确的类型判断，没有异议吧😏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123;&#125;) &gt;&gt; <span class="hljs-string">&#x27;[object Object]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]) &gt;&gt; <span class="hljs-string">&#x27;[object Array]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;) &gt;&gt; <span class="hljs-string">&#x27;[object Function]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;&#x27;</span>) &gt;&gt; <span class="hljs-string">&#x27;[object String]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-string">&#x27;[object Number]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>) &gt;&gt; <span class="hljs-string">&#x27;[object Boolean]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>) &gt;&gt; <span class="hljs-string">&#x27;[object Null]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>) &gt;&gt; <span class="hljs-string">&#x27;[object Undefined]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>() &gt;&gt; <span class="hljs-string">&#x27;[object Undefined]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) &gt;&gt; <span class="hljs-string">&#x27;[object Date]&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-regexp">/at/</span>) &gt;&gt; <span class="hljs-string">&#x27;[object RegExp]&#x27;</span><br><br></code></pre></td></tr></table></figure><p>那么它是如何做到的呢，我们来扒一扒它的原理！在 <code>toString</code> 方法被调用时，会执行以下几个操作步骤:</p><ol><li>获取this指向的那个对象的<code>[[Class]]</code>属性的值。（<code>call/apply</code> 改变 this 指向）</li><li>计算出三个字符串”[object “、 第一步的操作结果、 以及 “]” 连接后的新字符串。</li><li>返回第二步的操作结果，也就是类似 <code>&#39;[object Type]&#39;</code> 这种格式字符串。</li></ol><p>需要注意的是，对象的<code>[[Class]]</code>属性是无法直接访问的，它一个内部属性，所有的对象(原生对象和宿主对象)都拥有该属性，且不能被任何人修改。在规范中，<code>[[Class]]</code>是这么定义的：<code>内部属性</code>描述。</p><p>如果要单独或者对象的 <code>[[Class]]</code>，我们可以这样做:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> targetObj = []<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(targetObj).<span class="hljs-title function_">slice</span>(<span class="hljs-number">8</span>, -<span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-string">&#x27;Array&#x27;</span><br></code></pre></td></tr></table></figure><p>既然它如此好用，难道就没有缺点吗？</p><p>答案是当然有的，毕竟凡事都不可能那么绝对的嘛！</p><p>那么缺点是什么呢？<br>第一，<code>toString()</code> 会进行装箱操作，产生很多临时对象。（装箱就是将基本类型的数据，通过引用类型包装起来，从而可以使用引用类上的方法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 你肯定不能这样用</span><br><span class="hljs-number">1.</span><span class="hljs-title function_">toString</span>() &gt;&gt; <span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Invalid</span> or unexpected token<br><br><span class="hljs-comment">// 你必须这样用</span><br>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toString</span>() &gt;&gt; <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>第二，无法区分自定义对象类型，用来判断这类对象时，返回的都是<code>Object</code>，这样我们就需要通过 <code>instanceof</code> 来判断了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(p) &gt;&gt; <span class="hljs-string">&#x27;[object Object]&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>JavaScript解释器强制约定字符串在堆区存储的数据是不可变的，也就是说，JavaScript解释器强制约定字符串在堆区存储的数据是不可变的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript, ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hooks</title>
    <link href="/post/react-hooks.html"/>
    <url>/post/react-hooks.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p></blockquote><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><h1 id="Hook-规则"><a href="#Hook-规则" class="headerlink" title="Hook 规则"></a>Hook 规则</h1><ol><li>只在最顶层使用 Hook</li><li>只在 React 函数中调用 Hook。（或：在自定义 Hook 中调用其他 Hook）</li></ol><h1 id="使用-useCallback、useMemo、memo-做性能优化"><a href="#使用-useCallback、useMemo、memo-做性能优化" class="headerlink" title="使用 useCallback、useMemo、memo 做性能优化"></a>使用 useCallback、useMemo、memo 做性能优化</h1><p>尽可能的保证组件不去发生变化，发生变化的因素有：<code>state、props、context</code>。</p><p>那么 <code>React</code> 是如何比较这三者的呢？ 答案是 <code>内存地址</code>。</p><p>比如说，对比一个 <code>function</code>，对比的就是这个函数在内存中的地址，通过地址的判断，从而判断 props 是否发生了改变。</p><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><blockquote><p><a href="https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate">https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate</a></p></blockquote><p>React.memo 包裹一个组件，来对它的 props 进行浅比较。等效于 PureComponent，但它只比较 props。（也可以通过第二个参数指定一个<code>自定义的比较函数</code>来比较新旧 props。如果函数返回 true，就会跳过更新。）</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 不使用 memo，每一次 setCount，都会造成 Child 组件重新 render</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Child</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>Child component<span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count =&gt; count + 1)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-comment">// 通过 memo 包裹后，Child 组件不会再重新 render了。</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>Child component<span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;)<br></code></pre></td></tr></table></figure><p>当 memo 感知 props 没有发生改变时，不会重新 render 组件。如果传入 count 进来，Child组件就会重新 render。</p><p>总结：</p><ol><li>如果我们将 setCount 当做 prop 传入进来，Child 不会重新render（<code>因为 setCount 在内存中的地址没有发生改变</code>）</li><li>如果传入我们自己定义的方法 (fn)进来，Child会重新 render，因为 Demo 组件每次更新 count 后，重新生成了 fn 函数。</li><li>只是传了个 fn ，不想让 Child 组件更新怎么办？那就要用到 <code>useCallback</code> 钩子了</li></ol><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 只有当 count 发生变化时，才会重新计算</span><br><span class="hljs-keyword">const</span> computedCount = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> count * <span class="hljs-number">2</span><br>&#125;, [count])<br></code></pre></td></tr></table></figure><p><code>useMemo</code> 也允许你跳过一次子节点的昂贵的重新渲染，比如组件初始化时，需要一次大量的计算，后续就不会再改变了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">&#123; a, b &#125;</span>) &#123;<br>  <span class="hljs-comment">// Only re-rendered if `a` changes:</span><br>  <span class="hljs-keyword">const</span> child1 = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child1</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&#123;a&#125;</span> /&gt;</span></span>, [a]);<br>  <span class="hljs-comment">// Only re-rendered if `b` changes:</span><br>  <span class="hljs-keyword">const</span> child2 = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child2</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&#123;b&#125;</span> /&gt;</span></span>, [b]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      &#123;child1&#125;</span><br><span class="language-xml">      &#123;child2&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><p>把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。</p><p>下面这个例子，即使我们用 <code>memo</code> 包裹了组件，因为 <code>setCount</code> 每次会引起 Demo 组件重新 render，<code>生成了新的 fn 函数</code>(内存地址发生了变化)，导致 Child 也会重新 render。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">IChild</span> &#123;<br>  <span class="hljs-attr">fn</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">Dispatch</span>&lt;<span class="hljs-title class_">React</span>.<span class="hljs-property">SetStateAction</span>&lt;number&gt;&gt;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props: IChild</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Child&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>Child component<span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;is fn&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count =&gt; count + 1)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fn</span>=<span class="hljs-string">&#123;fn&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>我们不想让 fn 函数的 <code>内存地址</code> 发生变化，怎么办呢？使用 <code>useCallback</code> 钩子将其包裹起来即可。</p><p><code>注意：useMemo 也可以这样用，缓存 fn，从而使得 Child 组件不会重复 render。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 省略...</span><br><br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;is fn&#x27;</span>)<br>&#125;, [])<br><br><span class="hljs-comment">// 省略...</span><br></code></pre></td></tr></table></figure><p>这样 <code>fn</code> 函数就是一个缓存函数了，即使 count 不停的发生变化，也不会造成 Child 组件重复 render。</p><p><em>总结:</em></p><ol><li>当 Demo 组件内部 state 发生了改变引起 Demo 和 Child 组件重新 render</li><li>并且 Child 组件接受了一个来自 Demo 组件自定义的方法（fn）</li><li>如果不希望 Child 组件重新 render，那么就需要用 useCallback 钩子将自定义方法 <code>fn</code> 包裹起来</li><li>因为 Child 组件 props 里面的 fn 和 useCallback 返回的 fn 指向的是内存中的同一个地址，那么 Child 组件就不会更新</li><li>useCallback 返回新函数的条件是：依赖项（第二个参数）发生了改变。</li><li>如果说我们的 Child 组件，本身就是需要根据 count 变化而变化，那么就不需要加这个缓存 API了，反而增加其计算负担。</li></ol><h2 id="设计组件"><a href="#设计组件" class="headerlink" title="设计组件"></a>设计组件</h2><p>不要为了使用钩子，过渡的使用钩子，好的页面设计，也许用不上这些钩子。</p><p><code>把不变的组件和变化的组件抽离出来！</code></p><p>比如可以把 count 相关部分抽离成一个 Count 组件，使其和 Child 组件同层级排列，Count 组件和 Child 组件分开了，也不会引起 Child 组件做多余的 render。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;<span class="hljs-title class_">Count</span> /&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&#123;fn&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>或者是通过 props.children 渲染 Child，也不会造成 Child 重新 render。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Count</span> = (<span class="hljs-params">props: any</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count =&gt; count + 1)&#125;&gt;+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      &#123;/* children 不会重新 render */&#125;</span><br><span class="language-xml">      &#123;props.children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// fn 永远不会变化</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;&#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Count</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">fn</span>=<span class="hljs-string">&#123;fn&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Count</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="useRef-createRef"><a href="#useRef-createRef" class="headerlink" title="useRef / createRef"></a>useRef / createRef</h2><blockquote><p>访问 DOM 节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> inputEle = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-keyword">const</span> inputEle = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br><br>inputEle.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br><br></code></pre></td></tr></table></figure><h3 id="测量-DOM节点？"><a href="#测量-DOM节点？" class="headerlink" title="测量 DOM节点？"></a>测量 DOM节点？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> getHeight = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">node: HTMLObjectElement</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (node) &#123;<br>      <span class="hljs-title function_">setHeight</span>(node.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">height</span>)<br>    &#125;<br>  &#125;<br>&#125;, [])<br><br><span class="hljs-comment">// 或者</span><br><br><span class="hljs-keyword">const</span> getHeight = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">node: HTMLObjectElement</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (node) &#123;<br>    <span class="hljs-title function_">setHeight</span>(node.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">height</span>)<br>  &#125;<br>&#125;, [])<br><br></code></pre></td></tr></table></figure><p><code>将 ref 逻辑抽离成一个 Hook</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// hook</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">useClientRect</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [rect, setRect] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> ref = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (node) &#123;<br>      <span class="hljs-title function_">setRect</span>(node.<span class="hljs-title function_">getBoundingClientRect</span>())<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> [rect, ref]<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><br><span class="hljs-keyword">const</span> [rect, ref] = <span class="hljs-title function_">useClientRect</span>()<br><br>&lt;h1 ref=&#123;ref&#125;&gt;是 <span class="hljs-variable constant_">H1</span> 标签 &#123;count&#125;&lt;/h1&gt;<br>&#123;<br>  rect &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;rect.height&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="React-forwardRef"><a href="#React-forwardRef" class="headerlink" title="React.forwardRef"></a>React.forwardRef</h3><blockquote><p>React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FancyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span><br>))<br><br><span class="hljs-comment">// 这样可以拿到 input 元素了</span><br><span class="hljs-keyword">const</span> inputEle = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>&lt;<span class="hljs-title class_">FancyInput</span> ref=&#123;inputEle&#125; /&gt;<br><br></code></pre></td></tr></table></figure><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h3><blockquote><p>useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FancyInput</span> = <span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> inputRef = <span class="hljs-title function_">useRef</span>();<br><br>  <span class="hljs-title function_">useImperativeHandle</span>(ref, <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">focus</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      inputRef.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>();<br>    &#125;,<br>    alert () &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br>    &#125;<br>  &#125;));<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;inputRef&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>;<br>&#125;)<br><br><br><span class="hljs-keyword">const</span> inputEle = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>&lt;<span class="hljs-title class_">FancyInput</span> ref=&#123;inputEle&#125; /&gt;<br><br><br><span class="hljs-comment">// 通过 inputEle 获取到 useImperativeHandle 定义的方法</span><br>inputEle.<span class="hljs-property">current</span>.<span class="hljs-title function_">focus</span>()<br><br>inputEle.<span class="hljs-property">current</span>.<span class="hljs-title function_">alert</span>()<br><br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://ahooks.js.org/zh-CN/">ahooks 官网</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>React，Hooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello_AlexCc</title>
    <link href="/post/first-article.html"/>
    <url>/post/first-article.html</url>
    
    <content type="html"><![CDATA[<h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><blockquote><p>This is my first Blog.</p></blockquote><h3 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello_AlexCc!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ヾ(◍°∇°◍)ﾉﾞ&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>One</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
