{"meta":{"title":"Hello_AlexCc","subtitle":"No pains, no gains.","description":"Technology Blog","author":"Hello_AlexCc","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2023-05-12T10:49:20.020Z","updated":"2023-05-12T10:49:20.020Z","comments":false,"path":"demo/2023面试准备/css.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/css.html","excerpt":"","text":""},{"title":"","date":"2023-05-12T10:49:20.034Z","updated":"2023-05-12T10:49:20.034Z","comments":false,"path":"demo/2023面试准备/打包工具.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7.html","excerpt":"","text":""},{"title":"About ME","date":"2022-03-30T02:53:37.000Z","updated":"2023-05-12T10:49:20.018Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"StoryA long time ago … A cat is sleeping，very very deep sleeping… Suddently, He find a mouse … God damn it, a so cute mouse! He don’t want to eat he, play with he."},{"title":"","date":"2023-05-12T10:49:20.035Z","updated":"2023-05-12T10:49:20.035Z","comments":false,"path":"demo/ObserverMode.html","permalink":"http://yoursite.com/demo/ObserverMode.html","excerpt":"","text":"观察者模式 ul { background-color: antiquewhite; } li { background-color: aqua; margin-top: 12px; } 面包屑 1 2 3 // 目标 class Subject { constructor() { this.observers = [] } add(ob) { this.observers.push(ob) } notify(text) { this.observers.forEach(o => { o.update(text) }) } } // 观察者 class Observer { constructor(name) { this.ele = document.querySelector(name) } update(text) { this.ele.innerHTML = text } } const s = new Subject() const o1 = new Observer('.bread') s.add(o1) let oLi = document.querySelectorAll('.left li') for (let i = 0; i < oLi.length; i++) { oLi[i].onclick = function () { s.notify(this.innerHTML) } }"},{"title":"","date":"2023-05-12T10:49:20.035Z","updated":"2023-05-12T10:49:20.035Z","comments":false,"path":"demo/PubSubMode.html","permalink":"http://yoursite.com/demo/PubSubMode.html","excerpt":"","text":"发布订阅者模式 ul { background-color: antiquewhite; } li { background-color: aqua; margin-top: 12px; } 面包屑 1 2 3 const PubSub = { message: {}, // 将事件存储数组，改成对象，key 表示事件类型，value 表示订阅的事件数组 publist(type, text) { if (!this.message[type]) return this.message[type].forEach(cb => { cb(text) }) }, subscribe(type, cb) { if (!this.message[type]) { this.message[type] = [cb] // 如果事件 type 不存在，我们就创建一个事件类型数组 } else { this.message[type].push(cb) } }, unsubscribe(type, cb) { // 取消订阅 if (!this.message[type]) return if (!cb) { // 取消所有订阅的事件 this.message[type] = [] } else { this.message[type] = this.message[type].filter(i => i !== cb) } } } PubSub.subscribe('updateBread', function (text) { const breadEle = document.querySelector('.bread') breadEle.innerHTML = text }) let oLi = document.querySelectorAll('.left li') for (let i = 0; i < oLi.length; i++) { oLi[i].onclick = function () { PubSub.publist('updateBread', this.innerHTML) } }"},{"title":"","date":"2023-05-12T10:49:20.035Z","updated":"2023-05-12T10:49:20.035Z","comments":false,"path":"demo/Vue3Reactive1.html","permalink":"http://yoursite.com/demo/Vue3Reactive1.html","excerpt":"","text":"Document let activeEffect = undefined const data = { text: 'hello world @.@' } function effect(fn) { activeEffect = fn fn() } const bucket = new WeakMap() // target => Map const obj = new Proxy(data, { get(target, key) { if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) { // 关联 target 和 Map bucket.set(target, depsMap = new Map()) } let deps = depsMap.get(key) if (!deps) { // 依赖集合 depsMap.set(key, deps = new Set()) } deps.add(activeEffect) return target[key] }, set(target, key, val) { target[key] = val const depsMap = bucket.get(target) console.log('depsMap ', depsMap) if (!depsMap) return let effects = depsMap.get(key) effects && effects.forEach(fn => fn()) } }) // 注册副作用函数 effect(() => { console.log('text effect') document.body.innerHTML = obj.text // 读取 }) // effect(() => { // console.log('title effect') // obj.title = '标题123' // // document.title = obj.title // 读取 // }) setTimeout(() => { obj.notExist = 'hello vue3' }, 1000)"},{"title":"","date":"2023-05-12T10:49:20.035Z","updated":"2023-05-12T10:49:20.035Z","comments":false,"path":"demo/Vue3Reactive.html","permalink":"http://yoursite.com/demo/Vue3Reactive.html","excerpt":"","text":"Vue3 响应式原理 // 定义一个存储副作用函数的集合，每次设置对象时，我们就会取出集合里面的副作用函数，并执行 const bucket = new Set() const data = { text: 'helloworld' } const obj = new Proxy(data, { get(target, key) { // 添加副作用函数 // 每一次触发 get 方法，都会向 集合 中添加一次 effect 方法 // 但是集合是不会存储相同的值的（包括相同的内存地址） // 所以这里每一次执行 bucket.add 方法，因为 effect 地址没变，所以里面一直只会有一个副作用函数。 bucket.add(effect) return target[key] }, set(target, key, val) { target[key] = val // 批量执行副作用函数 bucket.forEach(fn => fn()) return true } }) // 执行副作用函数，会触发代理对象的 get 方法，从而收集到副作用函数 const effect = () => { document.body.innerHTML = obj.text } effect() // 一秒钟后，我们执行 代理对象的 set 操作，出发 set 方法 setTimeout(() => { obj.text = 'update obj text' console.log('??',bucket) }, 1000);"},{"title":"","date":"2023-05-12T10:49:20.036Z","updated":"2023-05-12T10:49:20.036Z","comments":false,"path":"demo/Vue3Reactive3.html","permalink":"http://yoursite.com/demo/Vue3Reactive3.html","excerpt":"","text":"收集 key 的依赖 reactive let temp1, temp2; effect(function effect1() { console.log('effect1 执行') effect(function effect2() { console.log('effect2 执行') temp2 = obj.bar }) temp1 = obj.foo }) console.log('???', bucket) obj.foo = false // obj.bar = false"},{"title":"","date":"2023-05-12T10:49:20.036Z","updated":"2023-05-12T10:49:20.036Z","comments":false,"path":"demo/Vue3Reactive2.html","permalink":"http://yoursite.com/demo/Vue3Reactive2.html","excerpt":"","text":"收集 key 的依赖 // 存储被注册的副作用函数 let activeEffect; const data = { ok: true, text: 'hello world' } const bucket = new WeakMap() // target => Map const obj = new Proxy(data, { get(target, key) { // 追踪依赖 track(target, key) return target[key] }, set(target, key, value) { target[key] = value // 触发依赖 trigger(target, key) } }) function track(target, key) { if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) { bucket.set(target, depsMap = new Map()) } let deps = depsMap.get(key) if (!deps) { depsMap.set(key, deps = new Set()) } // 添加副作用函数 deps.add(activeEffect) // deps 存储与该副作用函数相关联的依赖集合 // 将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 deps 中的副作用函数删除了 activeEffect.deps.push(deps) } function trigger(target, key) { const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) const effectsToRun = new Set(effects) // effects && effects.forEach(fn => fn()) effectsToRun && effectsToRun.forEach(fn => fn()) } function effect(fn) { function effectFn() { activeEffect = effectFn cleanup(effectFn) fn() } effectFn.deps = [] // 存储所有包含当前副作用函数的依赖 集合，在 get 拦截函数中处理 deps effectFn() } function cleanup(effectFn) { console.log('effectFn ', effectFn.deps) // 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 'xxx'(key) 中对应的依赖集合的副作用函数 // effectFn.deps[i] 中，存放的依赖集合，和 Map key 对应的依赖集合，是同一个集合，删除某一项，自然会影响到另一个 // 当我们在 trigger 中执行 effects 时，就是执行副作用函数 // 这个时候，会执行 cleanup，删除所有的 key 对应的副作用函数，最后执行 fn，重新走 属性的读取逻辑，触发 get 方法，重新收集依赖 // 当我们设置 obj.ok = false 后，不会再读取 obj.text 了，从而不会对其 key 收集依赖。 for(let i = 0; i < effectFn.deps.length; i++) { const deps = effectFn.deps[i] deps.delete(effectFn) } effectFn.deps.length = 0 } effect(() => { console.log(' obj.ok', obj.ok) // obj.ok = true 会触发 obj 的 get拦截方法，并且通过 track 函数收集到了副作用函数，并且将其存储在 deps 中 document.body.innerHTML = obj.ok ? obj.text : 'ok not' }) setTimeout(() => { // obj.text = 'Vue3 Reactive' obj.ok = false console.log('bucket ', bucket) }, 1000) // setTimeout(() => { // console.log('执行了') // obj.text = 'Vue3 Reactive' // }, 3000)"},{"title":"","date":"2023-05-12T10:49:20.036Z","updated":"2023-05-12T10:49:20.036Z","comments":false,"path":"demo/Vue3Reactive4.html","permalink":"http://yoursite.com/demo/Vue3Reactive4.html","excerpt":"","text":"收集 key 的依赖 reactive const data = { foo: 1 } const obj = handleProxy(data) // 控制次数 const jobQueue = new Set() const p = Promise.resolve() let isFlushing = false function flushJob() { if (isFlushing) return isFlushing = true p.then(() => { jobQueue.forEach(job => job()) }).finally(() => { isFlushing = false }) } effect(() => { console.log(obj.foo) }, { scheduler(fn) { // 调度 // setTimeout(fn) // 控制次数 // fn() // 会依次从 1 打印到 6，而我不在过程，只需要结果 6 // 由于 Set 集合的特殊性，多次添加同一个 fn，最终都只会有个 fn 在 set 中 jobQueue.add(fn) flushJob() } }) obj.foo++ obj.foo++ obj.foo++ obj.foo++ obj.foo++ console.log('结束了')"},{"title":"","date":"2023-05-12T10:49:20.038Z","updated":"2023-05-12T10:49:20.038Z","comments":false,"path":"demo/reactive.js","permalink":"http://yoursite.com/demo/reactive.js","excerpt":"","text":"// 存储被注册的副作用函数 let activeEffect; // 副作用函数栈，用来存储当前执行的副作用函数，当副作用函数发生嵌套时，避免函数错误的使用 const effectStack = [] const bucket = new WeakMap() // target => Map const handleProxy = data => { return new Proxy(data, { get(target, key) { // 追踪依赖 track(target, key) return target[key] }, set(target, key, value) { target[key] = value // 触发依赖 trigger(target, key) } }) } function track(target, key) { if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) { bucket.set(target, depsMap = new Map()) } let deps = depsMap.get(key) if (!deps) { depsMap.set(key, deps = new Set()) } deps.add(activeEffect) activeEffect.deps.push(deps) } function trigger(target, key) { const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) // 避免无限循环 // const effectsToRun = new Set(effects) const effectsToRun = new Set() effects && effects.forEach(effectFn => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn) } }) effectsToRun && effectsToRun.forEach(fn => { if (fn.options.scheduler) { fn.options.scheduler(fn) } else { fn() } }) } function effect(fn, options = {}) { function effectFn() { activeEffect = effectFn cleanup(effectFn) effectStack.push(effectFn) // 执行副作用函数 fn() effectStack.pop() activeEffect = effectStack[effectStack.length - 1] } effectFn.options = options effectFn.deps = [] // 开始执行 effectFn() } function cleanup(effectFn) { for(let i = 0; i < effectFn.deps.length; i++) { const deps = effectFn.deps[i] deps.delete(effectFn) } effectFn.deps.length = 0 }"},{"title":"","date":"2023-05-12T10:49:20.038Z","updated":"2023-05-12T10:49:20.038Z","comments":false,"path":"demo/resizeObserver.html","permalink":"http://yoursite.com/demo/resizeObserver.html","excerpt":"","text":"Resize observer text test html { height: 100%; font-family: 'helvetica neue', arial, sans-serif; } body { height: inherit; margin: 0; display: flex; justify-content: center; align-items: center; } body>div { background-color: #eee; border: 1px solid #ccc; padding: 20px; width: 50%; min-width: 320px; } h1 { margin: 0; } p { line-height: 1.5; } form { width: 100%; } form>div { display: flex; } form label { flex: 2; } form input { flex: 3; } input[type=\"checkbox\"] { height: 2rem; } So what happened? https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver 记住，不要做任何影响任何事情的事情，除非事实证明你应该这么做，那样的话，看在上帝的份上，不要不做！我的灵魂！我不想被救。你们不是圣诞老人！你们都不是机器人。我得想办法逃离年轻时可怕的摧残。突然间，我每三个小时就要上一次厕所。社保局的那些混蛋也不再给我寄支票了。现在我得付钱给他们！ Observer enabled: Adjust width: if (window.ResizeObserver) { const h1Elem = document.querySelector('h1'); const pElem = document.querySelector('p'); const divElem = document.querySelector('body > div'); const slider = document.querySelector('input[type=\"range\"]'); const checkbox = document.querySelector('input[type=\"checkbox\"]'); divElem.style.width = '600px'; slider.addEventListener('input', () => { divElem.style.width = slider.value + 'px'; }) const resizeObserver = new ResizeObserver(entries => { console.log('entries', entries) for (let entry of entries) { if (entry.contentBoxSize) { // The standard makes contentBoxSize an array... if (entry.contentBoxSize[0]) { h1Elem.style.fontSize = Math.max(1.5, entry.contentBoxSize[0].inlineSize / 200) + 'rem'; pElem.style.fontSize = Math.max(1, entry.contentBoxSize[0].inlineSize / 600) + 'rem'; } else { // ...but old versions of Firefox treat it as a single item h1Elem.style.fontSize = Math.max(1.5, entry.contentBoxSize.inlineSize / 200) + 'rem'; pElem.style.fontSize = Math.max(1, entry.contentBoxSize.inlineSize / 600) + 'rem'; } } else { h1Elem.style.fontSize = Math.max(1.5, entry.contentRect.width / 200) + 'rem'; pElem.style.fontSize = Math.max(1, entry.contentRect.width / 600) + 'rem'; } } console.log('Size changed'); }); resizeObserver.observe(divElem); checkbox.addEventListener('change', () => { if (checkbox.checked) { resizeObserver.observe(divElem); } else { resizeObserver.unobserve(divElem); } }); } else { console.log('Resize observer not supported!'); }"},{"title":"","date":"2023-05-12T10:49:20.038Z","updated":"2023-05-12T10:49:20.038Z","comments":false,"path":"demo/replace$1.html","permalink":"http://yoursite.com/demo/replace$1.html","excerpt":"","text":"Document const name = \"Doe, John\"; name.replace(/(\\w+)\\s*, \\s*(\\w+)/, \"$2 $1\") // John, Doe console.log('\"a\", \"b\"'.replace(/\"([^\"]*)\"/g, \"'$1'\"))"},{"title":"","date":"2023-05-12T10:49:20.039Z","updated":"2023-05-12T10:49:20.039Z","comments":false,"path":"demo/timeFragment.html","permalink":"http://yoursite.com/demo/timeFragment.html","excerpt":"","text":"时间分片 // 记录任务开始时间 let now = Date.now(); // 插入十万条数据 const total = 100000; // 获取容器 let ul = document.getElementById('container'); // 将数据插入容器中 for (let i = 0; i < total; i++) { let li = document.createElement('li'); li.innerText = i ul.appendChild(li); } console.log('JS运行时间：', Date.now() - now); setTimeout(() => { console.log('总运行时间：', Date.now() - now); }, 0) // // --------- 分批渲染 --------- // //需要插入的容器 // let ul = document.getElementById('container'); // // 插入十万条数据 // let total = 100000; // // 一次插入 20 条 // let once = 20; // //总页数 // let page = total / once // //每条记录的索引 // let index = 0; // //循环加载数据 // function loop(curTotal, curIndex) { // if (curTotal { // for (let i = 0; i < pageCount; i++) { // let li = document.createElement('li'); // li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) // ul.appendChild(li) // } // loop(curTotal - pageCount, curIndex + pageCount) // }, 0) // } // loop(total, index);"},{"title":"","date":"2023-05-12T10:49:20.019Z","updated":"2023-05-12T10:49:20.019Z","comments":false,"path":"demo/2023面试准备/JavaScript语言精粹与编程实战.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98.html","excerpt":"","text":"你还需要更多的耐心与时间！"},{"title":"","date":"2023-05-12T10:49:20.020Z","updated":"2023-05-12T10:49:20.020Z","comments":false,"path":"demo/2023面试准备/Vue2&Vue3.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Vue2&Vue3.html","excerpt":"","text":"Vue组件通信 props 和 $emit 12// 触发父组件传递过来的事件this.$emit(&#x27;xxx&#x27;, params) 组件间通信 - 自定义事件 123const eventBus = new Vue()export default eventBus 用法： 12345678910111213import event from &#x27;./eventBus.js&#x27;// 触发事件event.$emit(&#x27;eventName&#x27;, params)// 接收事件event.$on(&#x27;eventName&#x27;, this.functionName)// 卸载事件，一般是放在组件销毁的生命钩子里// 防止造成内存泄露beforeDestroy() &#123; event.$off(&#x27;eventName&#x27;)&#125; Vue组件生命周期 beforeCreate 实例在内存中创建出来，但未初始化 data和 methods created 实例已经在内存中创建完成，此时data和methods已初始化 beforeMount 此时已经完成了模版的编译，只是还没有渲染到界面中去 mouted 模版已经渲染到了浏览器，创建阶段结束，即将进入运行阶段（最新的dom） beforeUpdate 界面中的数据还是旧的，但是data数据已经更新，页面中和data不会保持同步 updated 页面重新渲染完毕，页面中的数据和data保持一致 beforeDestroy 执行该方法的时候，Vue的生命周期已经进入销毁阶段，但是实例上的各种数据和方法还处于可用状态 destroyed 组件已经全部销毁，Vue实例已经被销毁，Vue中的任何数据都不可用 父子组件生命周期的执行过程Vue官网生命钩子示例图拆解 https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e06a5ec0d21f4907ba780ae03da4d548~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp 父子组件生命钩子调用过程 创建和挂载过程（子组件挂载完成后，父组件才会挂载完毕） parent created child created child mounted parent mounted 组件更新过程 同上。 parent beforeUpdate child beforeUpdate child updated parent updated 组件销毁过程。"},{"title":"","date":"2023-05-12T10:49:20.034Z","updated":"2023-05-12T10:49:20.034Z","comments":false,"path":"demo/2023面试准备/react.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/react.html","excerpt":"","text":"百度网盘我的资源 - js面试 - 第7章 组件化与react"},{"title":"","date":"2023-05-12T10:49:20.037Z","updated":"2023-05-12T10:49:20.037Z","comments":false,"path":"demo/canvas/demo1.html","permalink":"http://yoursite.com/demo/canvas/demo1.html","excerpt":"","text":"山羊の前端小窝 body { margin: 0px; padding: 0px; position: fixed; /* 网页背景色 */ background: rgb(0, 0, 0); } // 定义requestAnimFrame函数 window.requestAnimFrame = function () { // 检查浏览器是否支持requestAnimFrame函数 return ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || // 如果所有这些选项都不可用，使用设置超时来调用回调函数 function (callback) { window.setTimeout(callback) } ) } // 初始化函数，用于获取canvas元素并返回相关信息 function init(elemid) { // 获取canvas元素 let canvas = document.getElementById(elemid) // 获取2d绘图上下文,这里d是小写的 c = canvas.getContext('2d') // 设置canvas的宽度为窗口内宽度，高度为窗口内高度 w = (canvas.width = window.innerWidth) h = (canvas.height = window.innerHeight) // 设置填充样式为半透明黑 c.fillStyle = \"rgba(30,30,30,1)\" // 使用填充样式填充整个canvas c.fillRect(0, 0, w, h) // 返回绘图上下文和canvas元素 return { c: c, canvas: canvas } } // 等待页面加载完成后执行函数 window.onload = function () { // 获取绘图上下文和canvas元素 let c = init(\"canvas\").c, canvas = init(\"canvas\").canvas, // 设置canvas的宽度为窗口内宽度，高度为窗口内高度 w = (canvas.width = window.innerWidth), h = (canvas.height = window.innerHeight), // 初始化鼠标对象 mouse = { x: false, y: false }, last_mouse = {} // 定义计算两点距离的函数 function dist(p1x, p1y, p2x, p2y) { return Math.sqrt(Math.pow(p2x - p1x, 2) + Math.pow(p2y - p1y, 2)) } // 定义 segment 类 class segment { // 构造函数，用于初始化 segment 对象 constructor(parent, l, a, first) { // 如果是第一条触手段，则位置坐标为触手顶部位置 // 否则位置坐标为上一个segment对象的nextPos坐标 this.first = first if (first) { this.pos = { x: parent.x, y: parent.y, } } else { this.pos = { x: parent.nextPos.x, y: parent.nextPos.y, } } // 设置segment的长度和角度 this.l = l this.ang = a // 计算下一个segment的坐标位置 this.nextPos = { x: this.pos.x + this.l * Math.cos(this.ang), y: this.pos.y + this.l * Math.sin(this.ang), } } // 更新segment位置的方法 update(t) { // 计算segment与目标点的角度 this.ang = Math.atan2(t.y - this.pos.y, t.x - this.pos.x) // 根据目标点和角度更新位置坐标 this.pos.x = t.x + this.l * Math.cos(this.ang - Math.PI) this.pos.y = t.y + this.l * Math.sin(this.ang - Math.PI) // 根据新的位置坐标更新nextPos坐标 this.nextPos.x = this.pos.x + this.l * Math.cos(this.ang) this.nextPos.y = this.pos.y + this.l * Math.sin(this.ang) } // 将 segment 回执回初始位置的方法 fallback(t) { // 将位置坐标设置为目标点坐标 this.pos.x = t.x this.pos.y = t.y this.nextPos.x = this.pos.x + this.l * Math.cos(this.ang) this.nextPos.y = this.pos.y + this.l * Math.sin(this.ang) } show() { c.lineTo(this.nextPos.x, this.nextPos.y) } } // 定义 tentacle 类 class tentacle { // 构造函数，用于初始化 tentacle 对象 constructor(x, y, l, n, a) { // 设置触手的顶部位置坐标 this.x = x this.y = y // 设置触手的长度 this.l = l // 设置触手的段数 this.n = n // 初始化触手的目标点对象 this.t = {} // 设置触手的随机移动参数 this.rand = Math.random() // 创建触手的第一条段 this.segments = [new segment(this, this.l / this.n, 0, true)] // 创建其他的段 for (let i = 1; i < this.n; i++) { this.segments.push( new segment(this.segments[i - 1], this.l / this.n, 0, false) ) } } // 移动触手到目标点的方法 move(last_target, target) { // 计算触手顶部与目标点的角度 this.angle = Math.atan2(target.y - this.y, target.x - this.x) // 计算触手的距离参数 this.dt = dist(last_target.x, last_target.y, target.x, target.y) // 计算触手的目标点坐标 this.t = { x: target.x - 0.8 * this.dt * Math.cos(this.angle), y: target.y - 0.8 * this.dt * Math.sin(this.angle) } // 如果计算出了目标点，则更新最后一个segment对象的位置坐标 // 否则，更新最后一个segment对象的位置坐标为目标点坐标 if (this.t.x) { this.segments[this.n - 1].update(this.t) } else { this.segments[this.n - 1].update(target) } // 遍历所有segment对象，更新它们的位置坐标 for (let i = this.n - 2; i >= 0; i--) { this.segments[i].update(this.segments[i + 1].pos) } if ( dist(this.x, this.y, target.x, target.y)"},{"title":"","date":"2023-05-12T10:49:20.037Z","updated":"2023-05-12T10:49:20.037Z","comments":false,"path":"demo/micro-app/SanpshotSandbox.js","permalink":"http://yoursite.com/demo/micro-app/SanpshotSandbox.js","excerpt":"","text":"class SanpshotSandbox { constructor() { this.proxy = window; //window属性 this.modifyPropsMap = {} //记录在window上的修改 this.active(); } // 激活沙箱 active() { this.windowSnapshot = {}; //拍照，将 window 的每个属性都记录到 windowSnapshot for (const prop in window) { if (window.hasOwnProperty(prop)) { this.windowSnapshot[prop] = window[prop]; } } // 将上次的修改进行一个应用 到 当前的window上 Object.keys(this.modifyPropsMap).forEach(p => { // 将上次修改过得赋到window上 window[p] = this.modifyPropsMap[p]; }) } // 丢弃沙箱 inactve() { for (const prop in window) { if (window.hasOwnProperty(prop)) { if (window[prop] !== this.windowSnapshot[prop]) { // 拿现在的和一年前的作比较 如果他俩不一样了 说明换这个属性有变化 有变化就把变化记录在变化表里 this.modifyPropsMap[prop] = window[prop] // 最后在将window变回一年前 window[prop] = this.windowSnapshot[prop] } } } } } let sandbox = new SanpshotSandbox(); //通过沙箱返回一个代理 ((window) => { window.a = 1; window.b = 2; console.log(window.a, window.b); // 1 2 sandbox.inactve(); //失去激活后 console.log(window.a, window.b); // undefined undefined sandbox.active(); //激活 console.log(window.a, window.b); // 1 2 })(sandbox.proxy); //sandbox.proxy就是window"},{"title":"","date":"2023-05-12T10:49:20.037Z","updated":"2023-05-12T10:49:20.037Z","comments":false,"path":"demo/micro-app/index.html","permalink":"http://yoursite.com/demo/micro-app/index.html","excerpt":"","text":"Document"},{"title":"","date":"2023-05-12T10:49:20.038Z","updated":"2023-05-12T10:49:20.038Z","comments":false,"path":"demo/micro-app/legacySandbox.js","permalink":"http://yoursite.com/demo/micro-app/legacySandbox.js","excerpt":"","text":"class LegacySandBox{ addedPropsMapInSandbox = new Map(); modifiedPropsOriginalValueMapInSandbox = new Map(); currentUpdatedPropsValueMap = new Map(); proxyWindow; setWindowProp(prop, value, toDelete = false){ if(value === undefined && toDelete){ delete window[prop]; }else{ window[prop] = value; } } active(){ this.currentUpdatedPropsValueMap.forEach((value, prop)=>this.setWindowProp(prop, value)); } inactive(){ this.modifiedPropsOriginalValueMapInSandbox.forEach((value, prop)=>this.setWindowProp(prop, value)); this.addedPropsMapInSandbox.forEach((_, prop)=>this.setWindowProp(prop, undefined, true)); } constructor(){ const fakeWindow = Object.create(null); this.proxyWindow = new Proxy(fakeWindow,{ set:(target, prop, value, receiver)=>{ const originalVal = window[prop]; if(!window.hasOwnProperty(prop)){ this.addedPropsMapInSandbox.set(prop, value); }else if(!this.modifiedPropsOriginalValueMapInSandbox.has(prop)){ this.modifiedPropsOriginalValueMapInSandbox.set(prop, originalVal); } this.currentUpdatedPropsValueMap.set(prop, value); window[prop] = value; }, get:(target, prop, receiver)=>{ return target[prop]; } }); } } // 验证： let legacySandBox = new LegacySandBox(); legacySandBox.active(); legacySandBox.proxyWindow.city = 'Beijing'; console.log('window.city-01:', window.city); legacySandBox.inactive(); console.log('window.city-02:', window.city); legacySandBox.active(); console.log('window.city-03:', window.city); legacySandBox.inactive();"},{"title":"","date":"2023-05-12T10:49:20.039Z","updated":"2023-05-12T10:49:20.039Z","comments":false,"path":"demo/theme/prefers-color-scheme.html","permalink":"http://yoursite.com/demo/theme/prefers-color-scheme.html","excerpt":"","text":"prefers-color-scheme .day { background: #eee; color: black; } .night { background: #333; color: white; } @media (prefers-color-scheme: dark) { .day.dark-scheme { background: #333; color: white; } .night.dark-scheme { background: black; color: red; } } @media (prefers-color-scheme: light) { .day.light-scheme { background: skyblue; color: #333; } .night.light-scheme { background: pink; color: #333; } } .day, .night { display: inline-block; padding: 1em; width: 7em; height: 7em; vertical-align: middle; } :root { --color: #333; --background-color: pink; } [data-theme=\"dark\"] { --color: #fff; --background-color: #000; } MDN: prefers-color-scheme CSS 媒体特性用于检测用户是否有将系统的主题色设置为亮色或者暗色。 Day (changes in light scheme) Day (changes in dark scheme) Night (changes in light scheme) Night (changes in dark scheme) dark mode window.onload = function() { // 如果匹配成功，scheme.matches === true // 也就是说，如果我们的系统是暗黑色，那么这个 matches 就是true，否则是 false const scheme = window.matchMedia('(prefers-color-scheme: dark)') scheme.addEventListener('change', e => { console.log(e) if (e.matches) { // 表示亮色模式 document.documentElement.setAttribute('data-theme', 'dark') } else { document.documentElement.setAttribute('data-theme', 'light') } }) const darkBtn = document.querySelector('.dark-btn') darkBtn.addEventListener('click', () => { // 设置主题色 document.documentElement.setAttribute('data-theme', 'dark') // document.documentElement.style.setProperty('--color', '#fff') // document.documentElement.style.setProperty('--background-color', '#000') }) }"},{"title":"","date":"2023-05-12T10:49:20.039Z","updated":"2023-05-12T10:49:20.039Z","comments":false,"path":"demo/webcomponent/README.html","permalink":"http://yoursite.com/demo/webcomponent/README.html","excerpt":"","text":"Web Components作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义 UI 控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。 组成 Custom elements（自定义元素） Shadow DOM（影子 DOM） HTML templates（HTML 模板） Custom elements（自定义元素）Shadow DOM（影子 DOM）templates and slots复用结构，减少使用相同的标记结构。 组件通信 Lightning Web Component 在 LWC 中，可以通过实现 CustomEvent 接口进行自定义事件，通过 EventTarget.dispatchEvent() 来分配事件。 注意： 定义事件时，不需要在事件名前加 on，因为在使用的时候会默认在名称前使用 on，比如：当我们定义了 click 事件，在 HTML 代码中用 onclick 来调用它 父组件 123456789101112131415// parent compconnectedCallback() &#123; const child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;) // 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子 child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;) // 2. 通过组件实例直接修改内部数据（⚠️未获取到） // console.log(&#x27;??&#x27;, child) // 3. 监听子组件内部定义的事件 child.addEventListener(&#x27;custom-event&#x27;, (&#123; detail &#125;) =&gt; &#123; console.log(&#x27;事件触发 &#x27;, detail.value); &#125;) &#125; 子组件 12345678910111213141516// child compconnectedCallback() &#123; // 定义事件 const event = new CustomEvent(&#x27;custom-event&#x27;, &#123; detail: &#123; value: &#x27;child web component&#x27; &#125; &#125;) this.dispatchEvent(event) const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 子组件直接调用父组件实例上的方法123456789101112131415// parent compsayHello(msg) &#123; console.log(msg, this.data)&#125;// child compconnectedCallback() &#123; const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件实例 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 监听组件上属性的变化1234567891011121314151617// parentconst child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;)// 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;)// child// 监听属性变化，必须定静态的 observedAttributes 方法static get observedAttributes() &#123; return [&#x27;text&#x27;];&#125;attributeChangedCallback(name, oldValue, newValue) &#123; console.log(&#x27;name&#x27;, name) console.log(&#x27;oldValue&#x27;, oldValue) console.log(&#x27;newValue&#x27;, newValue)&#125; web component in ReactJSReact 和 Web Components 为了解决不同的问题而生。 Web Components 为可复用组件提供了强大的封装，而 React 则提供了声明式的解决方案，使 DOM 与数据保持同步。 两者旨在互补。作为开发人员，可以自由选择在 Web Components 中使用 React，或者在 React 中使用 Web Components，或者两者共存。 问题 “react”: “^16.12.0” 123456789101112131415161718192021222324252627282930class MyApp extends React.Component &#123; render() &#123; return &lt;span onClick=&#123;() =&gt; alert(&#x27;I have been clicked&#x27;)&#125;&gt;Click me&lt;/span&gt;; &#125;&#125;class ShadowElement extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; const mountPoint = document.createElement(&#x27;div&#x27;); const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); shadowRoot.appendChild(mountPoint); ReactDOM.render(&lt;MyApp /&gt;, mountPoint); &#125;&#125;customElements.define(&#x27;my-custom-element&#x27;, ShadowElement);// 使用&lt;div className=&quot;app-main&quot; onClick=&#123;()=&gt; console.log(&#x27;app main clicked&#x27;)&#125;&gt; &lt;my-custom-element&gt;&lt;/my-custom-element&gt;&lt;/div&gt; 效果图 “react”: “^17.0.2” 及以上版本，已解决此问题。 代码一致，效果图。 解决方案 Web Components 触发的事件可能无法通过 React 渲染树正确的传递。 你需要在 React 组件中手动添加事件处理器来处理这些事件。 Shadow DOM 重定向了 click 事件并将其封装在 shadow 中，将组件内部的所有内容封装在单独的作用域中，并隔离事件。React 并不支持这样的 Shadow DOM，因此事件委托失败，事件无法触发。 这意味着，如果您将带有 click 事件的 React 组件放在 Web 组件中，则点击事件可能不会冒泡到 React 组件中。这是因为事件在 Web 组件的 Shadow DOM 中触发，然后被封装在 Shadow DOM 中，而不会传播到外部组件。 如果您希望在使用 Web 组件时能够触发 React 事件，则可以使用上述方法之一，例如重新绑定事件到实际的 shadow 容器并使用 “__reactInternalInstances” 来调度正确的 React 事件。您还可以使用其他方法来解决此问题，例如使用自定义事件或使用事件代理。 https://stackoverflow.com/questions/37866237/click-event-not-firing-when-react-component-in-a-shadow-dom 相关文章：当 Shadow Dom 遇上 React event https://github.com/huruji/blog/issues/104 参考链接 MDN官方文档 WC官方示例 基于 Web Components 跨框架组件开发 Shadow :host 选择器"},{"title":"","date":"2023-05-12T10:49:20.020Z","updated":"2023-05-12T10:49:20.020Z","comments":false,"path":"demo/2023面试准备/demo/debounce.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/debounce.html","excerpt":"","text":"Document body { height: 2000px; } 防抖：用户触发事件频繁，只需要用户最后一次操作的结果 const input = document.querySelector('#input') input.oninput = debounce(function() { console.log('value: ', this.value) }, 800) function debounce(fn, delay = 500) { // 闭包 let timer = null // this ===> window return function() { // this ===> input if (timer !== null) { clearTimeout(timer) } timer = setTimeout(() => { fn.call(this) }, delay); } } let time = 0 window.onscroll = throttle(function() { console.log('hello world') }, 1000) function throttle(fn, delay) { let time = 0 return function() { let now = Date.now() if (now - time > delay) { fn.call(this) time = now } } }"},{"title":"","date":"2023-05-12T10:49:20.020Z","updated":"2023-05-12T10:49:20.020Z","comments":false,"path":"demo/2023面试准备/demo/demo.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/demo.js","excerpt":"","text":"// const cat = { // name: '喵喵喵', // sayName(params) { // console.log('params ', params) // setTimeout(() => { // console.log(this) // cat // console.log(this.name) // 喵喵喵 // }) // } // } // const dog = { // name: '汪汪汪' // } // cat.sayName.call(dog, 1,2,3) // setImmediate(() => { // console.log('setImmediate') // }) // process.nextTick(() => { // console.log(1) // }) // console.log(2) // setTimeout(() => { // console.log(3) // }, 0); // setImmediate(() => { // console.log('setImmediate') // }) // process.nextTick(() => { // console.log(1) // }) // console.log(2) // new Promise(r => { // console.log(7) // r() // }).then(() => { // console.log(8) // }) // setTimeout(() => { // console.log(3) // }, 0); // setTimeout(() => { // console.log(4) // }, 1000); // setTimeout(() => { // console.log(5) // }, 0); // console.log(6) // // 2 7 6 1 8 3 5 setImmediate 4 const obj = { name: 'is obj', girlfriend: { name: '小红' }, list: [1,2,3], u: undefined, n: null, f: function() { console.log('func') }, arrow: () => {}, error: new Error('错误啦') } // // 属于浅拷贝 // const o = Object.assign({}, obj) // obj.name = 'is o' // obj.girlfriend.name = '小花' // console.log(o) // // 深拷贝 // function deepClone(obj) { // const o = {} // for (const key in obj) { // if (Object.hasOwnProperty.call(obj, key)) { // if(typeof obj[key] === 'object') { // o[key] = deepClone(obj[key]) // } else { // o[key] = obj[key]; // } // } // } // return o // } // const o = deepClone(obj) // obj.girlfriend.name = '小花' // obj.list[1] = 99 // console.log('??', o) // console.log('??', obj) // // JSON.stringify实现深克隆 // // JSON.stringify存在的问题 // // 如果属性值是 undefined 或者是方法（含箭头函数），克隆出来后，undefined 和函数会丢失 // const o = JSON.stringify(obj) // console.log(o) // class User { // constructor(name) { // this.name = name // } // } // class Admin extends User { // constructor() { // // 子类继承父类，写了 constructor 函数，必须手动调用 super() // // super 指的是父类(User) // super() // this.age = 28 // } // } // const a = new Admin() // console.log(a) // // async 将函数包装成 Promise // // 相当于 function say() { return new Promise() } // async function say() { // return 'say hello' // } // const s = say() // s.then(value => { // console.log('value ', value) // }) // // 可缓存的纯函数 // function add(a, b) { // console.log('计算中...') // return a + b // } // const resolver = (...args) => JSON.stringify(args) // function memoize(func, resolver) { // const cache = {} // return function(...args) { // const key = resolver(...args) // \"[a, b]\" // if (cache[key]) { // return cache[key] // } else { // return cache[key] = func(...args) // } // } // } // const memoized = memoize(add, resolver) // console.log(memoized(9, 9)) // console.log(memoized(9, 9)) // console.log(memoized(9, 9)) // // 函数柯里化 // function curry(func) { // const curried = function(...args) { // // 函数的length 表示它有几个参数 // if (args.length < func.length) { // // 累加参数 // return (...rest) => curried(...args, ...rest) // } else { // // 传入的参数和方法接收的参数相同，直接执行 func 函数 // return func(...args) // } // } // return curried // } // function add(a, b, c) { // return a + b + c // } // const curried = curry(add) // const fn = curried(1) // console.log(fn(2)(3)) // const str = 'hello - ' // function add1(str) { // return str + 'wor' // } // function add2(str) { // return str + 'l' // } // function add3(str) { // return str + 'd' // } // // console.log(add3(add2(add1(str)))) // function flow(...fns) { // if (fns.length === 1) { // return fns[0] // } // return fns.reduceRight((a, b) => { // // 从右往左 // // 第一步 a === add3, b === add2 // // 第二步 a === (...args) => add3(add2(...args)), b === add1 // // 第二步的 a 显示为 (...args) => a(b(...args)) // // 返回 a(add1(...args)) // // 当我们最后调用 f 时，会先计算 add1(...args)，拿到结果后，执行 a \"add3(add2(add1(...args)))\" // return (...args) => a(b(...args)) // }) // } // const f = flow(add1, add2, add3) // function Person(name) { // this.name = name // this.colors = ['red', 'blue'] // } // Person.prototype.sayName = function() { // console.log(this.name) // } // function User() { // Person.call(this, 'xiaoming') // this.age = 19 // } // User.prototype = new Person() // User.prototype.constructor = User // const u = new User() // console.log(u instanceof User) // console.log(u instanceof Person) // console.log(User.prototype.isPrototypeOf(u)) // console.log(Person.prototype.isPrototypeOf(u)) // let person = { // name: \"Nicholas\", // friends: [\"Shelby\", \"Court\", \"Van\"] // }; // let anotherPerson = object(person); // anotherPerson.name = \"Greg\"; // anotherPerson.friends.push(\"Rob\"); // let yetAnotherPerson = object(person); // yetAnotherPerson.name = \"Linda\"; // yetAnotherPerson.friends.push(\"Barbie\"); // console.log(person.friends); // \"Shelby, Court, Van, Rob, Barbie\" // const proxy = new Proxy({ // name: 'hello' // }, { // get(target, property) { // console.log(target, property) // return 11 // } // }) // console.log(proxy.name) // function timeout(ms) { // return new Promise(resolve => { // setTimeout(resolve, ms, 'done') // 第三个参数，是传递给 resolve 方法的 // }) // } // console.log(1) // timeout(1000).then(res => { // console.log(res) // }) // console.log(2) // const p1 = new Promise((r, reject) => { // setTimeout(() => { // reject(new Error('fail')) // }, 3000); // }) // const p2 = new Promise((r, reject) => { // r(p1) // }) // p2.then(result => { // console.log('result ', result) // }, error => { // console.log('error ', error) // }) // new Promise(r => { // r(x + 2) // }).then(res => { // console.log('结果 ', res) // }).catch(err => { // console.log('错误 ', err) // }).then(() => { // console.log('随便打印') // }).finally(() => { // console.log('最后打印') // }) // const p3 = function() { // return new Promise(r => { // setTimeout(() => { // r('p3 success') // }, 3000); // }) // } // const allP = Promise.all([1, 2, p3()]) // allP.then(r => { // console.log(r) // }) // console.log(Promise.resolve('helo') instanceof Promise) const sleep = function(ms) { return new Promise(r => { console.log(xxxxx + 3) setTimeout(() => { r() }, ms) }) } async function sayName() { console.log(1) try { await sleep(3000) } catch (error) { console.log(' - - - ', error) } console.log(2) return 'name' } sayName().then(res => console.log(res))"},{"title":"","date":"2023-05-12T10:49:20.024Z","updated":"2023-05-12T10:49:20.024Z","comments":false,"path":"demo/2023面试准备/demo/vue2-demo.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/vue2-demo.html","excerpt":"","text":"Document 添加 姓名：, 年龄： const mixin = { mounted() { console.log('??????') this.sayHello() }, methods: { sayHello() { console.log('say hello from mixin!!!!') } } } const MyCompnent = Vue.extend({ mixins: [mixin], template: ` mixin ` }) new MyCompnent().$mount('#my-component') new Vue({ el: '#app', data() { return { student: { name: '', age: '' }, list: [] } }, methods: { add() { this.list.push(Object.assign({}, this.student)) } } })"},{"title":"","date":"2023-05-12T10:49:20.025Z","updated":"2023-05-12T10:49:20.025Z","comments":false,"path":"demo/2023面试准备/demo/vue3-demo.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/vue3-demo.html","excerpt":"","text":"Document"},{"title":"","date":"2023-05-12T10:49:20.039Z","updated":"2023-05-12T10:49:20.039Z","comments":false,"path":"demo/webcomponent/composed-path/index.html","permalink":"http://yoursite.com/demo/webcomponent/composed-path/index.html","excerpt":"","text":"Document composed and composedPath demo"},{"title":"","date":"2023-05-12T10:49:20.040Z","updated":"2023-05-12T10:49:20.040Z","comments":false,"path":"demo/webcomponent/element-details-template/index.html","permalink":"http://yoursite.com/demo/webcomponent/element-details-template/index.html","excerpt":"","text":"Document element-details-template details {font-family: \"Open Sans Light\",Helvetica,Arial} .name {font-weight: bold; color: #217ac0; font-size: 120%} h4 { margin: 10px 0 -8px 0; } h4 span { background: #217ac0; padding: 2px 6px 2px 6px } h4 span { border: 1px solid #cee9f9; border-radius: 4px } h4 span { color: white } .attributes { margin-left: 22px; font-size: 90% } .attributes p { margin-left: 16px; font-style: italic } dl { margin-left: 6px; } dt { font-weight: bold; color: #217ac0; font-size: 110% } dt { font-family: Consolas, \"Liberation Mono\", Courier } dd { margin-left: 16px } &lt;NEED NAME&gt; NEED DESCRIPTION Attributes None Hello_AlexCc A mechanism for holding client- side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript. name The name of the slot."},{"title":"","date":"2023-05-12T10:49:20.040Z","updated":"2023-05-12T10:49:20.040Z","comments":false,"path":"demo/webcomponent/composed-path/main.js","permalink":"http://yoursite.com/demo/webcomponent/composed-path/main.js","excerpt":"","text":"customElements.define('open-shadow', class extends HTMLElement { constructor() { super(); } connectedCallback() { const pElem = document.createElement('p'); pElem.textContent = this.getAttribute('text'); const shadowRoot = this.attachShadow({mode: 'open'}); shadowRoot.appendChild(pElem); } } ); customElements.define('closed-shadow', class extends HTMLElement { constructor() { super(); } connectedCallback() { const pElem = document.createElement('p'); pElem.textContent = this.getAttribute('text'); const shadowRoot = this.attachShadow({mode: 'closed'}); shadowRoot.appendChild(pElem); } } ); document.querySelector('html').addEventListener('click', e => { console.log(e.composed); console.log(e.composedPath()); });"},{"title":"","date":"2023-05-12T10:49:20.040Z","updated":"2023-05-12T10:49:20.040Z","comments":false,"path":"demo/webcomponent/element-details-template/main.js","permalink":"http://yoursite.com/demo/webcomponent/element-details-template/main.js","excerpt":"","text":"class DetailsElement extends HTMLElement { constructor() { super() const template = document.getElementById('element-details-template').content const shadowRoot = this.attachShadow({mode: 'open'}) shadowRoot.appendChild(template.cloneNode(true)) console.log('host ', shadowRoot.host === this) // ShadowRoot 附加的宿主 DOM 元素。 } } const a = customElements.define('details-element', DetailsElement) console.log('?? ', customElements.get('details-element')) console.log('?? a', a)"},{"title":"","date":"2023-05-12T10:49:20.041Z","updated":"2023-05-12T10:49:20.041Z","comments":false,"path":"demo/webcomponent/expanding-list/iframe.html","permalink":"http://yoursite.com/demo/webcomponent/expanding-list/iframe.html","excerpt":"","text":"iframe body { background-color: coral; } iframe body iframe page"},{"title":"","date":"2023-05-12T10:49:20.041Z","updated":"2023-05-12T10:49:20.041Z","comments":false,"path":"demo/webcomponent/expanding-list/index.html","permalink":"http://yoursite.com/demo/webcomponent/expanding-list/index.html","excerpt":"","text":"Life cycle callbacks test custom-square { margin: 20px; } .other { /* position: absolute; */ top: 20%; left: 50%; width: 200px; height: 200px; background-color: #808080; } Life cycle callbacks test Add custom-square to DOM Update attributes Remove custom-square from DOM Move custom-square to new Dom"},{"title":"","date":"2023-05-12T10:49:20.041Z","updated":"2023-05-12T10:49:20.041Z","comments":false,"path":"demo/webcomponent/expanding-list/main.js","permalink":"http://yoursite.com/demo/webcomponent/expanding-list/main.js","excerpt":"","text":"// Create a class for the element class Square extends HTMLElement { // Specify observed attributes so that // attributeChangedCallback will work static get observedAttributes() { return ['c', 'l']; } constructor() { // Always call super first in constructor super(); const shadow = this.attachShadow({mode: 'open'}); const div = document.createElement('div'); const style = document.createElement('style'); shadow.appendChild(style); shadow.appendChild(div); } connectedCallback() { console.log('connectedCallback 当 custom element 首次被插入文档 DOM 时，被调用。'); updateStyle(this); } disconnectedCallback() { console.log('Custom square element 从页面上被删除！'); } adoptedCallback() { console.log('Custom square element 移动到了一个新的页面？'); } attributeChangedCallback(name, oldValue, newValue) { console.log('Custom square element 属性发生了改变'); updateStyle(this); } } customElements.define('custom-square', Square); function updateStyle(elem) { const shadow = elem.shadowRoot; shadow.querySelector('style').textContent = ` div { width: ${elem.getAttribute('l')}px; height: ${elem.getAttribute('l')}px; background-color: ${elem.getAttribute('c')}; } `; } const add = document.querySelector('.add'); const update = document.querySelector('.update'); const remove = document.querySelector('.remove'); const move = document.querySelector('.move'); const other = document.querySelector('.other'); let square; update.disabled = true; remove.disabled = true; move.disabled = true; function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); } add.onclick = function() { // Create a custom square element square = document.createElement('custom-square'); square.setAttribute('l', '100'); square.setAttribute('c', 'red'); document.body.appendChild(square); update.disabled = false; remove.disabled = false; move.disabled = false; add.disabled = true; }; update.onclick = function() { // Randomly update square's attributes square.setAttribute('l', random(50, 200)); square.setAttribute('c', `rgb(${random(0, 255)}, ${random(0, 255)}, ${random(0, 255)})`); }; remove.onclick = function() { // Remove the square document.body.removeChild(square); update.disabled = true; remove.disabled = true; add.disabled = false; }; move.onclick = function() { const square1 = document.querySelector('custom-square') // move，我以为的移动到新文档 other.appendChild(square1) /** * @result 生命周期执行顺序: disconnectedCallback > connectedCallback * @desc 很尴尬，这不叫移动到新的文档么？ */ // 那我们来试试 iframe setTimeout(() => { const iframe = document.querySelector('iframe') iframe.contentDocument.querySelector('body').appendChild(square1) move.disabled = true }, 1500); // 这下就对了，生命周期执行顺序 disconnectedCallback > adoptedCallback > connectedCallback };"},{"title":"","date":"2023-05-12T10:49:20.041Z","updated":"2023-05-12T10:49:20.041Z","comments":false,"path":"demo/webcomponent/parent-send-data-to-child/index.html","permalink":"http://yoursite.com/demo/webcomponent/parent-send-data-to-child/index.html","excerpt":"","text":"Life cycle callbacks test 00 Child Button parent template"},{"title":"","date":"2023-05-12T10:49:20.042Z","updated":"2023-05-12T10:49:20.042Z","comments":false,"path":"demo/webcomponent/parent-send-data-to-child/main.js","permalink":"http://yoursite.com/demo/webcomponent/parent-send-data-to-child/main.js","excerpt":"","text":"class ParentWc extends HTMLElement { constructor() { super() this.data = { value: 'Parent instance value' } const template = document.getElementById('parent').content const shadowRoot = this.attachShadow({mode: 'open'}) shadowRoot.appendChild(template.cloneNode(true)) } sayHello(msg) { console.log(msg, this.data) } connectedCallback() { const child = this.shadowRoot.querySelector('child-wc') // 1. 通过 DOM 属性传参 // child.setAttribute('text', 'Parent changed the Text') // 2. 通过组件实例直接修改内部数据（目前主流的形式） // console.log('??', child) // 3. 事件监听 child.addEventListener('custom-event', ({ detail }) => { console.log('事件触发 ', detail.value); }) } } window.customElements.define('parent-wc', ParentWc) // childWc class ChildWc extends HTMLElement { constructor() { super() this.data = { value: 'Child instance value' } Object.defineProperty(this.data, 'text', { set: value => { console.log('data text changed: ', value) } }) const template = document.getElementById('child').content const shadowRoot = this.attachShadow({mode: 'open'}) shadowRoot.appendChild(template.cloneNode(true)) } // 必须先申明需要监听的属性 static get observedAttributes() { return ['text']; } connectedCallback() { const event = new CustomEvent('custom-event', { detail: { value: 'child web component' } }) this.dispatchEvent(event) const btn = this.shadowRoot.querySelector('button') btn.addEventListener('click', () => { // 获取父组件 this.getRootNode().host.sayHello('Hello :') }) } attributeChangedCallback(name, oldValue, newValue) { console.log('name', name) console.log('oldValue', oldValue) console.log('newValue', newValue) } } window.customElements.define('child-wc', ChildWc);"},{"title":"","date":"2023-05-12T10:49:20.042Z","updated":"2023-05-12T10:49:20.042Z","comments":false,"path":"demo/webcomponent/popup-info-box/index.html","permalink":"http://yoursite.com/demo/webcomponent/popup-info-box/index.html","excerpt":"","text":"Document Pop-up info widget - web components Enter your CVC"},{"title":"","date":"2023-05-12T10:49:20.043Z","updated":"2023-05-12T10:49:20.043Z","comments":false,"path":"demo/webcomponent/popup-info-box/main.js","permalink":"http://yoursite.com/demo/webcomponent/popup-info-box/main.js","excerpt":"","text":"// Create a class for the element class PopUpInfo extends HTMLElement { constructor() { // Always call super first in constructor super(); } connectedCallback() { /** * @name connectedCallback函数 * @desc 当 custom element 首次被插入文档 DOM 时，被调用。 */ // Create a shadow root const shadow = this.attachShadow({mode: 'open'}); // Create spans const wrapper = document.createElement('span'); wrapper.setAttribute('class', 'wrapper'); const icon = document.createElement('span'); icon.setAttribute('class', 'icon'); icon.setAttribute('tabindex', 0); const info = document.createElement('span'); info.setAttribute('class', 'info'); /** * @name 🔥🔥🔥 我们想要获取元素上的属性，必须放在 connectedCallback 函数内去获取 * @desc 因为只有元素插入到了 dom 中，才能获取到 */ const text = this.getAttribute('data-text'); info.textContent = text; // Insert icon let imgUrl; if(this.hasAttribute('img')) { imgUrl = this.getAttribute('img'); } else { // imgUrl = './img/avatar.jpg'; } const img = document.createElement('img'); img.src = imgUrl; icon.appendChild(img); // Create some CSS to apply to the shadow dom const style = document.createElement('style'); console.log(style.isConnected); style.textContent = ` .wrapper { position: relative; } .info { font-size: 0.8rem; width: 200px; display: inline-block; border: 1px solid black; padding: 10px; background: white; border-radius: 10px; opacity: 0; transition: 0.6s all; position: absolute; bottom: 20px; left: 10px; z-index: 3; } img { width: 1.2rem; } .icon:hover + .info, .icon:focus + .info { opacity: 1; } `; // Attach the created elements to the shadow dom shadow.appendChild(style); // 一开始这个style.isConnected 为false，把他添加给shadow Root后 isConnected就为true了 console.log(style.isConnected); shadow.appendChild(wrapper); wrapper.appendChild(icon); wrapper.appendChild(info); } } // Define the new element customElements.define('popup-info', PopUpInfo);"},{"title":"","date":"2023-05-12T10:49:20.043Z","updated":"2023-05-12T10:49:20.043Z","comments":false,"path":"demo/webcomponent/template&slot/index.html","permalink":"http://yoursite.com/demo/webcomponent/template&slot/index.html","excerpt":"","text":"Document template & slot Default Title default slot My paragraph Slot title"},{"title":"","date":"2023-05-12T10:49:20.043Z","updated":"2023-05-12T10:49:20.043Z","comments":false,"path":"demo/webcomponent/quark-design/index.html","permalink":"http://yoursite.com/demo/webcomponent/quark-design/index.html","excerpt":"","text":"Document Quark Design 默认按钮 danger"},{"title":"","date":"2023-05-12T10:49:20.021Z","updated":"2023-05-12T10:49:20.021Z","comments":false,"path":"demo/2023面试准备/demo/module/babel.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/babel.js","excerpt":"","text":"class Person { sayName() { alert(this.name) } }"},{"title":"","date":"2023-05-12T10:49:20.043Z","updated":"2023-05-12T10:49:20.043Z","comments":false,"path":"demo/webcomponent/template&slot/main.js","permalink":"http://yoursite.com/demo/webcomponent/template&slot/main.js","excerpt":"","text":"// 单独使用 // window.onload = function() { // let template = document.getElementById('my-paragraph'); // let templateContent = template.content; // document.body.appendChild(templateContent); // } // 在 Web Components 中使用模板 class MyParagraph extends HTMLElement { constructor() { super() } connectedCallback() { let template = document.getElementById('my-paragraph'); let templateContent = template.content; this.attachShadow({ mode: 'open' }) .appendChild(templateContent.cloneNode(true)) } } customElements.define('my-paragraph', MyParagraph)"},{"title":"","date":"2023-05-12T10:49:20.021Z","updated":"2023-05-12T10:49:20.021Z","comments":false,"path":"demo/2023面试准备/demo/module/compiled.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/compiled.js","excerpt":"","text":"let cat = 'is caaat...';"},{"title":"","date":"2023-05-12T10:49:20.021Z","updated":"2023-05-12T10:49:20.021Z","comments":false,"path":"demo/2023面试准备/demo/module/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/index.html","excerpt":"","text":"Document"},{"title":"","date":"2023-05-12T10:49:20.022Z","updated":"2023-05-12T10:49:20.022Z","comments":false,"path":"demo/2023面试准备/demo/module/lib.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/lib.js","excerpt":"","text":"export let count = 3 export function incCount() { count++ return true }"},{"title":"","date":"2023-05-12T10:49:20.022Z","updated":"2023-05-12T10:49:20.022Z","comments":false,"path":"demo/2023面试准备/demo/module/main.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/main.js","excerpt":"","text":"import { count, incCount } from './lib.js' incCount() console.log(count)"},{"title":"","date":"2023-05-12T10:49:20.022Z","updated":"2023-05-12T10:49:20.022Z","comments":false,"path":"demo/2023面试准备/demo/module/myPlugin.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/myPlugin.js","excerpt":"","text":"module.exports = function(params) { console.log('params', params) return { visitor: {} } }"},{"title":"","date":"2023-05-12T10:49:20.024Z","updated":"2023-05-12T10:49:20.024Z","comments":false,"path":"demo/2023面试准备/demo/module/package.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/package.json","excerpt":"","text":"{\"name\":\"module\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"main.js\",\"scripts\":{\"dev\":\"node main.js\"},\"type\":\"module\",\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"devDependencies\":{\"babel-cli\":\"^6.26.0\",\"babel-core\":\"^6.26.3\",\"babel-plugin-transform-runtime\":\"^6.23.0\",\"babel-preset-env\":\"^1.7.0\",\"babel-runtime\":\"^6.26.0\"}}"},{"title":"","date":"2023-05-12T10:49:20.024Z","updated":"2023-05-12T10:49:20.024Z","comments":false,"path":"demo/2023面试准备/demo/module/plugin-test.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/plugin-test.js","excerpt":"","text":"const dog = 'is dog'"},{"title":"","date":"2023-05-12T10:49:20.024Z","updated":"2023-05-12T10:49:20.024Z","comments":false,"path":"demo/2023面试准备/demo/module/plugin.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/plugin.js","excerpt":"","text":"module.exports = function({ types: t }) { return { visitor: { Identifier(path, state) { // console.log('🔥', path.node) // console.log('🔥', path.parent) path.node.name = 'cat' }, VariableDeclaration(path, state) { // console.log('🔥', path.node) if (path.node.kind === 'const') { path.node.kind = 'let' } }, Literal(path, state) { console.log('🔥', state.opts) path.node.value = 'is caaat...' } } } }"},{"title":"","date":"2023-05-12T10:49:20.034Z","updated":"2023-05-12T10:49:20.034Z","comments":false,"path":"demo/2023面试准备/模块化.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%A8%A1%E5%9D%97%E5%8C%96.html","excerpt":"","text":"Module在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。 ES6在语言规格的层面上实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。 stage1 文件划分方式，约定每一个 js 文件就是一个独立的模块 12345678910&lt;script src=&quot;./lib.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;&lt;script&gt; // 直接使用导入文件中的变量与方法 method1() // 模块成员可以被修改 count = 2&lt;/script&gt; 缺点： 污染全局作用域 命名冲突 无法管理模块间的依赖关系 模块成员可以在外部直接修改 stage2 命名空间，减少命名冲突 每个文件中，通过一个命名对象来包裹所有的变量和方法 123456789// module a 相关的数据和方法const moduleA = &#123; name: &#x27;module a&#x27;, count: 1, incCount() &#123; this.count ++ &#125;&#125; 缺点： 污染全局作用域 无法管理模块间的依赖关系 模块成员可以在外部直接修改 stage3 IIFE（立即执行函数） 1234567891011;(function($)&#123; const name = &#x27;moduleA&#x27; let count = 1 function incCount() &#123; count++ &#125; window.moduleA = &#123; incCount &#125;&#125;)(jQuery) 通过闭包的方式，模块内部的变量只能被模块内部修改，外部无法修改。 通过 IIFE 的传参，我们可以传递一些依赖包给模块使用。 模块化规范 CommonJS（NodeJS） 一个文件就是一个模块 每个模块都有单独的作用域 通过 module.exports 导出成员 通过 require 函数加载成员 以同步的方式加载模块，如果放在浏览器中，那么会出现大量的文件请求，有时候并不是立马就需要的文件也会被加载，从而造成性能问题，不适合在浏览器中使用。 AMD（Asyncronous module definition） 异步的模块定义 12345678910111213141516171819// 定义一个模块// 第二个参数表示当前模块的依赖项define(&#x27;module1&#x27;, [&#x27;lodash&#x27;, &#x27;./module2&#x27;], function(&#x27;lodash&#x27;, &#x27;module2&#x27;) &#123; // 导出成员，外部可以方法 start 方法 return &#123; start:function() &#123; // lodash module2() &#125; &#125;&#125;) // 加载模块 require(&#x27;./module1&#x27;, function(module1) &#123; module1.start() &#125;) CMD规范（类似 CommonJS） ES Modules（浏览器） ES6 模块化12345&lt;script src=&quot;./main.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;&lt;script type=&quot;module&quot;&gt; console.log(1)&lt;/script&gt; 特性： ES6的模块自动采用严格模式，不管有没有在模块头部加上＂use strict＂。 每个 ES Module 都运行在私有作用域中 ESM 是通过 CORS(跨域) 的方式去请求外部的 JS 资源的。（原 script 标签默认支持跨域） ESM 的 script 标签会延迟执行脚本（类似标签的 defer 属性），等待网页渲染完成后，再执行。123456789// 会比有 type=&quot;module&quot; 的script 先执行&lt;script&gt; alert(&#x27;hello&#x27;)&lt;/script&gt;// 延迟执行&lt;script type=&quot;module&quot;&gt; // 等同于加了 defer 属性 console.log(1)&lt;/script&gt; 严格模式主要有以下限制： 变量必须声明后再使用。 函数的参数不能有同名属性，否则报错。 不能使用with语句。 不能对只读属性赋值，否则报错。 不能使用前缀0表示八进制数，否则报错。 不能删除不可删除的属性，否则报错。 不能删除变量(delete prop)，会报错，只能删除属性(delete global[prop])。 eval不会在其外层作用域引入变量。 eval和arguments不能被重新赋值。 arguments不会自动反映函数参数的变化。 不能使用arguments.callee。 不能使用arguments.caller。 禁止this指向全局对象。 不能使用fn.caller和fn.arguments获取函数调用的堆栈。 增加了保留字（比如protected、static和interface）。 export &amp; import模块功能主要由两个命令构成：export和import。 export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。 如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。 12345678910111213// test.jsexport const myName = &#x27;Hello_AlexCC&#x27;// 组合导出const myAge = 18const sayMe = function() &#123; console.log(`my name is $&#123;myName&#125;, and I&#x27;m $&#123;myAge&#125; years old!`)&#125;export &#123; myAge, sayMe&#125; 如果在一个模块中先输入后输出同一个模块，import语句可以与export语句写在一起。 123456export &#123; sayName as default&#125; from &#x27;./someModule&#x27;// 等价于import &#123; sayName &#125; from &#x27;./someModule&#x27;export default sayName 另外，ES7有一个提案(https://github.com/leebyron/ecmascript-more-export-from)，简化先输入后输出的写法，拿掉了输出时的大括号。 12345// 提案export v from &#x27;mod&#x27;// 现在export &#123; v &#125; from &#x27;mod&#x27; import语句会执行所加载的模块 1import &#x27;lodash&#x27; 模块整体加载1import * as myModule from &#x27;./myModule&#x27; module 命令module命令可以取代import语句，达到整体输入模块的作用。 123module myModule from &#x27;./myModule&#x27;myModule.sayName() 动态加载模块返回的是 Promise 123import(&#x27;./moduleA.js&#x27;).then(module =&gt; &#123; ...&#125;) ES6模块加载的实质ES6模块加载的机制与CommonJS模块完全不同。 CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是 值的引用。 1234567891011121314// lib.jsexport let count = 1export function incCount() &#123; count++&#125;// main.jsimport &#123; count, incCount &#125; from &#x27;./lib.js&#x27;console.log(count) // 1incCount()console.log(count) // 2 注意加上 type=”module” 1&lt;script src=&quot;./main.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt; ES Module in NodeJS如何在 Nodejs 中使用 ES module! 有两个步骤： .js 后缀都改为 .mjs 执行脚本时，加上 node --experimental-modules main.mjs 12345// node// main.mjsimport fs from &#x27;fs&#x27;import _ from &#x27;lodash&#x27; 注意事项： 在 node 环境中，我们可以使用 ES Module 导入 CommonJS 导出的成员 123456789// commonjs.jsmodule.exports = &#123; foo: &#x27;commonjs exports foo&#x27;&#125;// esmodule.jsimport mod from &#x27;./commonjs.js&#x27;console.log(mod.foo) 在 node 环境中，CommonJS 中不能导入 ES Module 导出的成员 1const mod = require(&#x27;./esmodule.js&#x27;) // 报错 CommonJS 与 ES Module 差异1234567891011// CommonJSrequire // 加载模块函数module // 模块对象exports // 导出对象别名 exports.name = &#x27;hello world&#x27;__filename // 当前文件的绝对路径__dirname // 当前文件所在目录 12345678910// ES Moduleimport.meta.url // 文件路径信息// 可以通过内置模块 url 和 path 处理，拿到 __filename 和 __dirnameimport &#123; fileURLToPath &#125; from &#x27;url&#x27;import &#123; dirname &#125; from &#x27;path&#x27;const __filename = fileURLToPath(import.meta.url)const __dirname = dirname(__filename) 高版本 NodeJS 已支持 ESM (Version &gt; 12.10.0)不需要再写 .mjs 结尾了，直接 .js 1234567// package.json&#123; &quot;type&quot;: &quot;module&quot;&#125;// 执行node --experimental-modules main.js 加上 type module 配置之后，如果我们还想用 CommonJS 规范，发现会报错了。因为我们已经使用了 ESM。 如果继续使用 CommonJS 规范，那么就需要将 .js 改为 .cjs。 ESM in NodeJS （babel 兼容方案） yarn add @babel/node @babel/preset-env –save-dev 12// 通过 babel-node 命令执行脚本yarn babel-node main.js 要注意的是，babel/core 并不会转换我们的代码，转换代码的工作交给 babel 内置的插件去实现的。也就是说，我们需要一个插件，去转换 ES6 中的一个新特性。 而 @bable/preset-env 是插件的集合，所以不需要每个插件都安装一遍。 12// 命令行使用yarn babel-node main.js --presets=@bable/preset-env 结合 babel 配置文件使用 123456// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/presets-env&quot;]&#125;yarn babel-node main.js 既然 @babel/preset-env 是插件的集合，而我不想要那么多，只是想处理 ESM 怎么办呢？ 我们卸载掉 @babel/preset-env，安装 @babel/plugin-transform-modules-commonjs 123456// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/plugin-transform-modules-commonjs&quot;]&#125;yarn babel-node main.js babel 编译器 主要用于将ES6版本的JS代码转换为ES5等向后兼容的JS代码，从而使代码可以运行在低版本浏览器或其他环境中。 npm install –save-dev babel-core babel-preset-es2015 babel-preset-latest –registry=https://registry.npm.taobao.org 配置文件 .babelrc（或者 babel.config.js || .babelrc.js） 1234&#123; &quot;presets&quot;: [&quot;es2015&quot;, &quot;latest&quot;], // 安装包的别名，用来处理最新的 ES6 语法 &quot;plugins&quot;: []&#125; 安装 babel-cli，命令行编译工具，依赖 babel/core 1npm install --save-dev babel-cli 查看 babel 版本（npx 是新版 NodeJS 附带的命令） 123npx babel --version // ===== node_modules/.bin/babel --version // ====&gt; 6.26.0 (babel-core 6.26.3) 到这里，我们就可以使用 babel 来编译js 文件了。创建一个 babel.js 文件，写入一些 es6 的语法。 1234567// babel.jsconst foo = () =&gt; &#123; return 3 * 3&#125;const count = 123 打开命令行工具： 1npx babel babel.js -o compiled.js // 等效 node_modules/.bin/babel babel.js -o compiled.js 转化后的结果： 1234567&quot;use strict&quot;;var foo = function foo() &#123; return 3 * 3;&#125;;var count = 123; PolyfillBabel默认只转换新的JS语法（syntax），而不转换新的API（Promise、Map）。如果只是做语法转换，Promise 是不会被降级的，在低版本的浏览器中可能无法使用。 引入 Polyfill，为当前环境提供一个“垫片”。所谓“垫片”，是指垫平不同浏览器之间差异的东西。polyfill提供了全局的ES6对象及通过修改原型链Array.prototype等来补充对实例的实现。 babel 版本Babel版本主要是Babel 6和Babel 7这两个版本。 提到Babel版本的时候，通常指的是@babel/core这个Babel核心包的版本。 Babel 7的npm包都存放在babel域下，即在安装npm包的时候，我们安装的是名称以@babel/开头的npm包，如@babel/cli、@babel/core等。而在Babel 6中，我们安装的包名是babel-cli、babel-core等以babel-开头的npm包。其实它们本质上是一样的，都是Babel官方提供的cli命令行工具和core核心包。在平时开发和学习的过程中，碰到@babel/和babel-时应该认识到它俩是作用相同、内容接近的包，只是版本不一样而已。 babel 配置文件 指定编译的规则。 1.babelrc || babel.config.js || .babelrc.js || package.json（配置 babel 属性，配置项都是 一样的） 123456789101112// package.json&#123; ... babel: &#123; &quot;presets&quot;: [&quot;es2015&quot;, &quot;react&quot;], &quot;plugin&quot;: [&quot;transform-class-properties&quot;] &#125;, ...&#125; 推荐使用后缀名是js的配置文件来进行配置，因为可以使用该文件做一些逻辑处理，适用性更强。 插件 &amp; 预设plugin代表插件，preset代表预设。通常每个插件或预设都是一个npm包。 Babel的插件实在太多了，假如只配置插件数组，那我们前端工程要把ES2015、ES2016、ES2017……下的所有插件都写到配置项里，这样的Babel配置文件会非常臃肿。 preset预设就是帮我们解决这个问题的。预设是一组Babel插件的集合，通俗的说法就是插件包，例如babel-preset-es2015就是所有处理ES2015的二十多个Babel插件的集合。这样我们就不用写一大堆插件配置项了，只需要用一个预设代替就可以。另外，预设也可以是插件和其他预设的集合。 Babel官方已经针对常用的环境做了如下这些preset包。 1）@babel/preset-env. 2）@babel/preset-react. 3）@babel/preset-typescript. 4）@babel/preset-stage-0. 5）@babel/preset-stage-1. 插件与预设的简称如果插件的npm包名称的前缀为babel-plugin-，则可以省略其前缀。 如果npm包名称的前缀带有npm作用域@，如@org/babel-plugin-xxx，则短名称可以写成@org/xxx。 123456789&#123; &quot;plugins&quot;: [&quot;babel-plugin-transform-decorators-legacy&quot;]&#125;// =====&#123; &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; 预设的短名称规则与插件的类似，预设npm包名称的前缀为babel-preset-或作用域@xxx/babel-preset-xxx的可以省略掉babel-preset-。 插件和预设执行顺序plugins插件数组和presets预设数组是有顺序要求的。如果两个插件或预设都要处理同一个代码片段，那么会根据插件和预设的顺序来执行。规则如下: 1）插件比预设先执行。 2）插件执行顺序是插件数组元素从前向后依次执行。 3）预设执行顺序是预设数组元素从后向前依次执行。 预设的选择babel-preset-latest，在Babel 6时期，是所有年代preset的集合，在Babel 6最后一个版本中，它是babel-preset-es2015、babel-preset-es2016、babel-preset-es2017的集合。 @babel/preset-env包含了babel-preset-latest的功能，并对其进行了增强，现在@babel/preset-env完全可以替代babel-preset-latest。 Babel 6 中是babel-preset-env，Babel 7版本开始，@babel/preset-env。 123456789101112131415// babel 6npm install babel-preset-env --save-dev// .babelrc&#123; &quot;presets&quot;: [&quot;env&quot;]&#125;// babel 7npm install @babel/preset-env --save-dev// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/env&quot;]&#125; 总结起来，Babel官方提供的预设，我们实际会用到的其实就只有四个。 1）@babel/preset-env. 2）@babel/preset-flow. 3）@babel/preset-react. 4）@babel/preset-typescript. 插件的选择Babel 7 官方有九十多个插件，不过其中大多数都已经整合在@babel/preset-env和@babel/preset-react等预设里了，我们在开发的时候直接使用预设就可以。 目前比较常用的插件只有@babel/plugin-transform-runtime。 browserslist在 package.json 中经常遇到这个配置项： 12345678// package.json&#123; &quot;browserslist&quot;: [ &quot;&gt; 1%&quot;, &quot;not ie &lt;= 8&quot; ]&#125; 上面配置的含义是，该项目工程的目标环境是市场份额大于1%的浏览器并且不考虑IE 8及以下的IE浏览器。 browserslist叫作目标环境配置表，除了写在package.json文件里，也可以单独写在工程目录下的.browserslistrc文件里。 我们写一个含有箭头函数的 js 文件，如果我们在browserslist里指定目标环境是Chrome 60浏览器，再来看一下转换结果: 1234// package.json&#123; &quot;browserslist&quot;: [&quot;chrome 60&quot;]&#125; 我们发现转换后的代码仍然是箭头函数，因为Chrome 60浏览器已经实现了箭头函数语法，所以不会转换成ES5的函数定义语法。 @babel/runtime我们写个 js 文件，里面包含 es6 的 class 语法: 12345class Person &#123; sayName() &#123; alert(this.name) &#125;&#125; 然后执行 babel 命令，查看转换后的结果 npx babel babel.js -o compiled.js 1234567891011121314151617181920&quot;use strict&quot;;var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;var Person = function () &#123; function Person() &#123; _classCallCheck(this, Person); &#125; _createClass(Person, [&#123; key: &quot;sayName&quot;, value: function sayName() &#123; alert(this.name); &#125; &#125;]); return Person;&#125;(); 可以看到，转换后的代码上部增加了好几个函数声明，这些函数是Babel转码时注入的，我们称之为辅助函数。@babel/preset-env在做语法转换的时候，注入了这些函数声明，以便语法转换后使用。 但这样做存在一个问题。在我们正常地进行前端工程开发的时候，少则有几十个JS文件，多则有上千个。如果每个文件里都使用了class类语法，那么会导致每个转换后的代码上部都会注入这些相同的函数声明。这会导致我们用构建工具打包出来的包体积非常大。 那么应该怎么办呢？一个思路就是，我们把这些函数声明都放在一个npm包里，需要使用的时候直接从这个包里引入我们的文件。这样即使有上千个文件，也会从相同的包里引入这些函数。使用Webpack这一类的构建工具进行打包时，我们只需要引入一次npm包里的函数，这样就做到了复用，减小了包的体积。 @babel/runtime 就是上面说的这个npm包，@babel/runtime把所有语法转换会用到的辅助函数都集中在了一起。 12345// babbel 6npm install babel-runtime --save-dev // /node_modules/babel-runtime/helpers/createClass.js// babel 7npm install @babel/runtime@7.12.5 --save-dev 然后到node_modules目录下看一下这个包的结构，找到 _classCallCheck、_defineProperties与_createClass这三个辅助函数的位置，我们直接引入即可。 这时，我们就可以替换转换后自动创建的方法，而是使用 @babel/runtime/helpers 中已有的方法。 不过，这么多辅助函数要一个个记住并手动引入，是很难做到的。这时Babel插件 @babel/plugin-transform-runtime 就可以用来帮我们解决这个问题。 @babel/plugin-transform-runtime辅助函数的自动引入。 @babel/plugin-transform-runtime有三大作用，其中之一就是自动移除语法转换后内联的辅助函数（inline Babel helpers），而是使用@babel/runtime/helpers里的辅助函数来替代，这样就减少了我们手动引入的麻烦。 12345// babel6npm install babel-plugin-transform-runtime --save-dev// babel 7npm install @babel/plugin-transform-runtime@7.12.10 --save-dev 123&#123; &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;] // babel 6: &quot;babel-plugin-transform-runtime&quot;&#125; 还是上面的例子，我们再看看转换后的结果，会发现插件已经自动帮我们处理了。 12345678910111213141516171819202122232425&quot;use strict&quot;;var _classCallCheck2 = require(&quot;babel-runtime/helpers/classCallCheck&quot;);var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require(&quot;babel-runtime/helpers/createClass&quot;);var _createClass3 = _interopRequireDefault(_createClass2);function _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;var Person = function () &#123; function Person() &#123; (0, _classCallCheck3.default)(this, Person); &#125; (0, _createClass3.default)(Person, [&#123; key: &quot;sayName&quot;, value: function sayName() &#123; alert(this.name); &#125; &#125;]); return Person;&#125;(); 实际进行前端开发时，我们除了安装@babel/runtime包，基本也会安装@babel/plugin-transform-runtime这个Babel插件。 Babel 原理与插件开发Babel的转码过程主要由三个阶段组成：解析（parse）、转换（transform）和生成（generate）。这三个阶段分别由@babel/parser、@babel/core和@babel/generator来完成。 解析阶段 该阶段由Babel读取源码并生成抽象语法树（AST），该阶段由两部分组成：词法分析与语法分析。 词法分析会将字符串形式的代码转换成tokens流，语法分析会将tokens流转换成AST。 1const name = &quot;hello AlexCc&quot; AST 1234567891011121314-#1 type: VariableDeclaration declarations #1 type: VariableDeclarator id type: Identifier name: name init type: Literal value: hello AlexCc raw: &quot;hello AlexCc&quot; kind: const 转换阶段 完成了解析工作，生成了AST，AST是一个树状的JSON结构。接下来就可以通过Babel插件对该树状结构执行修改操作，修改完成后就得到了新的AST。 生成阶段 通过转换阶段的工作，我们得到了新的AST。在生成阶段，我们对AST的树状JSON结构进行还原操作，生成新的JS代码，通常这就是我们需要的ES5代码。 Babel 插件开发 babel-handbook https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md 开发Babel转码插件的重点是在第二阶段（转换阶段），在这一阶段我们要从AST上找出需要转换的节点，改成我们需要的形式，最后在生成阶段把AST变回JS代码。 插件模板结构: 123456module.exports = function(&#123; types: t &#125;) &#123; return &#123; name: &#x27;pluginName&#x27;, visitor: &#123;&#125; &#125;&#125; 假设我们有这样一段代码： 1const dog = &#x27;is dog&#x27; 现在我想将 dog 变成喵咪。 12345678910111213module.exports = function(&#123; types: t &#125;) &#123; return &#123; visitor: &#123; Identifier(path, state) &#123; if (path.node.name === &#x27;dog&#x27;) &#123; path.node.name = &#x27;cat&#x27; path.parent.init.value = &#x27;is cat&#x27; &#125; &#125;, var &#125; &#125;&#125; 转换后： 1const cat = &#x27;is cat&#x27;; 我们编写Babel插件的主要工作就是修改visitor对象，该对象是遍历AST各个节点的方法。 在上面的插件里，要把变量名dog修改为cat，于是我们修改了visitor.Identifier方法，那我们如何知道要修改的是Identifier方法呢？ Babel原理里讲过Babel转码的三个阶段：解析阶段、转换阶段和生成阶段，我们编写的Babel插件实际上是在执行第二个阶段（转换阶段）的工作，该工作需要前一个阶段解析工作先完成。在解析阶段，我们得到了转码前代码的AST树状结构信息，该AST上会有Identifier等节点信息，我们编写插件的时候参考该AST的信息即可。 接着看Identifier方法，可以看到它有两个参数path和state，visitor中的每个方法都接收这两个参数，path代表路径。最后我们判断path上节点信息name是不是dog，是的话把它修改为cat即可。 同理，我们也可以修改 const、value： 12345678910111213141516171819module.exports = function(&#123; types: t &#125;) &#123; return &#123; visitor: &#123; Identifier(path, state) &#123; path.node.name = &#x27;cat&#x27; path.parent.init.value = &#x27;is cat&#x27; &#125;, VariableDeclaration(path, state) &#123; if (path.node.kind === &#x27;const&#x27;) &#123; path.node.kind = &#x27;let&#x27; &#125; &#125;, Literal(path, state) &#123; // 修改 value path.node.value = &#x27;is caaat...&#x27; &#125; &#125; &#125;&#125; 插件传参给插件传递参数，注意第一个成员变成了数组，数组的第二项是参数 123456// .babelrc&#123; &quot;plugins&quot;: [[&quot;./plugin.js&quot;, &#123; &quot;ES5&quot;: false &#125;]]&#125; 在插件中，我们可以通过 state.opts 获取到参数： 123456789// plugin.js...VariableDeclaration(path, state) &#123; if (state.opts.ES5 === true &amp;&amp; [&#x27;let&#x27;, &#x27;const&#x27;].includes(path.node.kind)) &#123; path.node.kind = &#x27;var&#x27; &#125;&#125;,..."},{"title":"","date":"2023-05-12T10:49:20.023Z","updated":"2023-05-12T10:49:20.023Z","comments":false,"path":"demo/2023面试准备/demo/module/package-lock.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/package-lock.json","excerpt":"","text":"{\"name\":\"module\",\"version\":\"1.0.0\",\"lockfileVersion\":1,\"requires\":true,\"dependencies\":{\"ansi-regex\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-regex/-/ansi-regex-2.1.1.tgz\",\"integrity\":\"sha512-TIGnTpdo+E3+pCyAluZvtED5p5wCqLdezCyhPZzKPcxvFplEt4i+W7OONCKgeZFT3+y5NZZfOOS/Bdcanm1MYA==\",\"dev\":true},\"ansi-styles\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-2.2.1.tgz\",\"integrity\":\"sha512-kmCevFghRiWM7HB5zTPULl4r9bVFSWjz62MhqizDGUrq2NWuNMQyuv4tHHoKJHs69M/MF64lEcHdYIocrdWQYA==\",\"dev\":true},\"anymatch\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/anymatch/-/anymatch-1.3.2.tgz\",\"integrity\":\"sha512-0XNayC8lTHQ2OI8aljNCN3sSx6hsr/1+rlcDAotXJR7C1oZZHCNsfpbKwMjRA3Uqb5tF1Rae2oloTr4xpq+WjA==\",\"dev\":true,\"optional\":true,\"requires\":{\"micromatch\":\"^2.1.5\",\"normalize-path\":\"^2.0.0\"}},\"arr-diff\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/arr-diff/-/arr-diff-2.0.0.tgz\",\"integrity\":\"sha512-dtXTVMkh6VkEEA7OhXnN1Ecb8aAGFdZ1LFxtOCoqj4qkyOJMt7+qs6Ahdy6p/NQCPYsRSXXivhSB/J5E9jmYKA==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-flatten\":\"^1.0.1\"}},\"arr-flatten\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/arr-flatten/-/arr-flatten-1.1.0.tgz\",\"integrity\":\"sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==\",\"dev\":true,\"optional\":true},\"arr-union\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/arr-union/-/arr-union-3.1.0.tgz\",\"integrity\":\"sha512-sKpyeERZ02v1FeCZT8lrfJq5u6goHCtpTAzPwJYe7c8SPFOboNjNg1vz2L4VTn9T4PQxEx13TbXLmYUcS6Ug7Q==\",\"dev\":true,\"optional\":true},\"array-unique\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/array-unique/-/array-unique-0.2.1.tgz\",\"integrity\":\"sha512-G2n5bG5fSUCpnsXz4+8FUkYsGPkNfLn9YvS66U5qbTIXI2Ynnlo4Bi42bWv+omKUCqz+ejzfClwne0alJWJPhg==\",\"dev\":true,\"optional\":true},\"assign-symbols\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/assign-symbols/-/assign-symbols-1.0.0.tgz\",\"integrity\":\"sha512-Q+JC7Whu8HhmTdBph/Tq59IoRtoy6KAm5zzPv00WdujX82lbAL8K7WVjne7vdCsAmbF4AYaDOPyO3k0kl8qIrw==\",\"dev\":true,\"optional\":true},\"async-each\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/async-each/-/async-each-1.0.6.tgz\",\"integrity\":\"sha512-c646jH1avxr+aVpndVMeAfYw7wAa6idufrlN3LPA4PmKS0QEGp6PIC9nwz0WQkkvBGAMEki3pFdtxaF39J9vvg==\",\"dev\":true,\"optional\":true},\"atob\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/atob/-/atob-2.1.2.tgz\",\"integrity\":\"sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==\",\"dev\":true,\"optional\":true},\"babel-cli\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-cli/-/babel-cli-6.26.0.tgz\",\"integrity\":\"sha512-wau+BDtQfuSBGQ9PzzFL3REvR9Sxnd4LKwtcHAiPjhugA7K/80vpHXafj+O5bAqJOuSefjOx5ZJnNSR2J1Qw6Q==\",\"dev\":true,\"requires\":{\"babel-core\":\"^6.26.0\",\"babel-polyfill\":\"^6.26.0\",\"babel-register\":\"^6.26.0\",\"babel-runtime\":\"^6.26.0\",\"chokidar\":\"^1.6.1\",\"commander\":\"^2.11.0\",\"convert-source-map\":\"^1.5.0\",\"fs-readdir-recursive\":\"^1.0.0\",\"glob\":\"^7.1.2\",\"lodash\":\"^4.17.4\",\"output-file-sync\":\"^1.1.2\",\"path-is-absolute\":\"^1.0.1\",\"slash\":\"^1.0.0\",\"source-map\":\"^0.5.6\",\"v8flags\":\"^2.1.1\"}},\"babel-code-frame\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-code-frame/-/babel-code-frame-6.26.0.tgz\",\"integrity\":\"sha512-XqYMR2dfdGMW+hd0IUZ2PwK+fGeFkOxZJ0wY+JaQAHzt1Zx8LcvpiZD2NiGkEG8qx0CfkAOr5xt76d1e8vG90g==\",\"dev\":true,\"requires\":{\"chalk\":\"^1.1.3\",\"esutils\":\"^2.0.2\",\"js-tokens\":\"^3.0.2\"}},\"babel-core\":{\"version\":\"6.26.3\",\"resolved\":\"https://registry.npmmirror.com/babel-core/-/babel-core-6.26.3.tgz\",\"integrity\":\"sha512-6jyFLuDmeidKmUEb3NM+/yawG0M2bDZ9Z1qbZP59cyHLz8kYGKYwpJP0UwUKKUiTRNvxfLesJnTedqczP7cTDA==\",\"dev\":true,\"requires\":{\"babel-code-frame\":\"^6.26.0\",\"babel-generator\":\"^6.26.0\",\"babel-helpers\":\"^6.24.1\",\"babel-messages\":\"^6.23.0\",\"babel-register\":\"^6.26.0\",\"babel-runtime\":\"^6.26.0\",\"babel-template\":\"^6.26.0\",\"babel-traverse\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"babylon\":\"^6.18.0\",\"convert-source-map\":\"^1.5.1\",\"debug\":\"^2.6.9\",\"json5\":\"^0.5.1\",\"lodash\":\"^4.17.4\",\"minimatch\":\"^3.0.4\",\"path-is-absolute\":\"^1.0.1\",\"private\":\"^0.1.8\",\"slash\":\"^1.0.0\",\"source-map\":\"^0.5.7\"}},\"babel-generator\":{\"version\":\"6.26.1\",\"resolved\":\"https://registry.npmmirror.com/babel-generator/-/babel-generator-6.26.1.tgz\",\"integrity\":\"sha512-HyfwY6ApZj7BYTcJURpM5tznulaBvyio7/0d4zFOeMPUmfxkCjHocCuoLa2SAGzBI8AREcH3eP3758F672DppA==\",\"dev\":true,\"requires\":{\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"detect-indent\":\"^4.0.0\",\"jsesc\":\"^1.3.0\",\"lodash\":\"^4.17.4\",\"source-map\":\"^0.5.7\",\"trim-right\":\"^1.0.1\"}},\"babel-helper-builder-binary-assignment-operator-visitor\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-builder-binary-assignment-operator-visitor/-/babel-helper-builder-binary-assignment-operator-visitor-6.24.1.tgz\",\"integrity\":\"sha512-gCtfYORSG1fUMX4kKraymq607FWgMWg+j42IFPc18kFQEsmtaibP4UrqsXt8FlEJle25HUd4tsoDR7H2wDhe9Q==\",\"dev\":true,\"requires\":{\"babel-helper-explode-assignable-expression\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-call-delegate\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-call-delegate/-/babel-helper-call-delegate-6.24.1.tgz\",\"integrity\":\"sha512-RL8n2NiEj+kKztlrVJM9JT1cXzzAdvWFh76xh/H1I4nKwunzE4INBXn8ieCZ+wh4zWszZk7NBS1s/8HR5jDkzQ==\",\"dev\":true,\"requires\":{\"babel-helper-hoist-variables\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-define-map\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-define-map/-/babel-helper-define-map-6.26.0.tgz\",\"integrity\":\"sha512-bHkmjcC9lM1kmZcVpA5t2om2nzT/xiZpo6TJq7UlZ3wqKfzia4veeXbIhKvJXAMzhhEBd3cR1IElL5AenWEUpA==\",\"dev\":true,\"requires\":{\"babel-helper-function-name\":\"^6.24.1\",\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"lodash\":\"^4.17.4\"}},\"babel-helper-explode-assignable-expression\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-explode-assignable-expression/-/babel-helper-explode-assignable-expression-6.24.1.tgz\",\"integrity\":\"sha512-qe5csbhbvq6ccry9G7tkXbzNtcDiH4r51rrPUbwwoTzZ18AqxWYRZT6AOmxrpxKnQBW0pYlBI/8vh73Z//78nQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-function-name\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-function-name/-/babel-helper-function-name-6.24.1.tgz\",\"integrity\":\"sha512-Oo6+e2iX+o9eVvJ9Y5eKL5iryeRdsIkwRYheCuhYdVHsdEQysbc2z2QkqCLIYnNxkT5Ss3ggrHdXiDI7Dhrn4Q==\",\"dev\":true,\"requires\":{\"babel-helper-get-function-arity\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-get-function-arity\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-get-function-arity/-/babel-helper-get-function-arity-6.24.1.tgz\",\"integrity\":\"sha512-WfgKFX6swFB1jS2vo+DwivRN4NB8XUdM3ij0Y1gnC21y1tdBoe6xjVnd7NSI6alv+gZXCtJqvrTeMW3fR/c0ng==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-hoist-variables\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-hoist-variables/-/babel-helper-hoist-variables-6.24.1.tgz\",\"integrity\":\"sha512-zAYl3tqerLItvG5cKYw7f1SpvIxS9zi7ohyGHaI9cgDUjAT6YcY9jIEH5CstetP5wHIVSceXwNS7Z5BpJg+rOw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-optimise-call-expression\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-optimise-call-expression/-/babel-helper-optimise-call-expression-6.24.1.tgz\",\"integrity\":\"sha512-Op9IhEaxhbRT8MDXx2iNuMgciu2V8lDvYCNQbDGjdBNCjaMvyLf4wl4A3b8IgndCyQF8TwfgsQ8T3VD8aX1/pA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-regex\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-regex/-/babel-helper-regex-6.26.0.tgz\",\"integrity\":\"sha512-VlPiWmqmGJp0x0oK27Out1D+71nVVCTSdlbhIVoaBAj2lUgrNjBCRR9+llO4lTSb2O4r7PJg+RobRkhBrf6ofg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"lodash\":\"^4.17.4\"}},\"babel-helper-remap-async-to-generator\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-remap-async-to-generator/-/babel-helper-remap-async-to-generator-6.24.1.tgz\",\"integrity\":\"sha512-RYqaPD0mQyQIFRu7Ho5wE2yvA/5jxqCIj/Lv4BXNq23mHYu/vxikOy2JueLiBxQknwapwrJeNCesvY0ZcfnlHg==\",\"dev\":true,\"requires\":{\"babel-helper-function-name\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-replace-supers\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-replace-supers/-/babel-helper-replace-supers-6.24.1.tgz\",\"integrity\":\"sha512-sLI+u7sXJh6+ToqDr57Bv973kCepItDhMou0xCP2YPVmR1jkHSCY+p1no8xErbV1Siz5QE8qKT1WIwybSWlqjw==\",\"dev\":true,\"requires\":{\"babel-helper-optimise-call-expression\":\"^6.24.1\",\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helpers\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helpers/-/babel-helpers-6.24.1.tgz\",\"integrity\":\"sha512-n7pFrqQm44TCYvrCDb0MqabAF+JUBq+ijBvNMUxpkLjJaAu32faIexewMumrH5KLLJ1HDyT0PTEqRyAe/GwwuQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-messages\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-messages/-/babel-messages-6.23.0.tgz\",\"integrity\":\"sha512-Bl3ZiA+LjqaMtNYopA9TYE9HP1tQ+E5dLxE0XrAzcIJeK2UqF0/EaqXwBn9esd4UmTfEab+P+UYQ1GnioFIb/w==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-check-es2015-constants\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-check-es2015-constants/-/babel-plugin-check-es2015-constants-6.22.0.tgz\",\"integrity\":\"sha512-B1M5KBP29248dViEo1owyY32lk1ZSH2DaNNrXLGt8lyjjHm7pBqAdQ7VKUPR6EEDO323+OvT3MQXbCin8ooWdA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-syntax-async-functions\":{\"version\":\"6.13.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-syntax-async-functions/-/babel-plugin-syntax-async-functions-6.13.0.tgz\",\"integrity\":\"sha512-4Zp4unmHgw30A1eWI5EpACji2qMocisdXhAftfhXoSV9j0Tvj6nRFE3tOmRY912E0FMRm/L5xWE7MGVT2FoLnw==\",\"dev\":true},\"babel-plugin-syntax-exponentiation-operator\":{\"version\":\"6.13.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-syntax-exponentiation-operator/-/babel-plugin-syntax-exponentiation-operator-6.13.0.tgz\",\"integrity\":\"sha512-Z/flU+T9ta0aIEKl1tGEmN/pZiI1uXmCiGFRegKacQfEJzp7iNsKloZmyJlQr+75FCJtiFfGIK03SiCvCt9cPQ==\",\"dev\":true},\"babel-plugin-syntax-trailing-function-commas\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.22.0.tgz\",\"integrity\":\"sha512-Gx9CH3Q/3GKbhs07Bszw5fPTlU+ygrOGfAhEt7W2JICwufpC4SuO0mG0+4NykPBSYPMJhqvVlDBU17qB1D+hMQ==\",\"dev\":true},\"babel-plugin-transform-async-to-generator\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-async-to-generator/-/babel-plugin-transform-async-to-generator-6.24.1.tgz\",\"integrity\":\"sha512-7BgYJujNCg0Ti3x0c/DL3tStvnKS6ktIYOmo9wginv/dfZOrbSZ+qG4IRRHMBOzZ5Awb1skTiAsQXg/+IWkZYw==\",\"dev\":true,\"requires\":{\"babel-helper-remap-async-to-generator\":\"^6.24.1\",\"babel-plugin-syntax-async-functions\":\"^6.8.0\",\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-arrow-functions\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-arrow-functions/-/babel-plugin-transform-es2015-arrow-functions-6.22.0.tgz\",\"integrity\":\"sha512-PCqwwzODXW7JMrzu+yZIaYbPQSKjDTAsNNlK2l5Gg9g4rz2VzLnZsStvp/3c46GfXpwkyufb3NCyG9+50FF1Vg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-block-scoped-functions\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-block-scoped-functions/-/babel-plugin-transform-es2015-block-scoped-functions-6.22.0.tgz\",\"integrity\":\"sha512-2+ujAT2UMBzYFm7tidUsYh+ZoIutxJ3pN9IYrF1/H6dCKtECfhmB8UkHVpyxDwkj0CYbQG35ykoz925TUnBc3A==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-block-scoping\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-block-scoping/-/babel-plugin-transform-es2015-block-scoping-6.26.0.tgz\",\"integrity\":\"sha512-YiN6sFAQ5lML8JjCmr7uerS5Yc/EMbgg9G8ZNmk2E3nYX4ckHR01wrkeeMijEf5WHNK5TW0Sl0Uu3pv3EdOJWw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"babel-template\":\"^6.26.0\",\"babel-traverse\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"lodash\":\"^4.17.4\"}},\"babel-plugin-transform-es2015-classes\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-classes/-/babel-plugin-transform-es2015-classes-6.24.1.tgz\",\"integrity\":\"sha512-5Dy7ZbRinGrNtmWpquZKZ3EGY8sDgIVB4CU8Om8q8tnMLrD/m94cKglVcHps0BCTdZ0TJeeAWOq2TK9MIY6cag==\",\"dev\":true,\"requires\":{\"babel-helper-define-map\":\"^6.24.1\",\"babel-helper-function-name\":\"^6.24.1\",\"babel-helper-optimise-call-expression\":\"^6.24.1\",\"babel-helper-replace-supers\":\"^6.24.1\",\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-computed-properties\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-computed-properties/-/babel-plugin-transform-es2015-computed-properties-6.24.1.tgz\",\"integrity\":\"sha512-C/uAv4ktFP/Hmh01gMTvYvICrKze0XVX9f2PdIXuriCSvUmV9j+u+BB9f5fJK3+878yMK6dkdcq+Ymr9mrcLzw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-destructuring\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-destructuring/-/babel-plugin-transform-es2015-destructuring-6.23.0.tgz\",\"integrity\":\"sha512-aNv/GDAW0j/f4Uy1OEPZn1mqD+Nfy9viFGBfQ5bZyT35YqOiqx7/tXdyfZkJ1sC21NyEsBdfDY6PYmLHF4r5iA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-duplicate-keys\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-duplicate-keys/-/babel-plugin-transform-es2015-duplicate-keys-6.24.1.tgz\",\"integrity\":\"sha512-ossocTuPOssfxO2h+Z3/Ea1Vo1wWx31Uqy9vIiJusOP4TbF7tPs9U0sJ9pX9OJPf4lXRGj5+6Gkl/HHKiAP5ug==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-for-of\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-for-of/-/babel-plugin-transform-es2015-for-of-6.23.0.tgz\",\"integrity\":\"sha512-DLuRwoygCoXx+YfxHLkVx5/NpeSbVwfoTeBykpJK7JhYWlL/O8hgAK/reforUnZDlxasOrVPPJVI/guE3dCwkw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-function-name\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-function-name/-/babel-plugin-transform-es2015-function-name-6.24.1.tgz\",\"integrity\":\"sha512-iFp5KIcorf11iBqu/y/a7DK3MN5di3pNCzto61FqCNnUX4qeBwcV1SLqe10oXNnCaxBUImX3SckX2/o1nsrTcg==\",\"dev\":true,\"requires\":{\"babel-helper-function-name\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-literals\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-literals/-/babel-plugin-transform-es2015-literals-6.22.0.tgz\",\"integrity\":\"sha512-tjFl0cwMPpDYyoqYA9li1/7mGFit39XiNX5DKC/uCNjBctMxyL1/PT/l4rSlbvBG1pOKI88STRdUsWXB3/Q9hQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-modules-amd\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-amd/-/babel-plugin-transform-es2015-modules-amd-6.24.1.tgz\",\"integrity\":\"sha512-LnIIdGWIKdw7zwckqx+eGjcS8/cl8D74A3BpJbGjKTFFNJSMrjN4bIh22HY1AlkUbeLG6X6OZj56BDvWD+OeFA==\",\"dev\":true,\"requires\":{\"babel-plugin-transform-es2015-modules-commonjs\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-modules-commonjs\":{\"version\":\"6.26.2\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.26.2.tgz\",\"integrity\":\"sha512-CV9ROOHEdrjcwhIaJNBGMBCodN+1cfkwtM1SbUHmvyy35KGT7fohbpOxkE2uLz1o6odKK2Ck/tz47z+VqQfi9Q==\",\"dev\":true,\"requires\":{\"babel-plugin-transform-strict-mode\":\"^6.24.1\",\"babel-runtime\":\"^6.26.0\",\"babel-template\":\"^6.26.0\",\"babel-types\":\"^6.26.0\"}},\"babel-plugin-transform-es2015-modules-systemjs\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-systemjs/-/babel-plugin-transform-es2015-modules-systemjs-6.24.1.tgz\",\"integrity\":\"sha512-ONFIPsq8y4bls5PPsAWYXH/21Hqv64TBxdje0FvU3MhIV6QM2j5YS7KvAzg/nTIVLot2D2fmFQrFWCbgHlFEjg==\",\"dev\":true,\"requires\":{\"babel-helper-hoist-variables\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-modules-umd\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-umd/-/babel-plugin-transform-es2015-modules-umd-6.24.1.tgz\",\"integrity\":\"sha512-LpVbiT9CLsuAIp3IG0tfbVo81QIhn6pE8xBJ7XSeCtFlMltuar5VuBV6y6Q45tpui9QWcy5i0vLQfCfrnF7Kiw==\",\"dev\":true,\"requires\":{\"babel-plugin-transform-es2015-modules-amd\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-object-super\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-object-super/-/babel-plugin-transform-es2015-object-super-6.24.1.tgz\",\"integrity\":\"sha512-8G5hpZMecb53vpD3mjs64NhI1au24TAmokQ4B+TBFBjN9cVoGoOvotdrMMRmHvVZUEvqGUPWL514woru1ChZMA==\",\"dev\":true,\"requires\":{\"babel-helper-replace-supers\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-parameters\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-parameters/-/babel-plugin-transform-es2015-parameters-6.24.1.tgz\",\"integrity\":\"sha512-8HxlW+BB5HqniD+nLkQ4xSAVq3bR/pcYW9IigY+2y0dI+Y7INFeTbfAQr+63T3E4UDsZGjyb+l9txUnABWxlOQ==\",\"dev\":true,\"requires\":{\"babel-helper-call-delegate\":\"^6.24.1\",\"babel-helper-get-function-arity\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-shorthand-properties\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-shorthand-properties/-/babel-plugin-transform-es2015-shorthand-properties-6.24.1.tgz\",\"integrity\":\"sha512-mDdocSfUVm1/7Jw/FIRNw9vPrBQNePy6wZJlR8HAUBLybNp1w/6lr6zZ2pjMShee65t/ybR5pT8ulkLzD1xwiw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-spread\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-spread/-/babel-plugin-transform-es2015-spread-6.22.0.tgz\",\"integrity\":\"sha512-3Ghhi26r4l3d0Js933E5+IhHwk0A1yiutj9gwvzmFbVV0sPMYk2lekhOufHBswX7NCoSeF4Xrl3sCIuSIa+zOg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-sticky-regex\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-sticky-regex/-/babel-plugin-transform-es2015-sticky-regex-6.24.1.tgz\",\"integrity\":\"sha512-CYP359ADryTo3pCsH0oxRo/0yn6UsEZLqYohHmvLQdfS9xkf+MbCzE3/Kolw9OYIY4ZMilH25z/5CbQbwDD+lQ==\",\"dev\":true,\"requires\":{\"babel-helper-regex\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-template-literals\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-template-literals/-/babel-plugin-transform-es2015-template-literals-6.22.0.tgz\",\"integrity\":\"sha512-x8b9W0ngnKzDMHimVtTfn5ryimars1ByTqsfBDwAqLibmuuQY6pgBQi5z1ErIsUOWBdw1bW9FSz5RZUojM4apg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-typeof-symbol\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-typeof-symbol/-/babel-plugin-transform-es2015-typeof-symbol-6.23.0.tgz\",\"integrity\":\"sha512-fz6J2Sf4gYN6gWgRZaoFXmq93X+Li/8vf+fb0sGDVtdeWvxC9y5/bTD7bvfWMEq6zetGEHpWjtzRGSugt5kNqw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-unicode-regex\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-unicode-regex/-/babel-plugin-transform-es2015-unicode-regex-6.24.1.tgz\",\"integrity\":\"sha512-v61Dbbihf5XxnYjtBN04B/JBvsScY37R1cZT5r9permN1cp+b70DY3Ib3fIkgn1DI9U3tGgBJZVD8p/mE/4JbQ==\",\"dev\":true,\"requires\":{\"babel-helper-regex\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"regexpu-core\":\"^2.0.0\"}},\"babel-plugin-transform-exponentiation-operator\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-exponentiation-operator/-/babel-plugin-transform-exponentiation-operator-6.24.1.tgz\",\"integrity\":\"sha512-LzXDmbMkklvNhprr20//RStKVcT8Cu+SQtX18eMHLhjHf2yFzwtQ0S2f0jQ+89rokoNdmwoSqYzAhq86FxlLSQ==\",\"dev\":true,\"requires\":{\"babel-helper-builder-binary-assignment-operator-visitor\":\"^6.24.1\",\"babel-plugin-syntax-exponentiation-operator\":\"^6.8.0\",\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-regenerator\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-regenerator/-/babel-plugin-transform-regenerator-6.26.0.tgz\",\"integrity\":\"sha512-LS+dBkUGlNR15/5WHKe/8Neawx663qttS6AGqoOUhICc9d1KciBvtrQSuc0PI+CxQ2Q/S1aKuJ+u64GtLdcEZg==\",\"dev\":true,\"requires\":{\"regenerator-transform\":\"^0.10.0\"}},\"babel-plugin-transform-runtime\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-runtime/-/babel-plugin-transform-runtime-6.23.0.tgz\",\"integrity\":\"sha512-cpGMVC1vt/772y3jx1gwSaTitQVZuFDlllgreMsZ+rTYC6jlYXRyf5FQOgSnckOiA5QmzbXTyBY2A5AmZXF1fA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-strict-mode\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.24.1.tgz\",\"integrity\":\"sha512-j3KtSpjyLSJxNoCDrhwiJad8kw0gJ9REGj8/CqL0HeRyLnvUNYV9zcqluL6QJSXh3nfsLEmSLvwRfGzrgR96Pw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-polyfill\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-polyfill/-/babel-polyfill-6.26.0.tgz\",\"integrity\":\"sha512-F2rZGQnAdaHWQ8YAoeRbukc7HS9QgdgeyJ0rQDd485v9opwuPvjpPFcOOT/WmkKTdgy9ESgSPXDcTNpzrGr6iQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"core-js\":\"^2.5.0\",\"regenerator-runtime\":\"^0.10.5\"},\"dependencies\":{\"regenerator-runtime\":{\"version\":\"0.10.5\",\"resolved\":\"https://registry.npmmirror.com/regenerator-runtime/-/regenerator-runtime-0.10.5.tgz\",\"integrity\":\"sha512-02YopEIhAgiBHWeoTiA8aitHDt8z6w+rQqNuIftlM+ZtvSl/brTouaU7DW6GO/cHtvxJvS4Hwv2ibKdxIRi24w==\",\"dev\":true}}},\"babel-preset-env\":{\"version\":\"1.7.0\",\"resolved\":\"https://registry.npmmirror.com/babel-preset-env/-/babel-preset-env-1.7.0.tgz\",\"integrity\":\"sha512-9OR2afuKDneX2/q2EurSftUYM0xGu4O2D9adAhVfADDhrYDaxXV0rBbevVYoY9n6nyX1PmQW/0jtpJvUNr9CHg==\",\"dev\":true,\"requires\":{\"babel-plugin-check-es2015-constants\":\"^6.22.0\",\"babel-plugin-syntax-trailing-function-commas\":\"^6.22.0\",\"babel-plugin-transform-async-to-generator\":\"^6.22.0\",\"babel-plugin-transform-es2015-arrow-functions\":\"^6.22.0\",\"babel-plugin-transform-es2015-block-scoped-functions\":\"^6.22.0\",\"babel-plugin-transform-es2015-block-scoping\":\"^6.23.0\",\"babel-plugin-transform-es2015-classes\":\"^6.23.0\",\"babel-plugin-transform-es2015-computed-properties\":\"^6.22.0\",\"babel-plugin-transform-es2015-destructuring\":\"^6.23.0\",\"babel-plugin-transform-es2015-duplicate-keys\":\"^6.22.0\",\"babel-plugin-transform-es2015-for-of\":\"^6.23.0\",\"babel-plugin-transform-es2015-function-name\":\"^6.22.0\",\"babel-plugin-transform-es2015-literals\":\"^6.22.0\",\"babel-plugin-transform-es2015-modules-amd\":\"^6.22.0\",\"babel-plugin-transform-es2015-modules-commonjs\":\"^6.23.0\",\"babel-plugin-transform-es2015-modules-systemjs\":\"^6.23.0\",\"babel-plugin-transform-es2015-modules-umd\":\"^6.23.0\",\"babel-plugin-transform-es2015-object-super\":\"^6.22.0\",\"babel-plugin-transform-es2015-parameters\":\"^6.23.0\",\"babel-plugin-transform-es2015-shorthand-properties\":\"^6.22.0\",\"babel-plugin-transform-es2015-spread\":\"^6.22.0\",\"babel-plugin-transform-es2015-sticky-regex\":\"^6.22.0\",\"babel-plugin-transform-es2015-template-literals\":\"^6.22.0\",\"babel-plugin-transform-es2015-typeof-symbol\":\"^6.23.0\",\"babel-plugin-transform-es2015-unicode-regex\":\"^6.22.0\",\"babel-plugin-transform-exponentiation-operator\":\"^6.22.0\",\"babel-plugin-transform-regenerator\":\"^6.22.0\",\"browserslist\":\"^3.2.6\",\"invariant\":\"^2.2.2\",\"semver\":\"^5.3.0\"}},\"babel-register\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-register/-/babel-register-6.26.0.tgz\",\"integrity\":\"sha512-veliHlHX06wjaeY8xNITbveXSiI+ASFnOqvne/LaIJIqOWi2Ogmj91KOugEz/hoh/fwMhXNBJPCv8Xaz5CyM4A==\",\"dev\":true,\"requires\":{\"babel-core\":\"^6.26.0\",\"babel-runtime\":\"^6.26.0\",\"core-js\":\"^2.5.0\",\"home-or-tmp\":\"^2.0.0\",\"lodash\":\"^4.17.4\",\"mkdirp\":\"^0.5.1\",\"source-map-support\":\"^0.4.15\"}},\"babel-runtime\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-runtime/-/babel-runtime-6.26.0.tgz\",\"integrity\":\"sha512-ITKNuq2wKlW1fJg9sSW52eepoYgZBggvOAHC0u/CYu/qxQ9EVzThCgR69BnSXLHjy2f7SY5zaQ4yt7H9ZVxY2g==\",\"dev\":true,\"requires\":{\"core-js\":\"^2.4.0\",\"regenerator-runtime\":\"^0.11.0\"}},\"babel-template\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-template/-/babel-template-6.26.0.tgz\",\"integrity\":\"sha512-PCOcLFW7/eazGUKIoqH97sO9A2UYMahsn/yRQ7uOk37iutwjq7ODtcTNF+iFDSHNfkctqsLRjLP7URnOx0T1fg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"babel-traverse\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"babylon\":\"^6.18.0\",\"lodash\":\"^4.17.4\"}},\"babel-traverse\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-traverse/-/babel-traverse-6.26.0.tgz\",\"integrity\":\"sha512-iSxeXx7apsjCHe9c7n8VtRXGzI2Bk1rBSOJgCCjfyXb6v1aCqE1KSEpq/8SXuVN8Ka/Rh1WDTF0MDzkvTA4MIA==\",\"dev\":true,\"requires\":{\"babel-code-frame\":\"^6.26.0\",\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"babylon\":\"^6.18.0\",\"debug\":\"^2.6.8\",\"globals\":\"^9.18.0\",\"invariant\":\"^2.2.2\",\"lodash\":\"^4.17.4\"}},\"babel-types\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-types/-/babel-types-6.26.0.tgz\",\"integrity\":\"sha512-zhe3V/26rCWsEZK8kZN+HaQj5yQ1CilTObixFzKW1UWjqG7618Twz6YEsCnjfg5gBcJh02DrpCkS9h98ZqDY+g==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"esutils\":\"^2.0.2\",\"lodash\":\"^4.17.4\",\"to-fast-properties\":\"^1.0.3\"}},\"babylon\":{\"version\":\"6.18.0\",\"resolved\":\"https://registry.npmmirror.com/babylon/-/babylon-6.18.0.tgz\",\"integrity\":\"sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==\",\"dev\":true},\"balanced-match\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/balanced-match/-/balanced-match-1.0.2.tgz\",\"integrity\":\"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\"dev\":true},\"base\":{\"version\":\"0.11.2\",\"resolved\":\"https://registry.npmmirror.com/base/-/base-0.11.2.tgz\",\"integrity\":\"sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==\",\"dev\":true,\"optional\":true,\"requires\":{\"cache-base\":\"^1.0.1\",\"class-utils\":\"^0.3.5\",\"component-emitter\":\"^1.2.1\",\"define-property\":\"^1.0.0\",\"isobject\":\"^3.0.1\",\"mixin-deep\":\"^1.2.0\",\"pascalcase\":\"^0.1.1\"},\"dependencies\":{\"define-property\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-1.0.0.tgz\",\"integrity\":\"sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.0\"}},\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"binary-extensions\":{\"version\":\"1.13.1\",\"resolved\":\"https://registry.npmmirror.com/binary-extensions/-/binary-extensions-1.13.1.tgz\",\"integrity\":\"sha512-Un7MIEDdUC5gNpcGDV97op1Ywk748MpHcFTHoYs6qnj1Z3j7I53VG3nwZhKzoBZmbdRNnb6WRdFlwl7tSDuZGw==\",\"dev\":true,\"optional\":true},\"bindings\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/bindings/-/bindings-1.5.0.tgz\",\"integrity\":\"sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"file-uri-to-path\":\"1.0.0\"}},\"brace-expansion\":{\"version\":\"1.1.11\",\"resolved\":\"https://registry.npmmirror.com/brace-expansion/-/brace-expansion-1.1.11.tgz\",\"integrity\":\"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\"dev\":true,\"requires\":{\"balanced-match\":\"^1.0.0\",\"concat-map\":\"0.0.1\"}},\"braces\":{\"version\":\"1.8.5\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-1.8.5.tgz\",\"integrity\":\"sha512-xU7bpz2ytJl1bH9cgIurjpg/n8Gohy9GTw81heDYLJQ4RU60dlyJsa+atVF2pI0yMMvKxI9HkKwjePCj5XI1hw==\",\"dev\":true,\"optional\":true,\"requires\":{\"expand-range\":\"^1.8.1\",\"preserve\":\"^0.2.0\",\"repeat-element\":\"^1.1.2\"}},\"browserslist\":{\"version\":\"3.2.8\",\"resolved\":\"https://registry.npmmirror.com/browserslist/-/browserslist-3.2.8.tgz\",\"integrity\":\"sha512-WHVocJYavUwVgVViC0ORikPHQquXwVh939TaelZ4WDqpWgTX/FsGhl/+P4qBUAGcRvtOgDgC+xftNWWp2RUTAQ==\",\"dev\":true,\"requires\":{\"caniuse-lite\":\"^1.0.30000844\",\"electron-to-chromium\":\"^1.3.47\"}},\"cache-base\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/cache-base/-/cache-base-1.0.1.tgz\",\"integrity\":\"sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"collection-visit\":\"^1.0.0\",\"component-emitter\":\"^1.2.1\",\"get-value\":\"^2.0.6\",\"has-value\":\"^1.0.0\",\"isobject\":\"^3.0.1\",\"set-value\":\"^2.0.0\",\"to-object-path\":\"^0.3.0\",\"union-value\":\"^1.0.0\",\"unset-value\":\"^1.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"caniuse-lite\":{\"version\":\"1.0.30001486\",\"resolved\":\"https://registry.npmmirror.com/caniuse-lite/-/caniuse-lite-1.0.30001486.tgz\",\"integrity\":\"sha512-uv7/gXuHi10Whlj0pp5q/tsK/32J2QSqVRKQhs2j8VsDCjgyruAh/eEXHF822VqO9yT6iZKw3nRwZRSPBE9OQg==\",\"dev\":true},\"chalk\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-1.1.3.tgz\",\"integrity\":\"sha512-U3lRVLMSlsCfjqYPbLyVv11M9CPW4I728d6TCKMAOJueEeB9/8o+eSsMnxPJD+Q+K909sdESg7C+tIkoH6on1A==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^2.2.1\",\"escape-string-regexp\":\"^1.0.2\",\"has-ansi\":\"^2.0.0\",\"strip-ansi\":\"^3.0.0\",\"supports-color\":\"^2.0.0\"}},\"chokidar\":{\"version\":\"1.7.0\",\"resolved\":\"https://registry.npmmirror.com/chokidar/-/chokidar-1.7.0.tgz\",\"integrity\":\"sha512-mk8fAWcRUOxY7btlLtitj3A45jOwSAxH4tOFOoEGbVsl6cL6pPMWUy7dwZ/canfj3QEdP6FHSnf/l1c6/WkzVg==\",\"dev\":true,\"optional\":true,\"requires\":{\"anymatch\":\"^1.3.0\",\"async-each\":\"^1.0.0\",\"fsevents\":\"^1.0.0\",\"glob-parent\":\"^2.0.0\",\"inherits\":\"^2.0.1\",\"is-binary-path\":\"^1.0.0\",\"is-glob\":\"^2.0.0\",\"path-is-absolute\":\"^1.0.0\",\"readdirp\":\"^2.0.0\"}},\"class-utils\":{\"version\":\"0.3.6\",\"resolved\":\"https://registry.npmmirror.com/class-utils/-/class-utils-0.3.6.tgz\",\"integrity\":\"sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-union\":\"^3.1.0\",\"define-property\":\"^0.2.5\",\"isobject\":\"^3.0.0\",\"static-extend\":\"^0.1.1\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"collection-visit\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/collection-visit/-/collection-visit-1.0.0.tgz\",\"integrity\":\"sha512-lNkKvzEeMBBjUGHZ+q6z9pSJla0KWAQPvtzhEV9+iGyQYG+pBpl7xKDhxoNSOZH2hhv0v5k0y2yAM4o4SjoSkw==\",\"dev\":true,\"optional\":true,\"requires\":{\"map-visit\":\"^1.0.0\",\"object-visit\":\"^1.0.0\"}},\"commander\":{\"version\":\"2.20.3\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-2.20.3.tgz\",\"integrity\":\"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\"dev\":true},\"component-emitter\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmmirror.com/component-emitter/-/component-emitter-1.3.0.tgz\",\"integrity\":\"sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==\",\"dev\":true,\"optional\":true},\"concat-map\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmmirror.com/concat-map/-/concat-map-0.0.1.tgz\",\"integrity\":\"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\"dev\":true},\"convert-source-map\":{\"version\":\"1.9.0\",\"resolved\":\"https://registry.npmmirror.com/convert-source-map/-/convert-source-map-1.9.0.tgz\",\"integrity\":\"sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==\",\"dev\":true},\"copy-descriptor\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/copy-descriptor/-/copy-descriptor-0.1.1.tgz\",\"integrity\":\"sha512-XgZ0pFcakEUlbwQEVNg3+QAis1FyTL3Qel9FYy8pSkQqoG3PNoT0bOCQtOXcOkur21r2Eq2kI+IE+gsmAEVlYw==\",\"dev\":true,\"optional\":true},\"core-js\":{\"version\":\"2.6.12\",\"resolved\":\"https://registry.npmmirror.com/core-js/-/core-js-2.6.12.tgz\",\"integrity\":\"sha512-Kb2wC0fvsWfQrgk8HU5lW6U/Lcs8+9aaYcy4ZFc6DDlo4nZ7n70dEgE5rtR0oG6ufKDUnrwfWL1mXR5ljDatrQ==\",\"dev\":true},\"core-util-is\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/core-util-is/-/core-util-is-1.0.3.tgz\",\"integrity\":\"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\",\"dev\":true,\"optional\":true},\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}},\"decode-uri-component\":{\"version\":\"0.2.2\",\"resolved\":\"https://registry.npmmirror.com/decode-uri-component/-/decode-uri-component-0.2.2.tgz\",\"integrity\":\"sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==\",\"dev\":true,\"optional\":true},\"define-property\":{\"version\":\"2.0.2\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-2.0.2.tgz\",\"integrity\":\"sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.2\",\"isobject\":\"^3.0.1\"},\"dependencies\":{\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"detect-indent\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/detect-indent/-/detect-indent-4.0.0.tgz\",\"integrity\":\"sha512-BDKtmHlOzwI7iRuEkhzsnPoi5ypEhWAJB5RvHWe1kMr06js3uK5B3734i3ui5Yd+wOJV1cpE4JnivPD283GU/A==\",\"dev\":true,\"requires\":{\"repeating\":\"^2.0.0\"}},\"electron-to-chromium\":{\"version\":\"1.4.392\",\"resolved\":\"https://registry.npmmirror.com/electron-to-chromium/-/electron-to-chromium-1.4.392.tgz\",\"integrity\":\"sha512-TXQOMW9tnhIms3jGy/lJctLjICOgyueZFJ1KUtm6DTQ+QpxX3p7ZBwB6syuZ9KBuT5S4XX7bgY1ECPgfxKUdOg==\",\"dev\":true},\"escape-string-regexp\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\"integrity\":\"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\"dev\":true},\"esutils\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmmirror.com/esutils/-/esutils-2.0.3.tgz\",\"integrity\":\"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\"dev\":true},\"expand-brackets\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/expand-brackets/-/expand-brackets-0.1.5.tgz\",\"integrity\":\"sha512-hxx03P2dJxss6ceIeri9cmYOT4SRs3Zk3afZwWpOsRqLqprhTR8u++SlC+sFGsQr7WGFPdMF7Gjc1njDLDK6UA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-posix-bracket\":\"^0.1.0\"}},\"expand-range\":{\"version\":\"1.8.2\",\"resolved\":\"https://registry.npmmirror.com/expand-range/-/expand-range-1.8.2.tgz\",\"integrity\":\"sha512-AFASGfIlnIbkKPQwX1yHaDjFvh/1gyKJODme52V6IORh69uEYgZp0o9C+qsIGNVEiuuhQU0CSSl++Rlegg1qvA==\",\"dev\":true,\"optional\":true,\"requires\":{\"fill-range\":\"^2.1.0\"}},\"extend-shallow\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-3.0.2.tgz\",\"integrity\":\"sha512-BwY5b5Ql4+qZoefgMj2NUmx+tehVTH/Kf4k1ZEtOHNFcm2wSxMRo992l6X3TIgni2eZVTZ85xMOjF31fwZAj6Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"assign-symbols\":\"^1.0.0\",\"is-extendable\":\"^1.0.1\"},\"dependencies\":{\"is-extendable\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-extendable/-/is-extendable-1.0.1.tgz\",\"integrity\":\"sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-plain-object\":\"^2.0.4\"}}}},\"extglob\":{\"version\":\"0.3.2\",\"resolved\":\"https://registry.npmmirror.com/extglob/-/extglob-0.3.2.tgz\",\"integrity\":\"sha512-1FOj1LOwn42TMrruOHGt18HemVnbwAmAak7krWk+wa93KXxGbK+2jpezm+ytJYDaBX0/SPLZFHKM7m+tKobWGg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extglob\":\"^1.0.0\"}},\"file-uri-to-path\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz\",\"integrity\":\"sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==\",\"dev\":true,\"optional\":true},\"filename-regex\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/filename-regex/-/filename-regex-2.0.1.tgz\",\"integrity\":\"sha512-BTCqyBaWBTsauvnHiE8i562+EdJj+oUpkqWp2R1iCoR8f6oo8STRu3of7WJJ0TqWtxN50a5YFpzYK4Jj9esYfQ==\",\"dev\":true,\"optional\":true},\"fill-range\":{\"version\":\"2.2.4\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-2.2.4.tgz\",\"integrity\":\"sha512-cnrcCbj01+j2gTG921VZPnHbjmdAf8oQV/iGeV2kZxGSyfYjjTyY79ErsK1WJWMpw6DaApEX72binqJE+/d+5Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^2.1.0\",\"isobject\":\"^2.0.0\",\"randomatic\":\"^3.0.0\",\"repeat-element\":\"^1.1.2\",\"repeat-string\":\"^1.5.2\"}},\"for-in\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/for-in/-/for-in-1.0.2.tgz\",\"integrity\":\"sha512-7EwmXrOjyL+ChxMhmG5lnW9MPt1aIeZEwKhQzoBUdTV0N3zuwWDZYVJatDvZ2OyzPUvdIAZDsCetk3coyMfcnQ==\",\"dev\":true,\"optional\":true},\"for-own\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/for-own/-/for-own-0.1.5.tgz\",\"integrity\":\"sha512-SKmowqGTJoPzLO1T0BBJpkfp3EMacCMOuH40hOUbrbzElVktk4DioXVM99QkLCyKoiuOmyjgcWMpVz2xjE7LZw==\",\"dev\":true,\"optional\":true,\"requires\":{\"for-in\":\"^1.0.1\"}},\"fragment-cache\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/fragment-cache/-/fragment-cache-0.2.1.tgz\",\"integrity\":\"sha512-GMBAbW9antB8iZRHLoGw0b3HANt57diZYFO/HL1JGIC1MjKrdmhxvrJbupnVvpys0zsz7yBApXdQyfepKly2kA==\",\"dev\":true,\"optional\":true,\"requires\":{\"map-cache\":\"^0.2.2\"}},\"fs-readdir-recursive\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz\",\"integrity\":\"sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==\",\"dev\":true},\"fs.realpath\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/fs.realpath/-/fs.realpath-1.0.0.tgz\",\"integrity\":\"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\",\"dev\":true},\"fsevents\":{\"version\":\"1.2.13\",\"resolved\":\"https://registry.npmmirror.com/fsevents/-/fsevents-1.2.13.tgz\",\"integrity\":\"sha512-oWb1Z6mkHIskLzEJ/XWX0srkpkTQ7vaopMQkyaEIoq0fmtFVxOthb8cCxeT+p3ynTdkk/RZwbgG4brR5BeWECw==\",\"dev\":true,\"optional\":true,\"requires\":{\"bindings\":\"^1.5.0\",\"nan\":\"^2.12.1\"}},\"get-value\":{\"version\":\"2.0.6\",\"resolved\":\"https://registry.npmmirror.com/get-value/-/get-value-2.0.6.tgz\",\"integrity\":\"sha512-Ln0UQDlxH1BapMu3GPtf7CuYNwRZf2gwCuPqbyG6pB8WfmFpzqcy4xtAaAMUhnNqjMKTiCPZG2oMT3YSx8U2NA==\",\"dev\":true,\"optional\":true},\"glob\":{\"version\":\"7.2.3\",\"resolved\":\"https://registry.npmmirror.com/glob/-/glob-7.2.3.tgz\",\"integrity\":\"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\"dev\":true,\"requires\":{\"fs.realpath\":\"^1.0.0\",\"inflight\":\"^1.0.4\",\"inherits\":\"2\",\"minimatch\":\"^3.1.1\",\"once\":\"^1.3.0\",\"path-is-absolute\":\"^1.0.0\"}},\"glob-base\":{\"version\":\"0.3.0\",\"resolved\":\"https://registry.npmmirror.com/glob-base/-/glob-base-0.3.0.tgz\",\"integrity\":\"sha512-ab1S1g1EbO7YzauaJLkgLp7DZVAqj9M/dvKlTt8DkXA2tiOIcSMrlVI2J1RZyB5iJVccEscjGn+kpOG9788MHA==\",\"dev\":true,\"optional\":true,\"requires\":{\"glob-parent\":\"^2.0.0\",\"is-glob\":\"^2.0.0\"}},\"glob-parent\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/glob-parent/-/glob-parent-2.0.0.tgz\",\"integrity\":\"sha512-JDYOvfxio/t42HKdxkAYaCiBN7oYiuxykOxKxdaUW5Qn0zaYN3gRQWolrwdnf0shM9/EP0ebuuTmyoXNr1cC5w==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-glob\":\"^2.0.0\"}},\"globals\":{\"version\":\"9.18.0\",\"resolved\":\"https://registry.npmmirror.com/globals/-/globals-9.18.0.tgz\",\"integrity\":\"sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==\",\"dev\":true},\"graceful-fs\":{\"version\":\"4.2.11\",\"resolved\":\"https://registry.npmmirror.com/graceful-fs/-/graceful-fs-4.2.11.tgz\",\"integrity\":\"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\"dev\":true},\"has-ansi\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-ansi/-/has-ansi-2.0.0.tgz\",\"integrity\":\"sha512-C8vBJ8DwUCx19vhm7urhTuUsr4/IyP6l4VzNQDv+ryHQObW3TTTp9yB68WpYgRe2bbaGuZ/se74IqFeVnMnLZg==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^2.0.0\"}},\"has-value\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-value/-/has-value-1.0.0.tgz\",\"integrity\":\"sha512-IBXk4GTsLYdQ7Rvt+GRBrFSVEkmuOUy4re0Xjd9kJSUQpnTrWR4/y9RpfexN9vkAPMFuQoeWKwqzPozRTlasGw==\",\"dev\":true,\"optional\":true,\"requires\":{\"get-value\":\"^2.0.6\",\"has-values\":\"^1.0.0\",\"isobject\":\"^3.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"has-values\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-values/-/has-values-1.0.0.tgz\",\"integrity\":\"sha512-ODYZC64uqzmtfGMEAX/FvZiRyWLpAC3vYnNunURUnkGVTS+mI0smVsWaPydRBsE3g+ok7h960jChO8mFcWlHaQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^3.0.0\",\"kind-of\":\"^4.0.0\"},\"dependencies\":{\"is-number\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-3.0.0.tgz\",\"integrity\":\"sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"kind-of\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-4.0.0.tgz\",\"integrity\":\"sha512-24XsCxmEbRwEDbz/qz3stgin8TTzZ1ESR56OMCN0ujYg+vRutNSiOj9bHH9u85DKgXguraugV5sFuvbD4FW/hw==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"home-or-tmp\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/home-or-tmp/-/home-or-tmp-2.0.0.tgz\",\"integrity\":\"sha512-ycURW7oUxE2sNiPVw1HVEFsW+ecOpJ5zaj7eC0RlwhibhRBod20muUN8qu/gzx956YrLolVvs1MTXwKgC2rVEg==\",\"dev\":true,\"requires\":{\"os-homedir\":\"^1.0.0\",\"os-tmpdir\":\"^1.0.1\"}},\"inflight\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/inflight/-/inflight-1.0.6.tgz\",\"integrity\":\"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\"dev\":true,\"requires\":{\"once\":\"^1.3.0\",\"wrappy\":\"1\"}},\"inherits\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/inherits/-/inherits-2.0.4.tgz\",\"integrity\":\"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\"dev\":true},\"invariant\":{\"version\":\"2.2.4\",\"resolved\":\"https://registry.npmmirror.com/invariant/-/invariant-2.2.4.tgz\",\"integrity\":\"sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==\",\"dev\":true,\"requires\":{\"loose-envify\":\"^1.0.0\"}},\"is-accessor-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-e1BM1qnDbMRG3ll2U9dSK0UMHuWOs3pY3AtcFsmvwPtKL3MML/Q86i+GilLfvqEs4GW+ExB91tQ3Ig9noDIZ+A==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"is-binary-path\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-binary-path/-/is-binary-path-1.0.1.tgz\",\"integrity\":\"sha512-9fRVlXc0uCxEDj1nQzaWONSpbTfx0FmJfzHF7pwlI8DkWGoHBBea4Pg5Ky0ojwwxQmnSifgbKkI06Qv0Ljgj+Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"binary-extensions\":\"^1.0.0\"}},\"is-buffer\":{\"version\":\"1.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-buffer/-/is-buffer-1.1.6.tgz\",\"integrity\":\"sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==\",\"dev\":true,\"optional\":true},\"is-data-descriptor\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz\",\"integrity\":\"sha512-+w9D5ulSoBNlmw9OHn3U2v51SyoCd0he+bB3xMl62oijhrspxowjU+AIcDY0N3iEJbUEkB15IlMASQsxYigvXg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"is-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^0.1.6\",\"is-data-descriptor\":\"^0.1.4\",\"kind-of\":\"^5.0.0\"},\"dependencies\":{\"kind-of\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-5.1.0.tgz\",\"integrity\":\"sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==\",\"dev\":true,\"optional\":true}}},\"is-dotfile\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/is-dotfile/-/is-dotfile-1.0.3.tgz\",\"integrity\":\"sha512-9YclgOGtN/f8zx0Pr4FQYMdibBiTaH3sn52vjYip4ZSf6C4/6RfTEZ+MR4GvKhCxdPh21Bg42/WL55f6KSnKpg==\",\"dev\":true,\"optional\":true},\"is-equal-shallow\":{\"version\":\"0.1.3\",\"resolved\":\"https://registry.npmmirror.com/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz\",\"integrity\":\"sha512-0EygVC5qPvIyb+gSz7zdD5/AAoS6Qrx1e//6N4yv4oNm30kqvdmG66oZFWVlQHUWe5OjP08FuTw2IdT0EOTcYA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-primitive\":\"^2.0.0\"}},\"is-extendable\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-extendable/-/is-extendable-0.1.1.tgz\",\"integrity\":\"sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==\",\"dev\":true,\"optional\":true},\"is-extglob\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-extglob/-/is-extglob-1.0.0.tgz\",\"integrity\":\"sha512-7Q+VbVafe6x2T+Tu6NcOf6sRklazEPmBoB3IWk3WdGZM2iGUwU/Oe3Wtq5lSEkDTTlpp8yx+5t4pzO/i9Ty1ww==\",\"dev\":true,\"optional\":true},\"is-finite\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-finite/-/is-finite-1.1.0.tgz\",\"integrity\":\"sha512-cdyMtqX/BOqqNBBiKlIVkytNHm49MtMlYyn1zxzvJKWmFMlGzm+ry5BBfYyeY9YmNKbRSo/o7OX9w9ale0wg3w==\",\"dev\":true},\"is-glob\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-glob/-/is-glob-2.0.1.tgz\",\"integrity\":\"sha512-a1dBeB19NXsf/E0+FHqkagizel/LQw2DjSQpvQrj3zT+jYPpaUCryPnrQajXKFLCMuf4I6FhRpaGtw4lPrG6Eg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extglob\":\"^1.0.0\"}},\"is-number\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-2.1.0.tgz\",\"integrity\":\"sha512-QUzH43Gfb9+5yckcrSA0VBDwEtDUchrk4F6tfJZQuNzDJbEDB9cZNzSfXGQ1jqmdDY/kl41lUOWM9syA8z8jlg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"is-plain-object\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/is-plain-object/-/is-plain-object-2.0.4.tgz\",\"integrity\":\"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\"dev\":true,\"optional\":true,\"requires\":{\"isobject\":\"^3.0.1\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"is-posix-bracket\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz\",\"integrity\":\"sha512-Yu68oeXJ7LeWNmZ3Zov/xg/oDBnBK2RNxwYY1ilNJX+tKKZqgPK+qOn/Gs9jEu66KDY9Netf5XLKNGzas/vPfQ==\",\"dev\":true,\"optional\":true},\"is-primitive\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-primitive/-/is-primitive-2.0.0.tgz\",\"integrity\":\"sha512-N3w1tFaRfk3UrPfqeRyD+GYDASU3W5VinKhlORy8EWVf/sIdDL9GAcew85XmktCfH+ngG7SRXEVDoO18WMdB/Q==\",\"dev\":true,\"optional\":true},\"is-windows\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-windows/-/is-windows-1.0.2.tgz\",\"integrity\":\"sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==\",\"dev\":true,\"optional\":true},\"isarray\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/isarray/-/isarray-1.0.0.tgz\",\"integrity\":\"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\",\"dev\":true,\"optional\":true},\"isobject\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-2.1.0.tgz\",\"integrity\":\"sha512-+OUdGJlgjOBZDfxnDjYYG6zp487z0JGNQq3cYQYg5f5hKR+syHMsaztzGeml/4kGG55CSpKSpWTY+jYGgsHLgA==\",\"dev\":true,\"optional\":true,\"requires\":{\"isarray\":\"1.0.0\"}},\"js-tokens\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/js-tokens/-/js-tokens-3.0.2.tgz\",\"integrity\":\"sha512-RjTcuD4xjtthQkaWH7dFlH85L+QaVtSoOyGdZ3g6HFhS9dFNDfLyqgm2NFe2X6cQpeFmt0452FJjFG5UameExg==\",\"dev\":true},\"jsesc\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-1.3.0.tgz\",\"integrity\":\"sha512-Mke0DA0QjUWuJlhsE0ZPPhYiJkRap642SmI/4ztCFaUs6V2AiH1sfecc+57NgaryfAA2VR3v6O+CSjC1jZJKOA==\",\"dev\":true},\"json5\":{\"version\":\"0.5.1\",\"resolved\":\"https://registry.npmmirror.com/json5/-/json5-0.5.1.tgz\",\"integrity\":\"sha512-4xrs1aW+6N5DalkqSVA8fxh458CXvR99WU8WLKmq4v8eWAL86Xo3BVqyd3SkA9wEVjCMqyvvRRkshAdOnBp5rw==\",\"dev\":true},\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}},\"lodash\":{\"version\":\"4.17.21\",\"resolved\":\"https://registry.npmmirror.com/lodash/-/lodash-4.17.21.tgz\",\"integrity\":\"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\",\"dev\":true},\"loose-envify\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/loose-envify/-/loose-envify-1.4.0.tgz\",\"integrity\":\"sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==\",\"dev\":true,\"requires\":{\"js-tokens\":\"^3.0.0 || ^4.0.0\"}},\"map-cache\":{\"version\":\"0.2.2\",\"resolved\":\"https://registry.npmmirror.com/map-cache/-/map-cache-0.2.2.tgz\",\"integrity\":\"sha512-8y/eV9QQZCiyn1SprXSrCmqJN0yNRATe+PO8ztwqrvrbdRLA3eYJF0yaR0YayLWkMbsQSKWS9N2gPcGEc4UsZg==\",\"dev\":true,\"optional\":true},\"map-visit\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/map-visit/-/map-visit-1.0.0.tgz\",\"integrity\":\"sha512-4y7uGv8bd2WdM9vpQsiQNo41Ln1NvhvDRuVt0k2JZQ+ezN2uaQes7lZeZ+QQUHOLQAtDaBJ+7wCbi+ab/KFs+w==\",\"dev\":true,\"optional\":true,\"requires\":{\"object-visit\":\"^1.0.0\"}},\"math-random\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/math-random/-/math-random-1.0.4.tgz\",\"integrity\":\"sha512-rUxjysqif/BZQH2yhd5Aaq7vXMSx9NdEsQcyA07uEzIvxgI7zIr33gGsh+RU0/XjmQpCW7RsVof1vlkvQVCK5A==\",\"dev\":true,\"optional\":true},\"micromatch\":{\"version\":\"2.3.11\",\"resolved\":\"https://registry.npmmirror.com/micromatch/-/micromatch-2.3.11.tgz\",\"integrity\":\"sha512-LnU2XFEk9xxSJ6rfgAry/ty5qwUTyHYOBU0g4R6tIw5ljwgGIBmiKhRWLw5NpMOnrgUNcDJ4WMp8rl3sYVHLNA==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-diff\":\"^2.0.0\",\"array-unique\":\"^0.2.1\",\"braces\":\"^1.8.2\",\"expand-brackets\":\"^0.1.4\",\"extglob\":\"^0.3.1\",\"filename-regex\":\"^2.0.0\",\"is-extglob\":\"^1.0.0\",\"is-glob\":\"^2.0.1\",\"kind-of\":\"^3.0.2\",\"normalize-path\":\"^2.0.1\",\"object.omit\":\"^2.0.0\",\"parse-glob\":\"^3.0.4\",\"regex-cache\":\"^0.4.2\"}},\"minimatch\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/minimatch/-/minimatch-3.1.2.tgz\",\"integrity\":\"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\"dev\":true,\"requires\":{\"brace-expansion\":\"^1.1.7\"}},\"minimist\":{\"version\":\"1.2.8\",\"resolved\":\"https://registry.npmmirror.com/minimist/-/minimist-1.2.8.tgz\",\"integrity\":\"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\",\"dev\":true},\"mixin-deep\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/mixin-deep/-/mixin-deep-1.3.2.tgz\",\"integrity\":\"sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==\",\"dev\":true,\"optional\":true,\"requires\":{\"for-in\":\"^1.0.2\",\"is-extendable\":\"^1.0.1\"},\"dependencies\":{\"is-extendable\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-extendable/-/is-extendable-1.0.1.tgz\",\"integrity\":\"sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-plain-object\":\"^2.0.4\"}}}},\"mkdirp\":{\"version\":\"0.5.6\",\"resolved\":\"https://registry.npmmirror.com/mkdirp/-/mkdirp-0.5.6.tgz\",\"integrity\":\"sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==\",\"dev\":true,\"requires\":{\"minimist\":\"^1.2.6\"}},\"ms\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.0.0.tgz\",\"integrity\":\"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\",\"dev\":true},\"nan\":{\"version\":\"2.17.0\",\"resolved\":\"https://registry.npmmirror.com/nan/-/nan-2.17.0.tgz\",\"integrity\":\"sha512-2ZTgtl0nJsO0KQCjEpxcIr5D+Yv90plTitZt9JBfQvVJDS5seMl3FOvsh3+9CoYWXf/1l5OaZzzF6nDm4cagaQ==\",\"dev\":true,\"optional\":true},\"nanomatch\":{\"version\":\"1.2.13\",\"resolved\":\"https://registry.npmmirror.com/nanomatch/-/nanomatch-1.2.13.tgz\",\"integrity\":\"sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-diff\":\"^4.0.0\",\"array-unique\":\"^0.3.2\",\"define-property\":\"^2.0.2\",\"extend-shallow\":\"^3.0.2\",\"fragment-cache\":\"^0.2.1\",\"is-windows\":\"^1.0.2\",\"kind-of\":\"^6.0.2\",\"object.pick\":\"^1.3.0\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"arr-diff\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/arr-diff/-/arr-diff-4.0.0.tgz\",\"integrity\":\"sha512-YVIQ82gZPGBebQV/a8dar4AitzCQs0jjXwMPZllpXMaGjXPYVUawSxQrRsjhjupyVxEvbHgUmIhKVlND+j02kA==\",\"dev\":true,\"optional\":true},\"array-unique\":{\"version\":\"0.3.2\",\"resolved\":\"https://registry.npmmirror.com/array-unique/-/array-unique-0.3.2.tgz\",\"integrity\":\"sha512-SleRWjh9JUud2wH1hPs9rZBZ33H6T9HOiL0uwGnGx9FpE6wKGyfWugmbkEOIs6qWrZhg0LWeLziLrEwQJhs5mQ==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"normalize-path\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/normalize-path/-/normalize-path-2.1.1.tgz\",\"integrity\":\"sha512-3pKJwH184Xo/lnH6oyP1q2pMd7HcypqqmRs91/6/i2CGtWwIKGCkOOMTm/zXbgTEWHw1uNpNi/igc3ePOYHb6w==\",\"dev\":true,\"optional\":true,\"requires\":{\"remove-trailing-separator\":\"^1.0.1\"}},\"object-assign\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmmirror.com/object-assign/-/object-assign-4.1.1.tgz\",\"integrity\":\"sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==\",\"dev\":true},\"object-copy\":{\"version\":\"0.1.0\",\"resolved\":\"https://registry.npmmirror.com/object-copy/-/object-copy-0.1.0.tgz\",\"integrity\":\"sha512-79LYn6VAb63zgtmAteVOWo9Vdj71ZVBy3Pbse+VqxDpEP83XuujMrGqHIwAXJ5I/aM0zU7dIyIAhifVTPrNItQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"copy-descriptor\":\"^0.1.0\",\"define-property\":\"^0.2.5\",\"kind-of\":\"^3.0.3\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}}}},\"object-visit\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/object-visit/-/object-visit-1.0.1.tgz\",\"integrity\":\"sha512-GBaMwwAVK9qbQN3Scdo0OyvgPW7l3lnaVMj84uTOZlswkX0KpF6fyDBJhtTthf7pymztoN36/KEr1DyhF96zEA==\",\"dev\":true,\"optional\":true,\"requires\":{\"isobject\":\"^3.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"object.omit\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/object.omit/-/object.omit-2.0.1.tgz\",\"integrity\":\"sha512-UiAM5mhmIuKLsOvrL+B0U2d1hXHF3bFYWIuH1LMpuV2EJEHG1Ntz06PgLEHjm6VFd87NpH8rastvPoyv6UW2fA==\",\"dev\":true,\"optional\":true,\"requires\":{\"for-own\":\"^0.1.4\",\"is-extendable\":\"^0.1.1\"}},\"object.pick\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmmirror.com/object.pick/-/object.pick-1.3.0.tgz\",\"integrity\":\"sha512-tqa/UMy/CCoYmj+H5qc07qvSL9dqcs/WZENZ1JbtWBlATP+iVOe778gE6MSijnyCnORzDuX6hU+LA4SZ09YjFQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"isobject\":\"^3.0.1\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"once\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/once/-/once-1.4.0.tgz\",\"integrity\":\"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\"dev\":true,\"requires\":{\"wrappy\":\"1\"}},\"os-homedir\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/os-homedir/-/os-homedir-1.0.2.tgz\",\"integrity\":\"sha512-B5JU3cabzk8c67mRRd3ECmROafjYMXbuzlwtqdM8IbS8ktlTix8aFGb2bAGKrSRIlnfKwovGUUr72JUPyOb6kQ==\",\"dev\":true},\"os-tmpdir\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\"integrity\":\"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\"dev\":true},\"output-file-sync\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/output-file-sync/-/output-file-sync-1.1.2.tgz\",\"integrity\":\"sha512-uQLlclru4xpCi+tfs80l3QF24KL81X57ELNMy7W/dox+JTtxUf1bLyQ8968fFCmSqqbokjW0kn+WBIlO+rSkNg==\",\"dev\":true,\"requires\":{\"graceful-fs\":\"^4.1.4\",\"mkdirp\":\"^0.5.1\",\"object-assign\":\"^4.1.0\"}},\"parse-glob\":{\"version\":\"3.0.4\",\"resolved\":\"https://registry.npmmirror.com/parse-glob/-/parse-glob-3.0.4.tgz\",\"integrity\":\"sha512-FC5TeK0AwXzq3tUBFtH74naWkPQCEWs4K+xMxWZBlKDWu0bVHXGZa+KKqxKidd7xwhdZ19ZNuF2uO1M/r196HA==\",\"dev\":true,\"optional\":true,\"requires\":{\"glob-base\":\"^0.3.0\",\"is-dotfile\":\"^1.0.0\",\"is-extglob\":\"^1.0.0\",\"is-glob\":\"^2.0.0\"}},\"pascalcase\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/pascalcase/-/pascalcase-0.1.1.tgz\",\"integrity\":\"sha512-XHXfu/yOQRy9vYOtUDVMN60OEJjW013GoObG1o+xwQTpB9eYJX/BjXMsdW13ZDPruFhYYn0AG22w0xgQMwl3Nw==\",\"dev\":true,\"optional\":true},\"path-is-absolute\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\"integrity\":\"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\"dev\":true},\"posix-character-classes\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/posix-character-classes/-/posix-character-classes-0.1.1.tgz\",\"integrity\":\"sha512-xTgYBc3fuo7Yt7JbiuFxSYGToMoz8fLoE6TC9Wx1P/u+LfeThMOAqmuyECnlBaaJb+u1m9hHiXUEtwW4OzfUJg==\",\"dev\":true,\"optional\":true},\"preserve\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/preserve/-/preserve-0.2.0.tgz\",\"integrity\":\"sha512-s/46sYeylUfHNjI+sA/78FAHlmIuKqI9wNnzEOGehAlUUYeObv5C2mOinXBjyUyWmJ2SfcS2/ydApH4hTF4WXQ==\",\"dev\":true,\"optional\":true},\"private\":{\"version\":\"0.1.8\",\"resolved\":\"https://registry.npmmirror.com/private/-/private-0.1.8.tgz\",\"integrity\":\"sha512-VvivMrbvd2nKkiG38qjULzlc+4Vx4wm/whI9pQD35YrARNnhxeiRktSOhSukRLFNlzg6Br/cJPet5J/u19r/mg==\",\"dev\":true},\"process-nextick-args\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\"integrity\":\"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\",\"dev\":true,\"optional\":true},\"randomatic\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/randomatic/-/randomatic-3.1.1.tgz\",\"integrity\":\"sha512-TuDE5KxZ0J461RVjrJZCJc+J+zCkTb1MbH9AQUq68sMhOMcy9jLcb3BrZKgp9q9Ncltdg4QVqWrH02W2EFFVYw==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^4.0.0\",\"kind-of\":\"^6.0.0\",\"math-random\":\"^1.0.1\"},\"dependencies\":{\"is-number\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-4.0.0.tgz\",\"integrity\":\"sha512-rSklcAIlf1OmFdyAqbnWTLVelsQ58uvZ66S/ZyawjWqIviTWCjg2PzVGw8WUA+nNuPTqb4wgA+NszrJ+08LlgQ==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"readable-stream\":{\"version\":\"2.3.8\",\"resolved\":\"https://registry.npmmirror.com/readable-stream/-/readable-stream-2.3.8.tgz\",\"integrity\":\"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\"dev\":true,\"optional\":true,\"requires\":{\"core-util-is\":\"~1.0.0\",\"inherits\":\"~2.0.3\",\"isarray\":\"~1.0.0\",\"process-nextick-args\":\"~2.0.0\",\"safe-buffer\":\"~5.1.1\",\"string_decoder\":\"~1.1.1\",\"util-deprecate\":\"~1.0.1\"}},\"readdirp\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/readdirp/-/readdirp-2.2.1.tgz\",\"integrity\":\"sha512-1JU/8q+VgFZyxwrJ+SVIOsh+KywWGpds3NTqikiKpDMZWScmAYyKIgqkO+ARvNWJfXeXR1zxz7aHF4u4CyH6vQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"graceful-fs\":\"^4.1.11\",\"micromatch\":\"^3.1.10\",\"readable-stream\":\"^2.0.2\"},\"dependencies\":{\"arr-diff\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/arr-diff/-/arr-diff-4.0.0.tgz\",\"integrity\":\"sha512-YVIQ82gZPGBebQV/a8dar4AitzCQs0jjXwMPZllpXMaGjXPYVUawSxQrRsjhjupyVxEvbHgUmIhKVlND+j02kA==\",\"dev\":true,\"optional\":true},\"array-unique\":{\"version\":\"0.3.2\",\"resolved\":\"https://registry.npmmirror.com/array-unique/-/array-unique-0.3.2.tgz\",\"integrity\":\"sha512-SleRWjh9JUud2wH1hPs9rZBZ33H6T9HOiL0uwGnGx9FpE6wKGyfWugmbkEOIs6qWrZhg0LWeLziLrEwQJhs5mQ==\",\"dev\":true,\"optional\":true},\"braces\":{\"version\":\"2.3.2\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-2.3.2.tgz\",\"integrity\":\"sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-flatten\":\"^1.1.0\",\"array-unique\":\"^0.3.2\",\"extend-shallow\":\"^2.0.1\",\"fill-range\":\"^4.0.0\",\"isobject\":\"^3.0.1\",\"repeat-element\":\"^1.1.2\",\"snapdragon\":\"^0.8.1\",\"snapdragon-node\":\"^2.0.1\",\"split-string\":\"^3.0.2\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"expand-brackets\":{\"version\":\"2.1.4\",\"resolved\":\"https://registry.npmmirror.com/expand-brackets/-/expand-brackets-2.1.4.tgz\",\"integrity\":\"sha512-w/ozOKR9Obk3qoWeY/WDi6MFta9AoMR+zud60mdnbniMcBxRuFJyDt2LdX/14A1UABeqk+Uk+LDfUpvoGKppZA==\",\"dev\":true,\"optional\":true,\"requires\":{\"debug\":\"^2.3.3\",\"define-property\":\"^0.2.5\",\"extend-shallow\":\"^2.0.1\",\"posix-character-classes\":\"^0.1.0\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}},\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}},\"is-accessor-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-e1BM1qnDbMRG3ll2U9dSK0UMHuWOs3pY3AtcFsmvwPtKL3MML/Q86i+GilLfvqEs4GW+ExB91tQ3Ig9noDIZ+A==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"is-data-descriptor\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz\",\"integrity\":\"sha512-+w9D5ulSoBNlmw9OHn3U2v51SyoCd0he+bB3xMl62oijhrspxowjU+AIcDY0N3iEJbUEkB15IlMASQsxYigvXg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"is-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^0.1.6\",\"is-data-descriptor\":\"^0.1.4\",\"kind-of\":\"^5.0.0\"}},\"kind-of\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-5.1.0.tgz\",\"integrity\":\"sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==\",\"dev\":true,\"optional\":true}}},\"extglob\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/extglob/-/extglob-2.0.4.tgz\",\"integrity\":\"sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==\",\"dev\":true,\"optional\":true,\"requires\":{\"array-unique\":\"^0.3.2\",\"define-property\":\"^1.0.0\",\"expand-brackets\":\"^2.1.4\",\"extend-shallow\":\"^2.0.1\",\"fragment-cache\":\"^0.2.1\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"define-property\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-1.0.0.tgz\",\"integrity\":\"sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.0\"}},\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"fill-range\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-4.0.0.tgz\",\"integrity\":\"sha512-VcpLTWqWDiTerugjj8e3+esbg+skS3M9e54UuR3iCeIDMXCLTsAH8hTSzDQU/X6/6t3eYkOKoZSef2PlU6U1XQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^2.0.1\",\"is-number\":\"^3.0.0\",\"repeat-string\":\"^1.6.1\",\"to-regex-range\":\"^2.1.0\"},\"dependencies\":{\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"is-number\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-3.0.0.tgz\",\"integrity\":\"sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true},\"micromatch\":{\"version\":\"3.1.10\",\"resolved\":\"https://registry.npmmirror.com/micromatch/-/micromatch-3.1.10.tgz\",\"integrity\":\"sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-diff\":\"^4.0.0\",\"array-unique\":\"^0.3.2\",\"braces\":\"^2.3.1\",\"define-property\":\"^2.0.2\",\"extend-shallow\":\"^3.0.2\",\"extglob\":\"^2.0.4\",\"fragment-cache\":\"^0.2.1\",\"kind-of\":\"^6.0.2\",\"nanomatch\":\"^1.2.9\",\"object.pick\":\"^1.3.0\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.2\"}}}},\"regenerate\":{\"version\":\"1.4.2\",\"resolved\":\"https://registry.npmmirror.com/regenerate/-/regenerate-1.4.2.tgz\",\"integrity\":\"sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==\",\"dev\":true},\"regenerator-runtime\":{\"version\":\"0.11.1\",\"resolved\":\"https://registry.npmmirror.com/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz\",\"integrity\":\"sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg==\",\"dev\":true},\"regenerator-transform\":{\"version\":\"0.10.1\",\"resolved\":\"https://registry.npmmirror.com/regenerator-transform/-/regenerator-transform-0.10.1.tgz\",\"integrity\":\"sha512-PJepbvDbuK1xgIgnau7Y90cwaAmO/LCLMI2mPvaXq2heGMR3aWW5/BQvYrhJ8jgmQjXewXvBjzfqKcVOmhjZ6Q==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.18.0\",\"babel-types\":\"^6.19.0\",\"private\":\"^0.1.6\"}},\"regex-cache\":{\"version\":\"0.4.4\",\"resolved\":\"https://registry.npmmirror.com/regex-cache/-/regex-cache-0.4.4.tgz\",\"integrity\":\"sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-equal-shallow\":\"^0.1.3\"}},\"regex-not\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/regex-not/-/regex-not-1.0.2.tgz\",\"integrity\":\"sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^3.0.2\",\"safe-regex\":\"^1.1.0\"}},\"regexpu-core\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/regexpu-core/-/regexpu-core-2.0.0.tgz\",\"integrity\":\"sha512-tJ9+S4oKjxY8IZ9jmjnp/mtytu1u3iyIQAfmI51IKWH6bFf7XR1ybtaO6j7INhZKXOTYADk7V5qxaqLkmNxiZQ==\",\"dev\":true,\"requires\":{\"regenerate\":\"^1.2.1\",\"regjsgen\":\"^0.2.0\",\"regjsparser\":\"^0.1.4\"}},\"regjsgen\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/regjsgen/-/regjsgen-0.2.0.tgz\",\"integrity\":\"sha512-x+Y3yA24uF68m5GA+tBjbGYo64xXVJpbToBaWCoSNSc1hdk6dfctaRWrNFTVJZIIhL5GxW8zwjoixbnifnK59g==\",\"dev\":true},\"regjsparser\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/regjsparser/-/regjsparser-0.1.5.tgz\",\"integrity\":\"sha512-jlQ9gYLfk2p3V5Ag5fYhA7fv7OHzd1KUH0PRP46xc3TgwjwgROIW572AfYg/X9kaNq/LJnu6oJcFRXlIrGoTRw==\",\"dev\":true,\"requires\":{\"jsesc\":\"~0.5.0\"},\"dependencies\":{\"jsesc\":{\"version\":\"0.5.0\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-0.5.0.tgz\",\"integrity\":\"sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==\",\"dev\":true}}},\"remove-trailing-separator\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\"integrity\":\"sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==\",\"dev\":true,\"optional\":true},\"repeat-element\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/repeat-element/-/repeat-element-1.1.4.tgz\",\"integrity\":\"sha512-LFiNfRcSu7KK3evMyYOuCzv3L10TW7yC1G2/+StMjK8Y6Vqd2MG7r/Qjw4ghtuCOjFvlnms/iMmLqpvW/ES/WQ==\",\"dev\":true,\"optional\":true},\"repeat-string\":{\"version\":\"1.6.1\",\"resolved\":\"https://registry.npmmirror.com/repeat-string/-/repeat-string-1.6.1.tgz\",\"integrity\":\"sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==\",\"dev\":true,\"optional\":true},\"repeating\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/repeating/-/repeating-2.0.1.tgz\",\"integrity\":\"sha512-ZqtSMuVybkISo2OWvqvm7iHSWngvdaW3IpsT9/uP8v4gMi591LY6h35wdOfvQdWCKFWZWm2Y1Opp4kV7vQKT6A==\",\"dev\":true,\"requires\":{\"is-finite\":\"^1.0.0\"}},\"resolve-url\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/resolve-url/-/resolve-url-0.2.1.tgz\",\"integrity\":\"sha512-ZuF55hVUQaaczgOIwqWzkEcEidmlD/xl44x1UZnhOXcYuFN2S6+rcxpG+C1N3So0wvNI3DmJICUFfu2SxhBmvg==\",\"dev\":true,\"optional\":true},\"ret\":{\"version\":\"0.1.15\",\"resolved\":\"https://registry.npmmirror.com/ret/-/ret-0.1.15.tgz\",\"integrity\":\"sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==\",\"dev\":true,\"optional\":true},\"safe-buffer\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.1.2.tgz\",\"integrity\":\"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\",\"dev\":true,\"optional\":true},\"safe-regex\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/safe-regex/-/safe-regex-1.1.0.tgz\",\"integrity\":\"sha512-aJXcif4xnaNUzvUuC5gcb46oTS7zvg4jpMTnuqtrEPlR3vFr4pxtdTwaF1Qs3Enjn9HK+ZlwQui+a7z0SywIzg==\",\"dev\":true,\"optional\":true,\"requires\":{\"ret\":\"~0.1.10\"}},\"semver\":{\"version\":\"5.7.1\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-5.7.1.tgz\",\"integrity\":\"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\"dev\":true},\"set-value\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/set-value/-/set-value-2.0.1.tgz\",\"integrity\":\"sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^2.0.1\",\"is-extendable\":\"^0.1.1\",\"is-plain-object\":\"^2.0.3\",\"split-string\":\"^3.0.1\"},\"dependencies\":{\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"slash\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/slash/-/slash-1.0.0.tgz\",\"integrity\":\"sha512-3TYDR7xWt4dIqV2JauJr+EJeW356RXijHeUlO+8djJ+uBXPn8/2dpzBc8yQhh583sVvc9CvFAeQVgijsH+PNNg==\",\"dev\":true},\"snapdragon\":{\"version\":\"0.8.2\",\"resolved\":\"https://registry.npmmirror.com/snapdragon/-/snapdragon-0.8.2.tgz\",\"integrity\":\"sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==\",\"dev\":true,\"optional\":true,\"requires\":{\"base\":\"^0.11.1\",\"debug\":\"^2.2.0\",\"define-property\":\"^0.2.5\",\"extend-shallow\":\"^2.0.1\",\"map-cache\":\"^0.2.2\",\"source-map\":\"^0.5.6\",\"source-map-resolve\":\"^0.5.0\",\"use\":\"^3.1.0\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}},\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"snapdragon-node\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/snapdragon-node/-/snapdragon-node-2.1.1.tgz\",\"integrity\":\"sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==\",\"dev\":true,\"optional\":true,\"requires\":{\"define-property\":\"^1.0.0\",\"isobject\":\"^3.0.0\",\"snapdragon-util\":\"^3.0.1\"},\"dependencies\":{\"define-property\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-1.0.0.tgz\",\"integrity\":\"sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.0\"}},\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"snapdragon-util\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/snapdragon-util/-/snapdragon-util-3.0.1.tgz\",\"integrity\":\"sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.2.0\"}},\"source-map\":{\"version\":\"0.5.7\",\"resolved\":\"https://registry.npmmirror.com/source-map/-/source-map-0.5.7.tgz\",\"integrity\":\"sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==\",\"dev\":true},\"source-map-resolve\":{\"version\":\"0.5.3\",\"resolved\":\"https://registry.npmmirror.com/source-map-resolve/-/source-map-resolve-0.5.3.tgz\",\"integrity\":\"sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==\",\"dev\":true,\"optional\":true,\"requires\":{\"atob\":\"^2.1.2\",\"decode-uri-component\":\"^0.2.0\",\"resolve-url\":\"^0.2.1\",\"source-map-url\":\"^0.4.0\",\"urix\":\"^0.1.0\"}},\"source-map-support\":{\"version\":\"0.4.18\",\"resolved\":\"https://registry.npmmirror.com/source-map-support/-/source-map-support-0.4.18.tgz\",\"integrity\":\"sha512-try0/JqxPLF9nOjvSta7tVondkP5dwgyLDjVoyMDlmjugT2lRZ1OfsrYTkCd2hkDnJTKRbO/Rl3orm8vlsUzbA==\",\"dev\":true,\"requires\":{\"source-map\":\"^0.5.6\"}},\"source-map-url\":{\"version\":\"0.4.1\",\"resolved\":\"https://registry.npmmirror.com/source-map-url/-/source-map-url-0.4.1.tgz\",\"integrity\":\"sha512-cPiFOTLUKvJFIg4SKVScy4ilPPW6rFgMgfuZJPNoDuMs3nC1HbMUycBoJw77xFIp6z1UJQJOfx6C9GMH80DiTw==\",\"dev\":true,\"optional\":true},\"split-string\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/split-string/-/split-string-3.1.0.tgz\",\"integrity\":\"sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^3.0.0\"}},\"static-extend\":{\"version\":\"0.1.2\",\"resolved\":\"https://registry.npmmirror.com/static-extend/-/static-extend-0.1.2.tgz\",\"integrity\":\"sha512-72E9+uLc27Mt718pMHt9VMNiAL4LMsmDbBva8mxWUCkT07fSzEGMYUCk0XWY6lp0j6RBAG4cJ3mWuZv2OE3s0g==\",\"dev\":true,\"optional\":true,\"requires\":{\"define-property\":\"^0.2.5\",\"object-copy\":\"^0.1.0\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}}}},\"string_decoder\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/string_decoder/-/string_decoder-1.1.1.tgz\",\"integrity\":\"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\"dev\":true,\"optional\":true,\"requires\":{\"safe-buffer\":\"~5.1.0\"}},\"strip-ansi\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/strip-ansi/-/strip-ansi-3.0.1.tgz\",\"integrity\":\"sha512-VhumSSbBqDTP8p2ZLKj40UjBCV4+v8bUSEpUb4KjRgWk9pbqGF4REFj6KEagidb2f/M6AzC0EmFyDNGaw9OCzg==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^2.0.0\"}},\"supports-color\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-2.0.0.tgz\",\"integrity\":\"sha512-KKNVtd6pCYgPIKU4cp2733HWYCpplQhddZLBUryaAHou723x+FRzQ5Df824Fj+IyyuiQTRoub4SnIFfIcrp70g==\",\"dev\":true},\"to-fast-properties\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/to-fast-properties/-/to-fast-properties-1.0.3.tgz\",\"integrity\":\"sha512-lxrWP8ejsq+7E3nNjwYmUBMAgjMTZoTI+sdBOpvNyijeDLa29LUn9QaoXAHv4+Z578hbmHHJKZknzxVtvo77og==\",\"dev\":true},\"to-object-path\":{\"version\":\"0.3.0\",\"resolved\":\"https://registry.npmmirror.com/to-object-path/-/to-object-path-0.3.0.tgz\",\"integrity\":\"sha512-9mWHdnGRuh3onocaHzukyvCZhzvr6tiflAy/JRFXcJX0TjgfWA9pk9t8CMbzmBE4Jfw58pXbkngtBtqYxzNEyg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"to-regex\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/to-regex/-/to-regex-3.0.2.tgz\",\"integrity\":\"sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==\",\"dev\":true,\"optional\":true,\"requires\":{\"define-property\":\"^2.0.2\",\"extend-shallow\":\"^3.0.2\",\"regex-not\":\"^1.0.2\",\"safe-regex\":\"^1.1.0\"}},\"to-regex-range\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/to-regex-range/-/to-regex-range-2.1.1.tgz\",\"integrity\":\"sha512-ZZWNfCjUokXXDGXFpZehJIkZqq91BcULFq/Pi7M5i4JnxXdhMKAK682z8bCW3o8Hj1wuuzoKcW3DfVzaP6VuNg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^3.0.0\",\"repeat-string\":\"^1.6.1\"},\"dependencies\":{\"is-number\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-3.0.0.tgz\",\"integrity\":\"sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}}}},\"trim-right\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/trim-right/-/trim-right-1.0.1.tgz\",\"integrity\":\"sha512-WZGXGstmCWgeevgTL54hrCuw1dyMQIzWy7ZfqRJfSmJZBwklI15egmQytFP6bPidmw3M8d5yEowl1niq4vmqZw==\",\"dev\":true},\"union-value\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/union-value/-/union-value-1.0.1.tgz\",\"integrity\":\"sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-union\":\"^3.1.0\",\"get-value\":\"^2.0.6\",\"is-extendable\":\"^0.1.1\",\"set-value\":\"^2.0.1\"}},\"unset-value\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/unset-value/-/unset-value-1.0.0.tgz\",\"integrity\":\"sha512-PcA2tsuGSF9cnySLHTLSh2qrQiJ70mn+r+Glzxv2TWZblxsxCC52BDlZoPCsz7STd9pN7EZetkWZBAvk4cgZdQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"has-value\":\"^0.3.1\",\"isobject\":\"^3.0.0\"},\"dependencies\":{\"has-value\":{\"version\":\"0.3.1\",\"resolved\":\"https://registry.npmmirror.com/has-value/-/has-value-0.3.1.tgz\",\"integrity\":\"sha512-gpG936j8/MzaeID5Yif+577c17TxaDmhuyVgSwtnL/q8UUTySg8Mecb+8Cf1otgLoD7DDH75axp86ER7LFsf3Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"get-value\":\"^2.0.3\",\"has-values\":\"^0.1.4\",\"isobject\":\"^2.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-2.1.0.tgz\",\"integrity\":\"sha512-+OUdGJlgjOBZDfxnDjYYG6zp487z0JGNQq3cYQYg5f5hKR+syHMsaztzGeml/4kGG55CSpKSpWTY+jYGgsHLgA==\",\"dev\":true,\"optional\":true,\"requires\":{\"isarray\":\"1.0.0\"}}}},\"has-values\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/has-values/-/has-values-0.1.4.tgz\",\"integrity\":\"sha512-J8S0cEdWuQbqD9//tlZxiMuMNmxB8PlEwvYwuxsTmR1G5RXUePEX/SJn7aD0GMLieuZYSwNH0cQuJGwnYunXRQ==\",\"dev\":true,\"optional\":true},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"urix\":{\"version\":\"0.1.0\",\"resolved\":\"https://registry.npmmirror.com/urix/-/urix-0.1.0.tgz\",\"integrity\":\"sha512-Am1ousAhSLBeB9cG/7k7r2R0zj50uDRlZHPGbazid5s9rlF1F/QKYObEKSIunSjIOkJZqwRRLpvewjEkM7pSqg==\",\"dev\":true,\"optional\":true},\"use\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/use/-/use-3.1.1.tgz\",\"integrity\":\"sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==\",\"dev\":true,\"optional\":true},\"user-home\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/user-home/-/user-home-1.1.1.tgz\",\"integrity\":\"sha512-aggiKfEEubv3UwRNqTzLInZpAOmKzwdHqEBmW/hBA/mt99eg+b4VrX6i+IRLxU8+WJYfa33rGwRseg4eElUgsQ==\",\"dev\":true},\"util-deprecate\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/util-deprecate/-/util-deprecate-1.0.2.tgz\",\"integrity\":\"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\",\"dev\":true,\"optional\":true},\"v8flags\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/v8flags/-/v8flags-2.1.1.tgz\",\"integrity\":\"sha512-SKfhk/LlaXzvtowJabLZwD4K6SGRYeoxA7KJeISlUMAB/NT4CBkZjMq3WceX2Ckm4llwqYVo8TICgsDYCBU2tA==\",\"dev\":true,\"requires\":{\"user-home\":\"^1.1.1\"}},\"wrappy\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/wrappy/-/wrappy-1.0.2.tgz\",\"integrity\":\"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\",\"dev\":true}}}"}],"posts":[{"title":"重温JavaScript","slug":"重温JavaScript","date":"2023-05-12T10:55:02.000Z","updated":"2023-05-12T10:55:40.089Z","comments":true,"path":"/post/重温JavaScript.html","link":"","permalink":"http://yoursite.com/post/%E9%87%8D%E6%B8%A9JavaScript.html","excerpt":"JavaScript","text":"111","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Web Components","slug":"web-components","date":"2023-01-06T06:25:48.000Z","updated":"2023-05-12T10:49:20.018Z","comments":true,"path":"/post/web-components.html","link":"","permalink":"http://yoursite.com/post/web-components.html","excerpt":"Web Components","text":"Web Components作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义 UI 控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。 组成 Custom elements（自定义元素） Shadow DOM（影子 DOM） HTML templates（HTML 模板） Custom elements（自定义元素）允许您定义 custom elements 及其行为，然后可以在您的用户界面中按照需要使用它们。 1234567891011121314151617class ShadowElement extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; const mountPoint = document.createElement(&#x27;div&#x27;); const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); shadowRoot.appendChild(mountPoint); ReactDOM.render(&lt;MyApp /&gt;, mountPoint); &#125;&#125;customElements.define(&#x27;my-custom-element&#x27;, ShadowElement); Shadow DOM（影子 DOM）有一些 Shadow DOM 特有的术语需要我们了解： Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。 Shadow tree：Shadow DOM 内部的 DOM 树。 Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。 Shadow root: Shadow tree 的根节点。 基本用法 12let shadow = elementRef.attachShadow(&#123;mode: &#x27;open&#x27;&#125;);let shadow = elementRef.attachShadow(&#123;mode: &#x27;closed&#x27;&#125;); open 表示可以通过页面内的 JavaScript 方法来获取 Shadow DOM，例如使用 Element.shadowRoot 属性： 1let myShadowDom = myCustomElem.shadowRoot; templates and slots复用结构，减少使用相同的标记结构。 此元素及其内容不会在 DOM 中呈现，可使用 JavaScript 去引用它。 123&lt;template id=&quot;my-paragraph&quot;&gt; &lt;p&gt;My paragraph&lt;/p&gt;&lt;/template&gt; 上面的代码不会展示在你的页面中，直到你用 JavaScript 获取它的引用，然后添加到 DOM 中，如下面的代码： 123let template = document.getElementById(&#x27;my-paragraph&#x27;);let templateContent = template.content;document.body.appendChild(templateContent); 在 Web Components 中使用模板 1234567891011customElements.define(&#x27;my-paragraph&#x27;, class extends HTMLElement &#123; constructor() &#123; super(); let template = document.getElementById(&#x27;my-paragraph&#x27;); let templateContent = template.content; const shadowRoot = this.attachShadow(&#123;mode: &#x27;open&#x27;&#125;) .appendChild(templateContent.cloneNode(true)); &#125;&#125;) 使用槽 (slots) 添加灵活度 改造 my-paragraph 1&lt;p&gt;&lt;slot name=&quot;my-text&quot;&gt;My default text&lt;/slot&gt;&lt;/p&gt; 跟 Vue 插槽一样的用法。 123456789101112&lt;my-paragraph&gt; &lt;span slot=&quot;my-text&quot;&gt;Let&#x27;s have some different text!&lt;/span&gt;&lt;/my-paragraph&gt;// or&lt;my-paragraph&gt; &lt;ul slot=&quot;my-text&quot;&gt; &lt;li&gt;Let&#x27;s have some different text!&lt;/li&gt; &lt;li&gt;In a list!&lt;/li&gt; &lt;/ul&gt;&lt;/my-paragraph&gt; 完整示例： 1234567891011121314151617181920212223242526272829303132333435363738394041// html&lt;body&gt; &lt;h1&gt;template &amp; slot&lt;/h1&gt; &lt;template id=&quot;my-paragraph&quot;&gt; &lt;!-- 默认插槽 --&gt; &lt;slot name=&quot;title&quot;&gt; &lt;h1&gt;Default Title&lt;/h1&gt; &lt;/slot&gt; &lt;slot&gt;default slot&lt;/slot&gt; &lt;p&gt;My paragraph&lt;/p&gt; &lt;/template&gt; &lt;my-paragraph&gt; &lt;!-- 使用插槽 --&gt; &lt;h1 slot=&quot;title&quot;&gt;Slot title&lt;/h1&gt; &lt;/my-paragraph&gt; &lt;hr&gt;&lt;/body&gt;// jsclass MyParagraph extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; let template = document.getElementById(&#x27;my-paragraph&#x27;); let templateContent = template.content; this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;) .appendChild(templateContent.cloneNode(true)) &#125;&#125;customElements.define(&#x27;my-paragraph&#x27;, MyParagraph) 组件通信 Lightning Web Component 在 LWC 中，可以通过实现 CustomEvent 接口进行自定义事件，通过 EventTarget.dispatchEvent() 来分配事件。 注意： 定义事件时，不需要在事件名前加 on，因为在使用的时候会默认在名称前使用 on，比如：当我们定义了 click 事件，在 HTML 代码中用 onclick 来调用它 父组件 123456789101112131415// parent compconnectedCallback() &#123; const child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;) // 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子 child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;) // 2. 通过组件实例直接修改内部数据（⚠️未获取到） // console.log(&#x27;??&#x27;, child) // 3. 监听子组件内部定义的事件 child.addEventListener(&#x27;custom-event&#x27;, (&#123; detail &#125;) =&gt; &#123; console.log(&#x27;事件触发 &#x27;, detail.value); &#125;) &#125; 子组件 12345678910111213141516// child compconnectedCallback() &#123; // 定义事件 const event = new CustomEvent(&#x27;custom-event&#x27;, &#123; detail: &#123; value: &#x27;child web component&#x27; &#125; &#125;) this.dispatchEvent(event) const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 子组件直接调用父组件实例上的方法123456789101112131415// parent compsayHello(msg) &#123; console.log(msg, this.data)&#125;// child compconnectedCallback() &#123; const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件实例 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 监听组件上属性的变化1234567891011121314151617// parentconst child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;)// 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;)// child// 监听属性变化，必须定静态的 observedAttributes 方法static get observedAttributes() &#123; return [&#x27;text&#x27;];&#125;attributeChangedCallback(name, oldValue, newValue) &#123; console.log(&#x27;name&#x27;, name) console.log(&#x27;oldValue&#x27;, oldValue) console.log(&#x27;newValue&#x27;, newValue)&#125; web component in ReactJSReact 和 Web Components 为了解决不同的问题而生。 Web Components 为可复用组件提供了强大的封装，而 React 则提供了声明式的解决方案，使 DOM 与数据保持同步。 两者旨在互补。作为开发人员，可以自由选择在 Web Components 中使用 React，或者在 React 中使用 Web Components，或者两者共存。 问题 “react”: “^16.12.0” 123456789101112131415161718192021222324252627282930class MyApp extends React.Component &#123; render() &#123; return &lt;span onClick=&#123;() =&gt; alert(&#x27;I have been clicked&#x27;)&#125;&gt;Click me&lt;/span&gt;; &#125;&#125;class ShadowElement extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; const mountPoint = document.createElement(&#x27;div&#x27;); const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); shadowRoot.appendChild(mountPoint); ReactDOM.render(&lt;MyApp /&gt;, mountPoint); &#125;&#125;customElements.define(&#x27;my-custom-element&#x27;, ShadowElement);// 使用&lt;div className=&quot;app-main&quot; onClick=&#123;()=&gt; console.log(&#x27;app main clicked&#x27;)&#125;&gt; &lt;my-custom-element&gt;&lt;/my-custom-element&gt;&lt;/div&gt; 效果图 “react”: “^17.0.2” 及以上版本，已解决此问题。 代码一致，效果图。 解决方案 Web Components 触发的事件可能无法通过 React 渲染树正确的传递。 你需要在 React 组件中手动添加事件处理器来处理这些事件。 Shadow DOM 重定向了 click 事件并将其封装在 shadow 中，将组件内部的所有内容封装在单独的作用域中，并隔离事件。React 并不支持这样的 Shadow DOM，因此事件委托失败，事件无法触发。 这意味着，如果您将带有 click 事件的 React 组件放在 Web 组件中，则点击事件可能不会冒泡到 React 组件中。这是因为事件在 Web 组件的 Shadow DOM 中触发，然后被封装在 Shadow DOM 中，而不会传播到外部组件。 如果您希望在使用 Web 组件时能够触发 React 事件，则可以使用上述方法之一，例如重新绑定事件到实际的 shadow 容器并使用 “__reactInternalInstances” 来调度正确的 React 事件。您还可以使用其他方法来解决此问题，例如使用自定义事件或使用事件代理。 https://stackoverflow.com/questions/37866237/click-event-not-firing-when-react-component-in-a-shadow-dom 相关文章：当 Shadow Dom 遇上 React event https://github.com/huruji/blog/issues/104 编写组件 https://juejin.cn/post/7157955953776820254 https://juejin.cn/post/7161816035186720781 https://quark-design.hellobike.com/#/ 参考链接 MDN官方文档 WC官方示例 基于 Web Components 跨框架组件开发 Shadow :host 选择器","categories":[],"tags":[{"name":"组件","slug":"组件","permalink":"http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"}]},{"title":"微前端","slug":"micro-qiankun","date":"2023-01-05T13:24:21.000Z","updated":"2023-05-12T10:49:20.013Z","comments":true,"path":"/post/micro-qiankun.html","link":"","permalink":"http://yoursite.com/post/micro-qiankun.html","excerpt":"shadow dom、样式隔离方案","text":"qiankun https://qiankun.umijs.org/zh 参考链接 样式隔离问题","categories":[],"tags":[{"name":"微前端","slug":"微前端","permalink":"http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"}]},{"title":"Vue3项目实战(六)：通用功能开发(二)","slug":"vue3-project-generalModule2","date":"2023-01-01T06:53:36.000Z","updated":"2023-05-12T10:49:20.016Z","comments":true,"path":"/post/vue3-project-generalModule2.html","link":"","permalink":"http://yoursite.com/post/vue3-project-generalModule2.html","excerpt":"screenfull/headerSearch/tagView/guide","text":"screenfull对于 screenfull 和之前一样 ，我们还是先分析它的原理，然后在制定对应的方案实现 原理： 对于 screenfull 而言，浏览器本身已经提供了对用的 API，点击这里即可查看，这个 API 中，主要提供了两个方法： Document.exitFullscreen()：该方法用于请求从全屏模式切换到窗口模式 Element.requestFullscreen()：该方法用于请求浏览器（user agent）将特定元素（甚至延伸到它的后代元素）置为全屏模式 比如我们可以通过 document.getElementById(&#39;app&#39;).requestFullscreen() 在获取 id=app 的 DOM 之后，把该区域置为全屏 但是该方法存在一定的小问题，兼容性也不是那么好。 所以通常情况下我们不会直接使用该 API 来去实现全屏效果，而是会使用它的包装库 screenfull 整体的方案实现分为两步： 封装 screenfull 组件 展示切换按钮 基于 screenfull 实现切换功能 在 navbar 中引入该组件 明确好了方案之后，接下来我们就落地该方案 封装 screenfull 组件： 下来依赖包 screenfull 1npm i screenfull@5.1.0 -S 创建 components/Screenfull/index 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;template&gt; &lt;div&gt; &lt;svg-icon :icon=&quot;isFullscreen ? &#x27;exit-fullscreen&#x27; : &#x27;fullscreen&#x27;&quot; @click=&quot;onToggle&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;import screenfull from &#x27;screenfull&#x27;// 是否全屏const isFullscreen = ref(false)// 切换事件const onToggle = () =&gt; &#123; if (screenfull.isEnabled) &#123; screenfull.toggle() &#125;&#125;// 监听变化const change = () =&gt; &#123; if (screenfull.isEnabled) &#123; isFullscreen.value = screenfull.isFullscreen &#125;&#125;// 设置侦听器onMounted(() =&gt; &#123; if (screenfull.isEnabled) &#123; screenfull.on(&#x27;change&#x27;, change) &#125;&#125;)// 删除侦听器onUnmounted(() =&gt; &#123; if (screenfull.isEnabled) &#123; screenfull.off(&#x27;change&#x27;, change) &#125;&#125;)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt; 在 navbar 中引入该组件： 12345&lt;screenfull class=&quot;right-menu-item hover-effect&quot; /&gt;...import Screenfull from &#x27;@/components/Screenfull&#x27; headerSeach 所谓 headerSearch 一般是指 页面搜索 原理： headerSearch 是复杂后台系统中非常常见的一个功能，它可以：在指定搜索框中对当前应用中所有页面进行检索，以 select 的形式展示出被检索的页面，以达到快速进入的目的 那么明确好了 headerSearch 的作用之后，接下来我们来看一下对应的实现原理 根据前面的目的我们可以发现，整个 headerSearch 其实可以分为三个核心的功能点： 根据指定内容对所有页面进行检索 以 select 形式展示检索出的页面 通过检索页面可快速进入对应页面 那么围绕着这三个核心的功能点，我们想要分析它的原理就非常简单了：根据指定内容检索所有页面，把检索出的页面以 select 展示，点击对应 option 可进入到指定页面 方案： 对照着三个核心功能点和原理，想要指定对应的实现方案是非常简单的一件事情了 创建 headerSearch 组件，用作样式展示和用户输入内容获取 获取所有的页面数据，用作被检索的数据源 根据用户输入内容在数据源中进行模糊搜索(https://fusejs.io/) 把搜索到的内容以 select 进行展示 监听 select 的 change 事件，完成对应跳转 headerSearch 组件创建 components/headerSearch/index 组件，当点击搜索图标时，通过 transition 动画，将其长度展示出来，并且自动聚焦 focus(): 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;template&gt; &lt;div :class=&quot;&#123; show: isShow &#125;&quot; class=&quot;header-search&quot;&gt; &lt;svg-icon class-name=&quot;search-icon&quot; icon=&quot;search&quot; @click.stop=&quot;onShowClick&quot; /&gt; &lt;el-select ref=&quot;headerSearchSelectRef&quot; class=&quot;header-search-select&quot; v-model=&quot;search&quot; filterable default-first-option remote placeholder=&quot;Search&quot; :remote-method=&quot;querySearch&quot; @change=&quot;onSelectChange&quot; &gt; &lt;el-option v-for=&quot;option in 5&quot; :key=&quot;option&quot; :label=&quot;option&quot; :value=&quot;option&quot; &gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;// 控制 search 显示const isShow = ref(false)// el-select 实例const headerSearchSelectRef = ref(null)const onShowClick = () =&gt; &#123; isShow.value = !isShow.value headerSearchSelectRef.value.focus()&#125;// search 相关const search = ref(&#x27;&#x27;)// 搜索方法const querySearch = () =&gt; &#123; console.log(&#x27;querySearch&#x27;)&#125;// 选中回调const onSelectChange = () =&gt; &#123; console.log(&#x27;onSelectChange&#x27;)&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.header-search &#123; font-size: 0 !important; .search-icon &#123; cursor: pointer; font-size: 18px; vertical-align: middle; &#125; .header-search-select &#123; font-size: 18px; transition: width 0.2s; // width 动画 width: 0; overflow: hidden; background: transparent; border-radius: 0; display: inline-block; vertical-align: middle; ::v-deep .el-input__inner &#123; border-radius: 0; border: 0; padding-left: 0; padding-right: 0; box-shadow: none !important; border-bottom: 1px solid #d9d9d9; vertical-align: middle; &#125; &#125; &amp;.show &#123; .header-search-select &#123; width: 210px; margin-left: 10px; &#125; &#125;&#125;&lt;/style&gt; 在 navbar 中导入该组件 12345&lt;header-search class=&quot;right-menu-item hover-effect&quot;&gt;&lt;/header-search&gt;...import HeaderSearch from &#x27;@/components/HeaderSearch/index.vue&#x27; 获取数据源在有了 headerSearch 之后，接下来就可以来处理对应的 检索数据源了 检索数据源 表示：有哪些页面希望检索 那么对于我们当前的业务而言，我们希望被检索的页面其实就是左侧菜单中的页面，那么我们检索数据源即为：左侧菜单对应的数据源 根据以上原理，我们可以得出以下代码： 1234567891011121314&lt;script setup&gt;import &#123; ref, computed &#125; from &#x27;vue&#x27;import &#123; filterRouters, generateMenus &#125; from &#x27;@/utils/route&#x27;import &#123; useRouter &#125; from &#x27;vue-router&#x27;...// 检索数据源const router = useRouter()const searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) console.log(generateMenus(filterRoutes)) return generateMenus(filterRoutes)&#125;)console.log(searchPool)&lt;/script&gt; 模糊搜索Fuse.js Fuse.js is a powerful, lightweight fuzzy-search library, with zero dependencies. 如果我们想要进行 模糊搜索 的话，那么需要依赖一个第三方的库 fuse.js 它是0️⃣依赖的，专门处理模糊搜索的库。 Why should I use it? 使用 Fuse.js，您不需要仅仅为了处理搜索而设置专用的后端。 简单性和性能是开发这个库的主要标准。 安装 fuse.js 1npm install --save fuse.js@6.4.6 初始化 Fuse，更多初始化配置项 可点击这里 12345678910111213141516171819202122232425import Fuse from &#x27;fuse.js&#x27;/*** 搜索库相关*/const fuse = new Fuse(list, &#123; // 是否按优先级进行排序 shouldSort: true, // 匹配长度超过这个值的才会被认为是匹配的 minMatchCharLength: 1, // 将被搜索的键列表。 这支持嵌套路径、加权搜索、在字符串和对象数组中搜索。 // name：搜索的键 // weight：对应的权重 // 表示我们将用户输入的值，与 title 和 path 进行匹配 keys: [ &#123; name: &#x27;title&#x27;, weight: 0.7 &#125;, &#123; name: &#x27;path&#x27;, weight: 0.3 &#125; ] &#125;) 参考 Fuse Demo 与 最终效果，可以得出，我们最终期望得到如下的检索数据源结构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[ &#123; &quot;path&quot;:&quot;/my&quot;, &quot;title&quot;:[ &quot;个人中心&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/user&quot;, &quot;title&quot;:[ &quot;用户&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/user/manage&quot;, &quot;title&quot;:[ &quot;用户&quot;, &quot;用户管理&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/user/info&quot;, &quot;title&quot;:[ &quot;用户&quot;, &quot;用户信息&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/article&quot;, &quot;title&quot;:[ &quot;文章&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/article/ranking&quot;, &quot;title&quot;:[ &quot;文章&quot;, &quot;文章排名&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/article/create&quot;, &quot;title&quot;:[ &quot;文章&quot;, &quot;创建文章&quot; ] &#125;] 所以我们之前处理了的数据源并不符合我们的需要，所以我们需要对数据源进行重新处理 数据源重处理，生成 searchPool我们明确了最终我们期望得到数据源结构，那么接下来我们就对重新计算数据源，生成对应的 searchPoll 创建 components/HeaderSearch/FuseData.js 123456789101112131415161718192021222324252627282930313233343536373839import path from &#x27;path&#x27;import i18n from &#x27;@/i18n&#x27;/** * 筛选出可供搜索的路由对象 * @param routes 路由表 * @param basePath 基础路径，默认为 / * @param prefixTitle 父级title，子集title集合 [文章，文章排名] */export const generateRoutes = (routes, basePath = &#x27;/&#x27;, prefixTitle = []) =&gt; &#123; // 创建 result 数据 let res = [] // 循环 routes 路由 for (const route of routes) &#123; // 创建包含 path 和 title 的 item const data = &#123; path: path.resolve(basePath, route.path), title: [...prefixTitle] &#125; // 当前存在 meta 时，使用 i18n 解析国际化数据，组合成新的 title 内容 // 动态路由不允许被搜索（类似：user/:id 这种） // 匹配动态路由的正则 const re = /.*\\/:.*/ if (route.meta &amp;&amp; route.meta.title &amp;&amp; !re.exec(route.path)) &#123; const i18ntitle = i18n.global.t(`msg.route.$&#123;route.meta.title&#125;`) data.title = [...data.title, i18ntitle] res.push(data) &#125; // 存在 children 时，迭代调用 if (route.children) &#123; const tempRoutes = generateRoutes(route.children, data.path, data.title) if (tempRoutes.length &gt;= 1) &#123; res = [...res, ...tempRoutes] &#125; &#125; &#125; return res&#125; 这样，我们就通过 generateRoutes 方法，根据咱们的路由表，生成了符合 fuse.js 的数据。 在 headerSearch 中导入 generateRoutes 12345678910111213141516171819202122&lt;script setup&gt;import &#123; computed, ref &#125; from &#x27;vue&#x27;import &#123; generateRoutes &#125; from &#x27;./FuseData&#x27;import Fuse from &#x27;fuse.js&#x27;import &#123; filterRouters &#125; from &#x27;@/utils/route&#x27;import &#123; useRouter &#125; from &#x27;vue-router&#x27;...// 检索数据源const router = useRouter()const searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateRoutes(filterRoutes)&#125;)/** * 搜索库相关 */const fuse = new Fuse(searchPool.value, &#123; ...&#125;)&lt;/script&gt; 通过 querySearch 测试搜索结果 1234// 搜索方法const querySearch = query =&gt; &#123; console.log(fuse.search(query))&#125; 渲染检索数据数据源处理完成之后，最后我们就只需要完成: 渲染检索出的数据 完成对应跳转 那么下面我们按照步骤进行实现： 渲染检索出的数据 123456789101112131415161718192021222324&lt;template&gt; &lt;el-option v-for=&quot;option in searchOptions&quot; :key=&quot;option.item.path&quot; :label=&quot;option.item.title.join(&#x27; &gt; &#x27;)&quot; :value=&quot;option.item&quot; &gt;&lt;/el-option&gt;&lt;/template&gt;&lt;script setup&gt;...// 搜索结果const searchOptions = ref([])// 搜索方法const querySearch = query =&gt; &#123; if (query !== &#x27;&#x27;) &#123; searchOptions.value = fuse.search(query) &#125; else &#123; searchOptions.value = [] &#125;&#125;...&lt;/script&gt; 完成对应跳转 123const onSelectChange = val =&gt; &#123; router.push(val.path)&#125; 剩余问题处理这里我们的 headerSearch 功能基本上就已经处理完成了，但是还存在一些小 bug ，那么最后这一小节我们就处理下这些剩余的 bug 在 search 打开时，点击 body 关闭 search 在 search 关闭时，清理 searchOptions headerSearch 应该具备国际化能力 明确好问题之后，接下来我们进行处理 首先我们先处理前前面两个问题： 123456789101112131415161718/** * 关闭 search 的处理事件 */const onClose = () =&gt; &#123; headerSearchSelectRef.value.blur() isShow.value = false searchOptions.value = []&#125;/** * 监听 search 打开，处理 close 事件 */watch(isShow, val =&gt; &#123; if (val) &#123; document.body.addEventListener(&#x27;click&#x27;, onClose) &#125; else &#123; document.body.removeEventListener(&#x27;click&#x27;, onClose) &#125;&#125;) 接下来是国际化的问题，想要处理这个问题非常简单，我们只需要：监听语言变化，重新计算数据源初始化 fuse 即可 在 utils/i18n 下，新建方法 watchSwitchLang 12345678910111213import &#123; watch &#125; from &#x27;vue&#x27;import store from &#x27;@/store&#x27;type IProps = ((lang: string) =&gt; void)[]export default function watchSwitchLang(...cbs: IProps) &#123; watch( () =&gt; store.getters.language, () =&gt; &#123; cbs.forEach(cb =&gt; cbs.forEach(cb =&gt; cb(store.getters.language))) &#125; )&#125; 在 headerSearch 监听变化，重新赋值 123456789101112131415161718192021222324252627282930313233&lt;script setup&gt;...import &#123; watchSwitchLang &#125; from &#x27;@/utils/i18n&#x27;...// 检索数据源const router = useRouter()let searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateRoutes(filterRoutes)&#125;)/*** 搜索库相关*/let fuseconst initFuse = searchPool =&gt; &#123; fuse = new Fuse(searchPool, &#123; ...&#125;initFuse(searchPool.value)...// 处理国际化watchSwitchLang(() =&gt; &#123; searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateRoutes(filterRoutes) &#125;) initFuse(searchPool.value)&#125;)&lt;/script&gt; headerSearch 方案总结那么到这里整个的 headerSearch 我们就已经全部处理完成了，整个 headerSearch 我们只需要把握住三个核心的关键点 根据指定内容对所有页面进行检索 以 select 形式展示检索出的页面 通过检索页面可快速进入对应页面 保证大方向没有错误，那么具体的细节处理我们具体分析就可以了。 关于细节的处理，可能比较复杂的地方有两个： 模糊搜索 检索数据源 对于这两块，我们依赖于 fuse.js 进行了实现，大大简化了我们的业务处理流程。 tagsView 原理及方案分析所谓 tagsView 可以分成两部分来去看： tags view 好像和废话一样是吧。那怎么分开看呢？ 首先我们先来看 tags： 所谓 tgas 指的是：位于 appmain 之上的标签 那么现在我们忽略掉 view，现在只有一个要求： 在 view 之上渲染这个 tag 仅看这一个要求，很简单吧。 views： 明确好了 tags 之后，我们来看 views。 脱离了 tags 只看 views 就更简单了，所谓 views ：指的就是一个用来渲染组件的位置，就像我们之前的 Appmain 一样，只不过这里的 views 可能稍微复杂一点，因为它需要在渲染的基础上增加： 动画 缓存 这两个额外的功能。 加上这两个功能之后可能会略显复杂，但是 官网已经帮助我们处理了这个问题 所以 单看 views 也是一个很简单的功能。 那么接下来我们需要做的就是把 tags 和 view 合并起来而已。 那么明确好了原理之后，我们就来看 实现方案： 创建 tagsView 组件：用来处理 tags 的展示 处理基于路由的动态过渡，在 AppMain 中进行：用于处理 view 的部分 整个的方案就是这么两大部，但是其中我们还需要处理一些细节相关的，完整的方案为： 监听路由变化，组成用于渲染 tags 的数据源 创建 tags 组件，根据数据源渲染 tag，渲染出来的 tags 需要同时具备 国际化 title 路由跳转 处理鼠标右键效果，根据右键处理对应数据源 处理基于路由的动态过渡 那么明确好了方案之后，接下来我们根据方案进行处理即可。 创建 tags 数据源tags 的数据源分为两部分： 保存数据：appmain 组件中进行 展示数据：tags 组件中进行 所以 tags 的数据我们最好把它保存到 vuex 中。 在 constant 中新建常量 12// tagsexport const TAGS_VIEW = &#x27;tagsView&#x27; 在 store/app 中创建 tagsViewList 123456789101112131415161718192021222324252627import &#123; LANG, TAGS_VIEW &#125; from &#x27;@/constant&#x27;import &#123; getItem, setItem &#125; from &#x27;@/utils/storage&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; ... tagsViewList: getItem(TAGS_VIEW) || [] &#125;), mutations: &#123; ... /** * 添加 tags */ addTagsViewList(state, tag) &#123; const isFind = state.tagsViewList.find(item =&gt; &#123; return item.path === tag.path &#125;) // 处理重复 if (!isFind) &#123; state.tagsViewList.push(tag) setItem(TAGS_VIEW, state.tagsViewList) &#125; &#125; &#125;, actions: &#123;&#125;&#125; 在 appmain 中监听路由的变化 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;script setup&gt;import &#123; watch &#125; from &#x27;vue&#x27;import &#123; isTags &#125; from &#x27;@/utils/tags&#x27;import &#123; generateTitle &#125; from &#x27;@/utils/i18n&#x27;import &#123; useRoute &#125; from &#x27;vue-router&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;const route = useRoute()/** * 生成 title */const getTitle = route =&gt; &#123; let title = &#x27;&#x27; if (!route.meta) &#123; // 处理无 meta 的路由 const pathArr = route.path.split(&#x27;/&#x27;) title = pathArr[pathArr.length - 1] &#125; else &#123; title = generateTitle(route.meta.title) &#125; return title&#125;/** * 监听路由变化 */const store = useStore()watch( route, (to, from) =&gt; &#123; if (!isTags(to.path)) return const &#123; fullPath, meta, name, params, path, query &#125; = to store.commit(&#x27;app/addTagsViewList&#x27;, &#123; fullPath, meta, name, params, path, query, title: getTitle(to) &#125;) &#125;, &#123; immediate: true &#125;)&lt;/script&gt; 创建 utils/tags 1234567891011const whiteList = [&#x27;/login&#x27;, &#x27;/import&#x27;, &#x27;/404&#x27;, &#x27;/401&#x27;]/** * path 是否需要被缓存 * @param &#123;*&#125; path * @returns */export function isTags(path) &#123; return !whiteList.includes(path)&#125; 生成 tagsView目前数据已经被保存到 store 中，那么接下来我们就依赖数据渲染 tags 创建 store/app 中 tagsViewList 的快捷访问 1tagsViewList: state =&gt; state.app.tagsViewList 创建 components/tagsview 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div class=&quot;tags-view-container&quot;&gt; &lt;router-link class=&quot;tags-view-item&quot; :class=&quot;isActive(tag) ? &#x27;active&#x27; : &#x27;&#x27;&quot; :style=&quot;&#123; backgroundColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#x27;&#x27;, borderColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#x27;&#x27; &#125;&quot; v-for=&quot;(tag, index) in $store.getters.tagsViewList&quot; :key=&quot;tag.fullPath&quot; :to=&quot;&#123; path: tag.fullPath &#125;&quot; &gt; &#123;&#123; tag.title &#125;&#125; &lt;i v-show=&quot;!isActive(tag)&quot; class=&quot;el-icon-close&quot; @click.prevent.stop=&quot;onCloseClick(index)&quot; /&gt; &lt;/router-link&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &#x27;vue-router&#x27;const route = useRoute()/** * 是否被选中 */const isActive = tag =&gt; &#123; return tag.path === route.path&#125;/** * 关闭 tag 的点击事件 */const onCloseClick = index =&gt; &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.tags-view-container &#123; height: 34px; width: 100%; background: #fff; border-bottom: 1px solid #d8dce5; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.12), 0 0 3px 0 rgba(0, 0, 0, 0.04); .tags-view-item &#123; display: inline-block; position: relative; cursor: pointer; height: 26px; line-height: 26px; border: 1px solid #d8dce5; color: #495060; background: #fff; padding: 0 8px; font-size: 12px; margin-left: 5px; margin-top: 4px; &amp;:first-of-type &#123; margin-left: 15px; &#125; &amp;:last-of-type &#123; margin-right: 15px; &#125; &amp;.active &#123; color: #fff; &amp;::before &#123; content: &#x27;&#x27;; background: #fff; display: inline-block; width: 8px; height: 8px; border-radius: 50%; position: relative; margin-right: 4px; &#125; &#125; // close 按钮 .el-icon-close &#123; width: 16px; height: 16px; line-height: 10px; vertical-align: 2px; border-radius: 50%; text-align: center; transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1); transform-origin: 100% 50%; &amp;:before &#123; transform: scale(0.6); display: inline-block; vertical-align: -3px; &#125; &amp;:hover &#123; background-color: #b4bccc; color: #fff; &#125; &#125; &#125;&#125;&lt;/style&gt; 在 layout/index 中导入 123456789&lt;div class=&quot;fixed-header&quot;&gt; &lt;!-- 顶部的 navbar --&gt; &lt;navbar /&gt; &lt;!-- tags --&gt; &lt;tags-view&gt;&lt;/tags-view&gt;&lt;/div&gt;import TagsView from &#x27;@/components/TagsView&#x27; tagsView 国际化处理tagsView 的国际化处理可以理解为修改现有 tags 的 title。 所以我们只需要： 监听到语言变化 国际化对应的 title 即可 根据方案，可生成如下代码： 在 store/app 中，创建修改 ttile 的 mutations 1234567/*** 为指定的 tag 修改 title*/changeTagsView(state, &#123; index, tag &#125;) &#123; state.tagsViewList[index] = tag setItem(TAGS_VIEW, state.tagsViewList)&#125; 在 appmain 中监听语言变化 12345678910111213141516import &#123; generateTitle, watchSwitchLang &#125; from &#x27;@/utils/i18n&#x27;/** * 国际化 tags */watchSwitchLang(() =&gt; &#123; store.getters.tagsViewList.forEach((route, index) =&gt; &#123; store.commit(&#x27;app/changeTagsView&#x27;, &#123; index, tag: &#123; ...route, title: getTitle(route) &#125; &#125;) &#125;)&#125;) contextMenu 展示处理 contextMenu 为 鼠标右键事件 contextMenu 事件的处理分为两部分： contextMenu 的展示 右键项对应逻辑处理 那么这一小节我们先处理第一部分：contextMenu 的展示： 创建 components/TagsView/ContextMenu 组件，作为右键展示部分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;ul class=&quot;context-menu-container&quot;&gt; &lt;li @click=&quot;onRefreshClick&quot;&gt; &#123;&#123; $t(&#x27;msg.tagsView.refresh&#x27;) &#125;&#125; &lt;/li&gt; &lt;li @click=&quot;onCloseRightClick&quot;&gt; &#123;&#123; $t(&#x27;msg.tagsView.closeRight&#x27;) &#125;&#125; &lt;/li&gt; &lt;li @click=&quot;onCloseOtherClick&quot;&gt; &#123;&#123; $t(&#x27;msg.tagsView.closeOther&#x27;) &#125;&#125; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps &#125; from &#x27;vue&#x27;defineProps(&#123; index: &#123; type: Number, required: true &#125;&#125;)const onRefreshClick = () =&gt; &#123;&#125;const onCloseRightClick = () =&gt; &#123;&#125;const onCloseOtherClick = () =&gt; &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.context-menu-container &#123; position: fixed; background: #fff; z-index: 3000; list-style-type: none; padding: 5px 0; border-radius: 4px; font-size: 12px; font-weight: 400; color: #333; box-shadow: 2px 2px 3px 0 rgba(0, 0, 0, 0.3); li &#123; margin: 0; padding: 7px 16px; cursor: pointer; &amp;:hover &#123; background: #eee; &#125; &#125;&#125;&lt;/style&gt; 在 tagsview 中控制 contextMenu 的展示 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;template&gt; &lt;div class=&quot;tags-view-container&quot;&gt; &lt;el-scrollbar class=&quot;tags-view-wrapper&quot;&gt; &lt;router-link ... @contextmenu.prevent=&quot;openMenu($event, index)&quot; &gt; ... &lt;/el-scrollbar&gt; &lt;context-menu v-show=&quot;visible&quot; :style=&quot;menuStyle&quot; :index=&quot;selectIndex&quot; &gt;&lt;/context-menu&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import ContextMenu from &#x27;./ContextMenu.vue&#x27;import &#123; ref, reactive, watch &#125; from &#x27;vue&#x27;import &#123; useRoute &#125; from &#x27;vue-router&#x27;...// contextMenu 相关const selectIndex = ref(0)const visible = ref(false)const menuStyle = reactive(&#123; left: 0, top: 0&#125;)/** * 展示 menu */const openMenu = (e, index) =&gt; &#123; const &#123; x, y &#125; = e menuStyle.left = x + &#x27;px&#x27; menuStyle.top = y + &#x27;px&#x27; selectIndex.value = index visible.value = true&#125;&lt;/script&gt; contextMenu 事件处理对于 contextMenu 的事件一共分为三个： 刷新 关闭右侧 关闭所有 但是不要忘记，我们之前 关闭单个 tags 的事件还没有进行处理，所以这一小节我们一共需要处理 4 个对应的事件 刷新事件 1234const router = useRouter()const onRefreshClick = () =&gt; &#123; router.go(0)&#125; 在 store/app 中，创建删除 tags 的 mutations，该 mutations 需要同时具备以下三个能力： 删除 “右侧” 删除 “其他” 删除 “当前” 根据以上理论得出以下代码： 12345678910111213141516171819202122/*** 删除 tag* @param &#123;type: &#x27;other&#x27;||&#x27;right&#x27;||&#x27;index&#x27;, index: index&#125; payload*/removeTagsView(state, payload) &#123; if (payload.type === &#x27;index&#x27;) &#123; state.tagsViewList.splice(payload.index, 1) return &#125; else if (payload.type === &#x27;other&#x27;) &#123; state.tagsViewList.splice( payload.index + 1, state.tagsViewList.length - payload.index + 1 ) state.tagsViewList.splice(0, payload.index) &#125; else if (payload.type === &#x27;right&#x27;) &#123; state.tagsViewList.splice( payload.index + 1, state.tagsViewList.length - payload.index + 1 ) &#125; setItem(TAGS_VIEW, state.tagsViewList)&#125;, 关闭右侧事件 1234567const store = useStore()const onCloseRightClick = () =&gt; &#123; store.commit(&#x27;app/removeTagsView&#x27;, &#123; type: &#x27;right&#x27;, index: props.index &#125;)&#125; 关闭其他 123456const onCloseOtherClick = () =&gt; &#123; store.commit(&#x27;app/removeTagsView&#x27;, &#123; type: &#x27;other&#x27;, index: props.index &#125;)&#125; 关闭当前（tagsview） 12345678910/** * 关闭 tag 的点击事件 */const store = useStore()const onCloseClick = index =&gt; &#123; store.commit(&#x27;app/removeTagsView&#x27;, &#123; type: &#x27;index&#x27;, index: index &#125;)&#125; 处理 contextMenu 的关闭行为1234567891011121314151617/** * 关闭 menu */const closeMenu = () =&gt; &#123; visible.value = false&#125;/** * 监听变化 */watch(visible, val =&gt; &#123; if (val) &#123; document.body.addEventListener(&#x27;click&#x27;, closeMenu) &#125; else &#123; document.body.removeEventListener(&#x27;click&#x27;, closeMenu) &#125;&#125;) 处理基于路由的动态过渡处理基于路由的动态过渡 官方已经给出了示例代码，结合 router-view 和 transition 我们可以非常方便的实现这个功能 在 appmain 中处理对应代码逻辑 1234567891011&lt;template&gt; &lt;div class=&quot;app-main&quot;&gt; &lt;router-view v-slot=&quot;&#123; Component, route &#125;&quot;&gt; &lt;transition name=&quot;fade-transform&quot; mode=&quot;out-in&quot;&gt; &lt;keep-alive&gt; &lt;component :is=&quot;Component&quot; :key=&quot;route.path&quot; /&gt; &lt;/keep-alive&gt; &lt;/transition&gt; &lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 增加了 tags 之后，app-main 的位置需要进行以下处理 12345678&lt;style lang=&quot;scss&quot; scoped&gt;.app-main &#123; min-height: calc(100vh - 50px - 43px); ... padding: 104px 20px 20px 20px; ...&#125;&lt;/style&gt; 在 styles/transition 中增加动画渲染 123456789101112131415/* fade-transform */.fade-transform-leave-active,.fade-transform-enter-active &#123; transition: all 0.5s;&#125;.fade-transform-enter-from &#123; opacity: 0; transform: translateX(-30px);&#125;.fade-transform-leave-to &#123; opacity: 0; transform: translateX(30px);&#125; tagsView 方案总结那么到这里关于 tagsView 的内容我们就已经处理完成了。 整个 tagsView 就像我们之前说的，拆开来看之后，会显得明确很多。 整个 tagsView 整体来看就是三块大的内容： tags：tagsView 组件 contextMenu：contextMenu 组件 view：appmain 组件 再加上一部分的数据处理即可。 最后关于 tags 的国际化部分，其实处理的方案有非常多，大家也可以在后面的 讨论题 中探讨一下关于 此处国家化 的实现，相信会有很多新的思路被打开的。","categories":[],"tags":[{"name":"工程化,Vue3,通用功能","slug":"工程化-Vue3-通用功能","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD/"}]},{"title":"Vue3项目实战(五)：通用功能开发（一）","slug":"vue3-project-generalModule","date":"2022-12-29T03:00:23.000Z","updated":"2023-05-12T10:49:20.015Z","comments":true,"path":"/post/vue3-project-generalModule.html","link":"","permalink":"http://yoursite.com/post/vue3-project-generalModule.html","excerpt":"国际化/换肤","text":"通用功能 国际化 动态换肤 screenfull headerSearch tagView guide 国际化实现原理先来看一个需求： 我们有一个变量 msg ，但是这个 msg 有且只能有两个值： hello world 你好世界 要求：根据需要切换 msg 的值 这样的一个需求就是 国际化 的需求，那么我们可以通过以下代码来实现这个需求 12345678910111213141516171819202122&lt;script&gt; // 1. 定义 msg 值的数据源 const messages = &#123; en: &#123; msg: &#x27;hello world&#x27; &#125;, zh: &#123; msg: &#x27;你好世界&#x27; &#125; &#125; // 2. 定义切换变量 let locale = &#x27;en&#x27; // 3. 定义赋值函数 function t(key) &#123; return messages[locale][key] &#125; // 4. 为 msg 赋值 let msg = t(&#x27;msg&#x27;) console.log(msg); // 修改 locale， 重新执行 t 方法，获取不同语言环境下的值&lt;/script&gt; 总结： 通过一个变量来 控制 语言环境 所有语言环境下的数据源要 预先 定义好 通过一个方法来获取 当前语言 下 指定属性 的值 该值即为国际化下展示值 基于 vue-i18n V9 的国际化实现方案分析在 vue 的项目中，我们不需要手写这么复杂的一些基础代码，可以直接使用 vue-i18n 进行实现（注意：vue3 下需要使用 V 9.x 的 i18n） vue-i18n 的使用可以分为四个部分： 创建 messages 数据源 创建 locale 语言变量 初始化 i18n 实例 注册 i18n 实例 那么接下来我们就去实现以下： 安装 vue-i18n1npm install vue-i18n@next 创建 i18n/index.js 文件 创建 messages 数据源 123456789101112const messages = &#123; en: &#123; msg: &#123; test: &#x27;hello world&#x27; &#125; &#125;, zh: &#123; msg: &#123; test: &#x27;你好世界&#x27; &#125; &#125;&#125; 创建 locale 语言变量 1const locale = &#x27;en&#x27; 初始化 i18n 实例 12345678910import &#123; createI18n &#125; from &#x27;vue-i18n&#x27;const i18n = createI18n(&#123; // 使用 Composition API 模式，则需要将其设置为false legacy: false, // 全局注入 $t 函数 globalInjection: true, locale, messages&#125;) 把 i18n 注册到 vue 实例 1export default i18n 在 main.js 中导入 1234// i18n （PS：导入放到 APP.vue 导入之前，因为后面我们会在 app.vue 中使用国际化内容）import i18n from &#x27;@/i18n&#x27;...app.use(i18n) 在 layout/components/Sidebar/index.vue 中使用 i18n 123&lt;h1 class=&quot;logo-title&quot; v-if=&quot;$store.getters.sidebarOpened&quot;&gt; &#123;&#123; $t(&#x27;msg.test&#x27;) &#125;&#125;&lt;/h1&gt; 修改 locale 的值，即可改变展示的内容 截止到现在我们已经实现了 i18n 的最基础用法，那么解下来我们就可以在项目中使用 i18n 完成国际化。 项目中完成国际化分成以下几步进行: 封装 langSelect 组件用于修改 locale 导入 el-locale 语言包 创建自定义语言包 封装 langSelect 组件 定义 store/app.js 123456789101112131415161718192021import &#123; LANG &#125; from &#x27;@/constant&#x27;import &#123; getItem, setItem &#125; from &#x27;@/utils/storage&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; ... language: getItem(LANG) || &#x27;zh&#x27; &#125;), mutations: &#123; ... /** * 设置国际化 */ setLanguage(state, lang) &#123; setItem(LANG, lang) state.language = lang &#125; &#125;, actions: &#123;&#125;&#125; 在 constant 中定义常量 12// 国际化export const LANG = &#x27;language&#x27; 创建 components/LangSelect/index 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;el-dropdown trigger=&quot;click&quot; class=&quot;international&quot; @command=&quot;handleSetLanguage&quot; &gt; &lt;div&gt; &lt;el-tooltip content=&quot;国际化&quot; :effect=&quot;effect&quot;&gt; &lt;svg-icon icon=&quot;language&quot; /&gt; &lt;/el-tooltip&gt; &lt;/div&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu&gt; &lt;el-dropdown-item :disabled=&quot;language === &#x27;zh&#x27;&quot; command=&quot;zh&quot;&gt; 中文 &lt;/el-dropdown-item&gt; &lt;el-dropdown-item :disabled=&quot;language === &#x27;en&#x27;&quot; command=&quot;en&quot;&gt; English &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useI18n &#125; from &#x27;vue-i18n&#x27;import &#123; defineProps, computed &#125; from &#x27;vue&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;defineProps(&#123; effect: &#123; type: String, default: &#x27;dark&#x27;, validator: function(value) &#123; // 这个值必须匹配下列字符串中的一个 return [&#x27;dark&#x27;, &#x27;light&#x27;].indexOf(value) !== -1 &#125; &#125;&#125;)const store = useStore()const language = computed(() =&gt; store.getters.language)// 切换语言的方法const i18n = useI18n()const handleSetLanguage = lang =&gt; &#123; i18n.locale.value = lang store.commit(&#x27;app/setLanguage&#x27;, lang) ElMessage.success(&#x27;更新成功&#x27;)&#125;&lt;/script&gt; 在 navbar 中导入 LangSelect 123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; ... &lt;div class=&quot;right-menu&quot;&gt; &lt;lang-select class=&quot;right-menu-item hover-effect&quot; /&gt; &lt;!-- 头像 --&gt; ... &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import LangSelect from &#x27;@/components/LangSelect&#x27;...&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.navbar &#123; ... .right-menu &#123; ... ::v-deep .right-menu-item &#123; display: inline-block; padding: 0 18px 0 0; font-size: 24px; color: #5a5e66; vertical-align: text-bottom; &amp;.hover-effect &#123; cursor: pointer; &#125; &#125; ...&#125;&lt;/style&gt; element-plus 国际化处理截止到目前，我们的国际化内容已经基本功能已经处理完成了。接下来需要处理的就是对应的语言包，有了语言包就可以实现整个项目中的所有国际化处理了。 那么对于语言包来说，我们整个项目中会分成两部分： element-plus 语言包：用来处理 element 组件的国际化功能 自定义语言包：用来处理 非element 组件的国际化功能 那么首先我们先来处理 element-plus 语言包： 在 plugins/index 中导入 element 的中文、英文语言包： 12import zhCn from &#x27;element-plus/es/locale/lang/zh-cn&#x27;import en from &#x27;element-plus/lib/locale/lang/en&#x27; 注册 element 时，根据当前语言选择使用哪种语言包 1234567import store from &#x27;@/store&#x27;export default app =&gt; &#123; app.use(ElementPlus, &#123; locale: store.getters.language === &#x27;en&#x27; ? en : zhCn &#125;)&#125; 自定义语言包国际化处理处理完 element 的国际化内容之后，接下来我们来处理 自定义语言包。 在本地创建 lang 文件夹，里面创建好本地需要的语言包，由于比较多，就放一部分来看看： 123456789101112131415161718192021// en.tsexport default &#123; login: &#123; title: &#x27;User Login&#x27;, loginBtn: &#x27;Login&#x27;, usernameRule: &#x27;Username is required&#x27;, passwordRule: &#x27;Password cannot be less than 6 digits&#x27;, &#125;, // other....&#125;// zh.tsexport default &#123; login: &#123; title: &#x27;用户登录&#x27;, loginBtn: &#x27;登录&#x27;, usernameRule: &#x27;用户名为必填项&#x27;, passwordRule: &#x27;密码不能少于6位&#x27;, &#125;, // other...&#125; 在 lang/index 中，导入语言包 12import mZhLocale from &#x27;./lang/zh&#x27;import mEnLocale from &#x27;./lang/en&#x27; 在 messages 中注册到语言包 123456789101112const messages = &#123; en: &#123; msg: &#123; ...mEnLocale &#125; &#125;, zh: &#123; msg: &#123; ...mZhLocale &#125; &#125;&#125; 处理项目国际化内容在处理好了国际化的语言包之后，接下来我们就可以应用国际化功能到我们的项目中 对于我们目前的项目而言，需要进行国际化处理的地方主要分为： 登录页面 navbar 区域 sidebar 区域 面包屑区域 那么这一小节，我们先来处理前两个 登录页面： login/index 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;template&gt; &lt;div class=&quot;login-container&quot;&gt; ... &lt;div class=&quot;title-container&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;&#123;&#123; $t(&#x27;msg.login.title&#x27;) &#125;&#125;&lt;/h3&gt; &lt;lang-select class=&quot;lang-select&quot; effect=&quot;light&quot;&gt;&lt;/lang-select&gt; &lt;/div&gt; ... &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%; margin-bottom: 30px&quot; :loading=&quot;loading&quot; @click=&quot;handleLogin&quot; &gt;&#123;&#123; $t(&#x27;msg.login.loginBtn&#x27;) &#125;&#125;&lt;/el-button &gt; &lt;div class=&quot;tips&quot; v-html=&quot;$t(&#x27;msg.login.desc&#x27;)&quot;&gt;&lt;/div&gt; &lt;/el-form&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useI18n &#125; from &#x27;vue-i18n&#x27;...// 验证规则const i18n = useI18n()const loginRules = ref(&#123; username: [ &#123; ... message: i18n.t(&#x27;msg.login.usernameRule&#x27;) &#125; ], ...&#125;)...&lt;/script&gt; login/rules 1234567891011import i18n from &#x27;@/i18n&#x27;export const validatePassword = () =&gt; &#123; return (rule, value, callback) =&gt; &#123; if (value.length &lt; 6) &#123; callback(new Error(i18n.global.t(&#x27;msg.login.passwordRule&#x27;))) &#125; else &#123; callback() &#125; &#125;&#125; navbar 区域 layout/components/navbar 1234567891011121314151617181920&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; ... &lt;template #dropdown&gt; &lt;el-dropdown-menu class=&quot;user-dropdown&quot;&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;el-dropdown-item&gt; &#123;&#123; $t(&#x27;msg.navBar.home&#x27;) &#125;&#125; &lt;/el-dropdown-item&gt; &lt;/router-link&gt; &lt;a target=&quot;_blank&quot; href=&quot;&quot;&gt; &lt;el-dropdown-item&gt;&#123;&#123; $t(&#x27;msg.navBar.course&#x27;) &#125;&#125;&lt;/el-dropdown-item&gt; &lt;/a&gt; &lt;el-dropdown-item divided @click=&quot;logout&quot;&gt; &#123;&#123; $t(&#x27;msg.navBar.logout&#x27;) &#125;&#125; &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; components/LangSelect/index 123456&lt;el-tooltip :content=&quot;$t(&#x27;msg.navBar.lang&#x27;)&quot; :effect=&quot;effect&quot;&gt;const handleSetLanguage = lang =&gt; &#123; ... ElMessage.success(i18n.t(&#x27;msg.toast.switchLangSuccess&#x27;))&#125; sidebar 与 面包屑 区域的国际化处理sidebar 区域 目前对于 sidebar 而言，显示的文本是我们在定义路由表时的 title 1&lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt; 我们可以 把 title 作为语言包内容的 key 进行处理 创建 utils/i18n 工具模块，用于 将 title 转化为国际化内容 12345import i18n from &#x27;@/i18n&#x27;export function generateTitle(title) &#123; return i18n.global.t(&#x27;msg.route.&#x27; + title)&#125; 在 layout/components/Sidebar/MenuItem.vue 中导入该方法： 12345678910&lt;template&gt; ... &lt;span&gt;&#123;&#123; generateTitle(title) &#125;&#125;&lt;/span&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; generateTitle &#125; from &#x27;@/utils/i18n&#x27;...&lt;/script&gt; 最后修改下 sidebarHeader 的内容 123&lt;h1 class=&quot;logo-title&quot; v-if=&quot;$store.getters.sidebarOpened&quot;&gt; &#123;&#123; $t(&#x27;msg.logo&#x27;) &#125;&#125;&lt;/h1&gt; 面包屑区域： 在 components/Breadcrumb/index 123456789101112131415161718&lt;template&gt;... &lt;!-- 不可点击项 --&gt; &lt;span v-if=&quot;index === breadcrumbData.length - 1&quot; class=&quot;no-redirect&quot;&gt;&#123;&#123; generateTitle(item.meta.title) &#125;&#125;&lt;/span&gt; &lt;!-- 可点击项 --&gt; &lt;a v-else class=&quot;redirect&quot; @click.prevent=&quot;onLinkClick(item)&quot;&gt;&#123;&#123; generateTitle(item.meta.title) &#125;&#125;&lt;/a&gt;...&lt;/template&gt;&lt;script setup&gt;import &#123; generateTitle &#125; from &#x27;@/utils/i18n&#x27;...&lt;/script&gt; 国际化缓存处理我们希望在 刷新页面后，当前的国际化选择可以被保留，所以想要实现这个功能，那么就需要进行 国际化的缓存处理 此处的缓存，我们依然通过两个方面进行： vuex 缓存 LocalStorage 缓存 只不过这里的缓存，我们已经在处理 langSelect 组件时 处理完成了，所以此时我们只需要使用缓存下来的数据即可。 在 i18n/index 中，创建 getLanguage 方法： 1234567import store from &#x27;@/store&#x27;/** * 返回当前 lang */function getLanguage() &#123; return store &amp;&amp; store.getters &amp;&amp; store.getters.language&#125; 修改 createI18n 的 locale 为 getLanguage() 1234const i18n = createI18n(&#123; ... locale: getLanguage()&#125;) 国际化方案总结国际化是前端项目中的一个非常常见的功能，那么在前端项目中实现国际化主要依靠的就是 vue-i18n 这个第三方的包。 关于国际化的实现原理大家可以参照 国际化实现原理 这一小节，这里我们就不再赘述了。 而 i18n 的使用，整体来说就分为这么四步： 创建 messages 数据源 创建 locale 语言变量 初始化 i18n 实例 注册 i18n 实例 核心的内容其实就是 数据源的部分，但是大家需要注意，如果你的项目中使用了 第三方组件库 ，那么不要忘记 第三方组件库的数据源 需要 单独 进行处理！ 动态换肤原理分析想要实现 动态换肤 的一个前置条件就是：色值不可以写死！ 首先我们先来说一下动态换肤的实现方式。 在 scss 中，我们可以通过 $变量名:变量值 的方式定义 css 变量 ，然后通过该 css 来去指定某一块 DOM 对应的颜色。 那么大家可以想一下，如果我此时改变了该 css 变量的值，那么对应的 DOM 颜色是不是也会同步发生变化。 当大量的 DOM 都依赖这个 css 变量 设置颜色时，我们是不是只需要改变这个 css 变量 ，那么所有 DOM 的颜色是不是都会发生变化，所谓的 动态换肤 是不是就可以实现了！ 这个就是 动态换肤 的实现原理! 实现换肤和主题大致有两种方案: 使用原生支持的 css var 通过一些手段覆盖 element plus 样式 我们先看来看看 css var 的实现吧。 css变量 https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root 变量 与 color、font-size 等正式属性没有什么不同，只是没有默认含义。 所以 CSS 变量（CSS variable）又叫做”CSS 自定义属性”（CSS custom properties）。因为变量与自定义的 CSS 属性其实是一回事。 变量可以分为 全局变量 局部变量 全局变量通过 :root 去定义，其他所有的元素都可以通过 var(--xxx) 的形式去使用全局变量，我们来看下面这个例子: var()函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值。 123456789101112&lt;style&gt; :root &#123; --color: skyblue; &#125; .use-global &#123; color: var(--color) &#125;&lt;/style&gt;// body&lt;div class=&quot;use-global&quot;&gt;使用了全局变量&lt;/div&gt; :root :root 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，:root 表示 元素，除了优先级更高之外，与 html 选择器相同。 自定义属性 (–*)：CSS 变量 带有前缀–的属性名，比如–example–name，表示的是带有值的自定义属性，其可以通过 var 函数在全文档范围内复用的。 局部变量 我们可以在某个选择器下去定义变量，或者在元素的 style 属性上定义变量： 1234567891011121314151617// style:root &#123; --color: skyblue;&#125;.parent &#123; --color: pink; // 优先级更高&#125;h3 &#123; color: var(--color)&#125;// html&lt;div class=&quot;parent&quot;&gt; &lt;h3&gt;child title&lt;/h3&gt;&lt;/div&gt; 这里 h3 标签会显示红色。虽然我们在 :root 上也定义了 --color 变量，但是根据就近原则，h3 会取父级定义的变量。 我们还可以在 style 属性上定义变量，这里我们定义了一个 --bg 变量，其子元素可以访问到这个变量。 123456789101112.parent &#123; --color: pink;&#125;h3 &#123; color: var(--color); background-color: var(--bg);&#125;&lt;div class=&quot;parent&quot; style=&quot;--bg: black;&quot;&gt; &lt;h3&gt;child title&lt;/h3&gt;&lt;/div&gt; 修改 css 变量这里定义了两个按钮，一个修改全局的（根组件）的变量，一个用来修改特定元素上的定义的变量： 12&lt;button class=&quot;btn&quot;&gt;change root&lt;/button&gt;&lt;button class=&quot;variable&quot;&gt;change local variable&lt;/button&gt; 修改全局变量 1234567const btn = document.querySelector(&#x27;.btn&#x27;)btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; const html = document.documentElement html.style.setProperty(&#x27;--color&#x27;, &#x27;red&#x27;)&#125;) 修改局部变量 1234567const variableBtn = document.querySelector(&#x27;.variable&#x27;)variableBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; const parent = document.querySelector(&#x27;.parent&#x27;) parent.style.setProperty(&#x27;--color&#x27;, &#x27;green&#x27;)&#125;) 暗黑模式原理分析 prefers-color-scheme prefers-color-scheme CSS 媒体特性: 用于检测用户是否有将系统的主题色设置为亮色或者暗色。 主题色实现原理通过 媒体查询 去监听系统主题色的变化。 12345678910111213141516171819202122232425// style@media (prefers-color-scheme: dark) &#123; .day.dark-scheme &#123; background: #333; color: white; &#125; .night.dark-scheme &#123; background: black; color: red; &#125;&#125;@media (prefers-color-scheme: light) &#123; .day.light-scheme &#123; background: skyblue; color: #333; &#125; .night.light-scheme &#123; background: pink; color: #333; &#125;&#125;.day, .night &#123; display: inline-block; padding: 1em; width: 7em; height: 7em; vertical-align: middle;&#125;// html&lt;div class=&quot;day light-scheme&quot;&gt;Day (changes in light scheme)&lt;/div&gt;&lt;div class=&quot;day dark-scheme&quot;&gt;Day (changes in dark scheme)&lt;/div&gt; &lt;br&gt;&lt;div class=&quot;night light-scheme&quot;&gt;Night (changes in light scheme)&lt;/div&gt;&lt;div class=&quot;night dark-scheme&quot;&gt;Night (changes in dark scheme)&lt;/div&gt; 现在，我们可以去切换系统的主题色，就会发现页面上的颜色跟着变化了，这是因为我们通过 @media 监听 prefers-color-scheme 起作用了。 window.matchMedia虽然我们通过 css @media 能够应对系统的主题色切换，但是我们如何在 js 中去监听呢？ 答案是通过 window.matchMedia 方法： 1234567891011// 如果匹配成功，scheme.matches === true// 也就是说，如果我们的系统是暗黑色，那么这个 matches 就是true，否则是 falseconst scheme = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;)scheme.addEventListener(&#x27;change&#x27;, e =&gt; &#123; if (e.matches) &#123; // 暗黑色 &#125; else &#123; // 亮色 &#125;&#125;) 修改主题色到此，我们知道了主题色的实现原理，我们如何在项目里去实现主题色的切换呢？ 我们来看一个小例子 首先，我们先定义好 全局变量，里面包含了一些 亮色模式 下的变量： 12345678910:root &#123; --color: #333; --background-color: pink;&#125;&lt;h1 style=&quot;background-color: var(--background-color); color: var(--color)&quot;&gt; 我是一个标题。！！！&lt;/h1&gt;&lt;button class=&quot;dark-btn&quot;&gt;dark mode&lt;/button&gt; 在页面初始时，我们的背景色是粉色，颜色是浅黑色。 现在我们创建一个按钮，来修改主题颜色，这个之前实现过了很简单对吧。 1234567const darkBtn = document.querySelector(&#x27;.dark-btn&#x27;)darkBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 修改变量 document.documentElement.style.setProperty(&#x27;--color&#x27;, &#x27;#fff&#x27;) document.documentElement.style.setProperty(&#x27;--background-color&#x27;, &#x27;#000&#x27;)&#125;) 好无疑问这样是可以实现的，但是，如果变量多起来了，几十上百个，我们也要一个个去修改吗？ 既然我们的变量都定义在根元素上，那么我们可以采取 属性覆盖 的形式。 我们定义一个 [data-theme=&quot;dark&quot;] 样式表，专门用来处理 暗黑模式 下的变量，这里是黑色背景白色字体。 1234[data-theme=&quot;dark&quot;] &#123; --color: #fff; --background-color: #000;&#125; 或者属性选择器： 1234567891011/* 浅色模式 */html[data-theme=&quot;light&quot;]:root &#123; --body-background: #efefef; --text-color: #333;&#125;/* 深色模式 */html[data-theme=&quot;dark&quot;]:root &#123; --body-background: #000; --text-color: #ededed;&#125; 一开始，这个样式表并不会生效，因为根标签上根本没有 data-theme=&quot;dark&quot; 属性，我们通过按钮来修改： 123darkBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; document.documentElement.setAttribute(&#x27;data-theme&#x27;, &#x27;dark&#x27;)&#125;) 我们给根标签设置了 data-theme=&quot;dark&quot; 属性，同时内部定了暗黑相关的变量，这时，data-theme=&quot;dark&quot; 内部的变量就会覆盖 :root 中的变量了，从而达到切换主题色的效果。 同时，我们需要根据系统的主题色，来设置项目的主题色，这里就要用到 window.matchMedia 方法了。 如果在 Vue 项目中，我们可以这样去实现: 1234567891011121314151617181920212223242526272829303132const theme = computed(() =&gt; store.state.settings.theme);// 查看当前是否是 暗黑模式const mediaQueryListDark = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;);const changeTheme = (theme) =&gt; &#123; // 批量覆盖全局的变量 document.documentElement.setAttribute(&#x27;data-theme&#x27;, theme);&#125;;const handleColorSchemeChange = evt =&gt; &#123; if (evt.matches) &#123; changeTheme(&#x27;dark&#x27;); &#125; else &#123; changeTheme(&#x27;light&#x27;); &#125;&#125;;watchEffect(() =&gt; &#123; if (theme.value === &#x27;Follow System&#x27;) &#123; // 初始值：跟随系统设置 handleColorSchemeChange(mediaQueryListDark); // 监听系统主题的变化 mediaQueryListDark.addEventListener(&#x27;change&#x27;, handleColorSchemeChange); &#125; else if (theme.value) &#123; changeTheme(theme.value.toLowerCase()); // 如果不是跟随系统设置主题了，用户自己设置的主题色，我们就不需要监听系统的主题色切换了 mediaQueryListDark.removeEventListener(&#x27;change&#x27;, handleColorSchemeChange); &#125;&#125;); 总结到这里，我们花了大量的时间和实例对换肤和主题的原理进行了研究，那么接下来就要进入正式的项目开发环节了。 官方换肤方案 官方样式路径：/node_modules/element-plus/theme-chalk/src/common/var.scss 定义自己的 scss 文件，然后在 main.ts 导入。 123456789101112131415161718192021222324252627$--colors: ( &quot;primary&quot;: ( &quot;base&quot;: pink, ), &quot;success&quot;: ( &quot;base&quot;: blue, ), &quot;warning&quot;: ( &quot;base&quot;: #f2711c, ), &quot;danger&quot;: ( &quot;base&quot;: #db2828, ), &quot;error&quot;: ( &quot;base&quot;: #db2828, ), &quot;info&quot;: ( &quot;base&quot;: #42b8dd, ),);@forward &#x27;element-plus/theme-chalk/src/common/var.scss&#x27; with ( $colors: $--colors,);/* 导入所有的样式变量 */@use &quot;element-plus/theme-chalk/src/index.scss&quot; as *; 修改 main.ts 123456// 注释原导入的 element-plus 样式// import &#x27;element-plus/dist/index.css&#x27;// 导入我们自己的定义的样式import &#x27;@/styles/cover-element-plus.scss&#x27; 通过 CSS 变量设置如果不通过上面那种方案，我们还可以定义全局的变量，来覆盖官方的样式。 在自己的样式文件中写入需要覆盖的样式变量： 123:root &#123; --el-color-primary: green;&#125; 如果你只想自定义一个特定的组件，只需为某些组件单独添加内联样式。 1&lt;el-tag style=&quot;--el-tag-bg-color: red&quot;&gt;Tag&lt;/el-tag&gt; 出于性能原因，更加推荐你在类名下添加自定义 css 变量，而不是在全局的 :root 下。 123.custom-class &#123; --el-tag-bg-color: red;&#125; 如果您想要通过 js 控制 css 变量，可以这样做： 123456789// document.documentElement 是全局变量时const el = document.documentElement// const el = document.getElementById(&#x27;xxx&#x27;)// 获取 css 变量getComputedStyle(el).getPropertyValue(`--el-color-primary`)// 设置 css 变量el.style.setProperty(&#x27;--el-color-primary&#x27;, &#x27;red&#x27;) 总结。相当于我们重新定义了变量，覆盖了官方自己定义的变量，如果我们项目只需要一种颜色，那么这种方案是可行的，但是我们项目需要支持用户选择主题来替换，那么这种方案就不适用了。 那么我来用另一种方案来实现吧。 换肤方案落地在我们的项目中想要实现动态换肤，需要同时处理两个方面的内容： element-plus 主题 非 element-plus 主题 明确好了原理之后，接下来我们就来理一下咱们的实现思路。 从原理中我们可以得到以下两个关键信息： 动态换肤的关键是修改 css 变量 的值 换肤需要同时兼顾 element-plus 非 element-plus 那么根据以上关键信息，我们就可以得出对应的实现方案: 创建一个组件 ThemeSelect 用来处理修改之后的 css 变量 的值 根据新值修改 element-plus 主题色 根据新值修改非 element-plus 主题色 创建 ThemeSelect 组件ThemeSelect 组件将由两部分组成： navbar 中的展示图标 选择颜色的弹出层 这是效果图： 创建 components/ThemeSelect/index 组件 123456789101112131415161718192021222324252627282930313233&lt;template&gt; &lt;!-- 主题图标 v-bind：https://v3.cn.vuejs.org/api/instance-properties.html#attrs --&gt; &lt;el-dropdown v-bind=&quot;$attrs&quot; trigger=&quot;click&quot; class=&quot;theme&quot; @command=&quot;handleSetTheme&quot; &gt; &lt;div&gt; &lt;el-tooltip :content=&quot;$t(&#x27;msg.navBar.themeChange&#x27;)&quot;&gt; &lt;svg-icon icon=&quot;change-theme&quot; /&gt; &lt;/el-tooltip&gt; &lt;/div&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu&gt; &lt;el-dropdown-item command=&quot;color&quot;&gt; &#123;&#123; $t(&#x27;msg.theme.themeColorChange&#x27;) &#125;&#125; &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;!-- 展示弹出层 --&gt; &lt;div&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const handleSetTheme = command =&gt; &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt; 在 layout/components/navbar 中进行引用 1234567&lt;div class=&quot;right-menu&quot;&gt; &lt;theme-picker class=&quot;right-menu-item hover-effect&quot;&gt;&lt;/theme-picker&gt;&lt;/div&gt;... import ThemePicker from &#x27;@/components/ThemeSelect/index&#x27; 创建 SelectColor 组件 在有了 ThemeSelect 之后，接下来我们来去处理颜色选择的组件 SelectColor，在这里我们会用到 element 中的 el-color-picker 组件 对于 SelectColor 的处理，我们需要分成两步进行： 完成 SelectColor 弹窗展示的双向数据绑定 把选中的色值进行本地缓存 那么下面咱们先来看第一步：完成 SelectColor 弹窗展示的双向数据绑定 创建 components/ThemePicker/components/SelectColor.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;template&gt; &lt;el-dialog title=&quot;提示&quot; :model-value=&quot;modelValue&quot; @close=&quot;closed&quot; width=&quot;22%&quot;&gt; &lt;div class=&quot;center&quot;&gt; &lt;p class=&quot;title&quot;&gt;&#123;&#123; $t(&#x27;msg.theme.themeColorChange&#x27;) &#125;&#125;&lt;/p&gt; &lt;el-color-picker v-model=&quot;mColor&quot; :predefine=&quot;predefineColors&quot; &gt;&lt;/el-color-picker&gt; &lt;/div&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;closed&quot;&gt;&#123;&#123; $t(&#x27;msg.universal.cancel&#x27;) &#125;&#125;&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;comfirm&quot;&gt;&#123;&#123; $t(&#x27;msg.universal.confirm&#x27;) &#125;&#125;&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps, defineEmits, ref &#125; from &#x27;vue&#x27;defineProps(&#123; modelValue: &#123; type: Boolean, required: true &#125;&#125;)const emits = defineEmits([&#x27;update:modelValue&#x27;])// 预定义色值const predefineColors = [ &#x27;#ff4500&#x27;, &#x27;#ff8c00&#x27;, &#x27;#ffd700&#x27;, &#x27;#90ee90&#x27;, &#x27;#00ced1&#x27;, &#x27;#1e90ff&#x27;, &#x27;#c71585&#x27;, &#x27;rgba(255, 69, 0, 0.68)&#x27;, &#x27;rgb(255, 120, 0)&#x27;, &#x27;hsv(51, 100, 98)&#x27;, &#x27;hsva(120, 40, 94, 0.5)&#x27;, &#x27;hsl(181, 100%, 37%)&#x27;, &#x27;hsla(209, 100%, 56%, 0.73)&#x27;, &#x27;#c7158577&#x27;]// 默认色值const mColor = ref(&#x27;#00ff00&#x27;)/** * 关闭 */const closed = () =&gt; &#123; emits(&#x27;update:modelValue&#x27;, false)&#125;/** * 确定 * 1. 修改主题色 * 2. 保存最新的主题色 * 3. 关闭 dialog */const comfirm = async () =&gt; &#123; closed()&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.center &#123; text-align: center; .title &#123; margin-bottom: 12px; &#125;&#125;&lt;/style&gt; 在 ThemePicker/index 中使用该组件 123456789101112131415161718&lt;template&gt; ... &lt;!-- 展示弹出层 --&gt; &lt;div&gt; &lt;select-color v-model=&quot;selectColorVisible&quot;&gt;&lt;/select-color&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import SelectColor from &#x27;./components/SelectColor.vue&#x27;import &#123; ref &#125; from &#x27;vue&#x27;const selectColorVisible = ref(false)const handleSetTheme = command =&gt; &#123; selectColorVisible.value = true&#125;&lt;/script&gt; 完成双向数据绑定之后，我们来处理第二步：把选中的色值进行本地缓存 缓存的方式分为两种： vuex 本地存储 在 constants/index 下新建常量值 1234// 主题色保存的 keyexport const MAIN_COLOR = &#x27;mainColor&#x27;// 默认色值export const DEFAULT_COLOR = &#x27;#409eff&#x27; 创建 store/modules/theme 模块，用来处理 主题色 相关内容 1234567891011121314151617import &#123; getItem, setItem &#125; from &#x27;@/utils/storage&#x27;import &#123; MAIN_COLOR, DEFAULT_COLOR &#125; from &#x27;@/constant&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; mainColor: getItem(MAIN_COLOR) || DEFAULT_COLOR &#125;), mutations: &#123; /** * 设置主题色 */ setMainColor(state, newColor) &#123; state.mainColor = newColor setItem(MAIN_COLOR, newColor) &#125; &#125;&#125; 在 store/getters 下指定快捷访问 1mainColor: state =&gt; state.theme.mainColor 在 store/index 中导入 theme 12345678910...import theme from &#x27;./modules/theme.js&#x27;export default createStore(&#123; getters, modules: &#123; ... theme &#125;&#125;) 在 selectColor 中，设置初始色值 和 缓存色值 12345678910111213141516171819202122232425262728...&lt;script setup&gt;import &#123; defineProps, defineEmits, ref &#125; from &#x27;vue&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;...const store = useStore()// 默认色值const mColor = ref(store.getters.mainColor).../** * 确定按钮 * * 1. 修改主题色 * 2. 保存最新的主题色 * 3. 关闭 dialog * */const comfirm = async () =&gt; &#123; // 2. 保存最新的主题色 store.commit(&#x27;theme/setMainColor&#x27;, mColor.value) // 3. 关闭 dialog closed()&#125;&lt;/script&gt; scss mix方法123456789// 给当前的颜色值，添加上 50% 的白色.white &#123; color: mix(white, $color, 50%);&#125;// 给当前的颜色值，添加上 50% 的黑色.black &#123; color: mix(black, $color, 50%);&#125; 处理 element-plus 主题色变更原理与步骤分析对于 element-plus 的主题变更，相对比较复杂，所以说整个过程我们会分为三部分： 实现原理 实现步骤 实现过程 实现原理： 在之前我们分析主题变更的实现原理时，我们说过，核心的原理是：*通过修改 scss 变量 * 的形式修改主题色完成主题变更 但是对于 element-plus 而言，我们怎么去修改这样的主题色呢？ 其实整体的原理非常简单，分为三步： 获取当前 element-plus 的所有样式 找到我们想要替换的样式部分，通过正则完成替换 把替换后的样式写入到 style 标签中，利用样式优先级的特性，替代固有样式 实现步骤： 那么明确了原理之后，我们的实现步骤也就呼之欲出了，对应原理总体可分为四步： 获取当前 element-plus 的所有样式 定义我们要替换之后的样式 在原样式中，利用正则替换新样式 把替换后的样式写入到 style 标签中 创建 utils/theme 工具类，写入两个方法 123456789101112131415/** * 写入新样式到 style * @param &#123;*&#125; elNewStyle element-plus 的新样式 * @param &#123;*&#125; isNewStyleTag 是否生成新的 style 标签 */export const writeNewStyle = elNewStyle =&gt; &#123; &#125;/** * 根据主色值，生成最新的样式表 */export const generateNewStyle = primaryColor =&gt; &#123; &#125; 那么接下来我们先实现第一个方法 generateNewStyle，在实现的过程中，我们需要安装两个工具类： rgb-hex：转换RGB(A)颜色为十六进制 css-color-function：在 CSS 中 Tab Atkins 提出的颜色函数的解析器和转换器。 示例 1234567891011121314151617181920212223import rgbHex from &#x27;rgb-hex&#x27;rgbHex(65, 131, 196);//=&gt; &#x27;4183c4&#x27;rgbHex(&#x27;rgb(40, 42, 54)&#x27;);//=&gt; &#x27;282a36&#x27;rgbHex(65, 131, 196, 0.2);//=&gt; &#x27;4183c433&#x27;rgbHex(40, 42, 54, &#x27;75%&#x27;);//=&gt; &#x27;282a36bf&#x27;rgbHex(&#x27;rgba(40, 42, 54, 75%)&#x27;);//=&gt; &#x27;282a36bf&#x27;------------------------------------------------import color from &#x27;css-color-function&#x27; color.convert(&#x27;color(red tint(50%))&#x27;);// &quot;rgb(255, 128, 128)&quot; 然后还需要写入一个 颜色转化计算器 formula.json，这里主要是以 primary 色值为例 创建 constants/formula.json 12345678910111213141516&#123; &quot;shade-1&quot;: &quot;color(primary shade(10%))&quot;, &quot;light-1&quot;: &quot;color(primary tint(10%))&quot;, &quot;light-2&quot;: &quot;color(primary tint(20%))&quot;, &quot;light-3&quot;: &quot;color(primary tint(30%))&quot;, &quot;light-4&quot;: &quot;color(primary tint(40%))&quot;, &quot;light-5&quot;: &quot;color(primary tint(50%))&quot;, &quot;light-6&quot;: &quot;color(primary tint(60%))&quot;, &quot;light-7&quot;: &quot;color(primary tint(70%))&quot;, &quot;light-8&quot;: &quot;color(primary tint(80%))&quot;, &quot;light-9&quot;: &quot;color(primary tint(90%))&quot;, &quot;subMenuHover&quot;: &quot;color(primary tint(70%))&quot;, &quot;subMenuBg&quot;: &quot;color(primary tint(80%))&quot;, &quot;menuHover&quot;: &quot;color(primary tint(90%))&quot;, &quot;menuBg&quot;: &quot;color(primary)&quot;&#125; 我们来看下 element plus 定义的 primary 变量，light-i 表示颜色的深浅。 如果我们想要定义其它颜色，比如--el-color-success，已同样的方法，添加到 formula.json 中即可。 同时我们还定义了自己变量在 formula 颜色转换器中，因为我们的 菜单 部分，也是需要跟着主题色变化的。 shade tint 方法其实就是利用了 scss 的 mix 方法，css-color-function 库内部调用进行解析，对某个颜色加深或者淡化！！ 123456789101112131415161718// scss// 给当前的颜色值，添加上 50% 的白色.white &#123; color: mix(white, $color, 50%);&#125;// 给当前的颜色值，添加上 50% 的黑色.black &#123; color: mix(black, $color, 50%);&#125;@function tint($color, $parcent) &#123; @return mix(white, $color, $parcent)&#125;@function shade($color, $parcent) &#123; @return mix(black, $color, $parcent)&#125; 准备就绪后，我们来实现 generateNewStyle 方法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// https://www.npmjs.com/package/css-color-functionimport color from &#x27;css-color-function&#x27;// https://www.npmjs.com/package/rgb-heximport rgbHex from &#x27;rgb-hex&#x27;import axios from &#x27;axios&#x27;import formula from &#x27;@/constants/formula.json&#x27;/** * 写入新样式到 style * @param &#123;*&#125; cssText element-plus 的新样式 * @param &#123;*&#125; isNewStyleTag 是否生成新的 style 标签 */export const writeNewStyle = (cssText: string) =&gt; &#123; const style = document.createElement(&#x27;style&#x27;) style.innerText = cssText document.head.appendChild(style)&#125;/** * 根据主色值，生成最新的样式表 */type TObject = &#123; [key: string]: string &#125;export const generateNewStyle = async (primaryColor: string) =&gt; &#123; // colors ===&gt; &#123; primary: &#x27;rgba(8, 12, 132, 0.68)&#x27;, shade-1: &#x27;#070b77ad&#x27;, light-1: &#x27;#212490ad&#x27;, ...... &#125; const colors: TObject = generateColors(primaryColor) as TObject // 拿到整个 element plus 样式表，并对需要修改的变量打上了标记 let cssText = await getOriginalStyle() // 遍历生成的样式表，在 CSS 的原样式中进行全局替换 Object.keys(colors).forEach(key =&gt; &#123; // reg pattern // /(:|\\s+)primary/g // /(:|\\s+)shade-1/g // /(:|\\s+)menuBg/g // ... // 这个模式中的 (:|\\\\s+) 表示一个冒号或一个或多个空白字符（包括空格、制表符和换行符）。 // \\\\s+ 的第一个 \\ 是转义字符 // key 是一个变量，代表一个需要匹配的字符串，比如匹配 `primary` // &#x27;$1&#x27; + colors[key] // 关于为什么要在色值前面加上 $1，我们需要查看 replace 方法的第二个参数。 // 在这里，第二个参数是一个字符串，字符串中的 $1 会被替换成第一个括号捕获组（即 (:|\\\\s+)）匹配到的文本。 // 所以加上 $1 就是为了在【替换的文本】中【保留原本匹配到的文本】。 cssText = cssText.replace( new RegExp(&#x27;(:|\\\\s+)&#x27; + key, &#x27;g&#x27;), &#x27;$1&#x27; + colors[key] ) &#125;) // 最终，新的样式表中，含有我们自定义的颜色主题 return cssText&#125;/** * 根据主色生成色值表 */type TFormulaKey = keyof typeof formulaexport const generateColors = (primary: string) =&gt; &#123; if (!primary) return const colors: &#123; [key: string]: string &#125; = &#123; primary &#125; ;(Object.keys(formula) as Array&lt;TFormulaKey&gt;).forEach( &lt;K extends TFormulaKey&gt;(key: K) =&gt; &#123; // 将所有的主色，替换成我们选中的主题色，形式如 &gt;&gt;&gt; color(rgba(255, 69, 0, 1) shade(10%)) const value = formula[key].replace(/primary/g, primary) // 通过 color 的 conver 方法，计算出 rgba 色值 // color.convert(value) ===&gt;&gt;&gt; rgba(0, 12, 230, 0.68) // 最终将转为每个颜色，转为十六进制：#030420ad，写入到 colors 对象中，并返回 colors[key] = &#x27;#&#x27; + rgbHex(color.convert(value)) &#125; ) return colors&#125;/** * 获取当前 element-plus 的默认样式表 */const getOriginalStyle = async () =&gt; &#123; const version = require(&#x27;element-plus/package.json&#x27;).version const url = `https://unpkg.com/element-plus@$&#123;version&#125;/dist/index.css` const &#123; data &#125; = await axios(url) // 把获取到的数据筛选为原样式模板 return getStyleTemplate(data)&#125;/** * 返回 style 的 template */const getStyleTemplate = (data: string) =&gt; &#123; // element-plus 默认色值 const colorMap: &#123; [key: string]: string &#125; = &#123; &#x27;#3a8ee6&#x27;: &#x27;shade-1&#x27;, &#x27;#409eff&#x27;: &#x27;primary&#x27;, // element-plus 中含有变量 `--el-color-primary: #409eff` &#x27;#53a8ff&#x27;: &#x27;light-1&#x27;, &#x27;#66b1ff&#x27;: &#x27;light-2&#x27;, &#x27;#79bbff&#x27;: &#x27;light-3&#x27;, &#x27;#8cc5ff&#x27;: &#x27;light-4&#x27;, &#x27;#a0cfff&#x27;: &#x27;light-5&#x27;, &#x27;#b3d8ff&#x27;: &#x27;light-6&#x27;, &#x27;#c6e2ff&#x27;: &#x27;light-7&#x27;, &#x27;#d9ecff&#x27;: &#x27;light-8&#x27;, &#x27;#ecf5ff&#x27;: &#x27;light-9&#x27; &#125; // 根据默认色值为要替换的色值打上标记 Object.keys(colorMap).forEach(key =&gt; &#123; const value = colorMap[key] data = data.replace(new RegExp(key, &#x27;ig&#x27;), value) &#125;) // 替换完之后 // `--el-color-primary: #409eff` 就变成了 `--el-color-primary: primary` // --el-color-primary-light-3: #79bbff; 变成了 --el-color-primary-light-3: light-3 // ... // ... // `--el-color-primary-light-9: #ecf5ff` 变成了 `--el-color-primary-light-9: light-9` return data&#125; 我们来分析一下 theme.ts 中函数的执行流程 首先，外部调用 generateNewStyle 方法，传入 primaryColor，我们通过 el-color-picker 选中后的值，就是 primaryColor，它的色值长这样 rgba(8, 12, 132, 0.68)。 通过 generateColors 方法生成色值表 通过 css-color-function 处理我们的颜色转化计算器formula.json 1color(rgba(255, 69, 0, 1) shade(10%)) &gt;&gt;&gt; color.convert(value) &gt;&gt;&gt; rgba(0, 12, 230, 0.68) 使用 rgbHex 方法将 rgba 转化为十六进制格式 1rgbHex(color.convert(value)) ===&gt;&gt;&gt; &#x27;#030420ad&#x27; 返回处理过后的色值表 colors 1234567&#123; primary: &#x27;rgba(8, 12, 132, 0.68)&#x27;, // 保留了原始的rgba格式 shade-1: &#x27;#070b77ad&#x27;, light-1: &#x27;#212490ad&#x27;, light-2: &#x27;#393d9dad&#x27;, ......&#125; 通过 getOriginalStyle 方法，获取 element plus 样式表 拿到 element plus 样式数据后，通过 getStyleTemplate 方法，根据默认色值 colorMap 为要替换的色值打上标记 element-plus 中含有变量 --el-color-primary: #409eff，而我们定义的 colorMap 默认值 &#39;#409eff&#39;: &#39;primary&#39; 就是与 element plus 中的十六进制值是对应。 我们就是要将 element plus 中的 primary 十六进制值替换成我们的标记，primary、shade-*。因为我们已经处理过 formula.json 了，处理过后得到的是 &#123; primary: &#39;rgba(8, 12, 132, 0.68)&#39;, shade-1: &#39;#070b77ad&#39;, light-1: &#39;#212490ad&#39;, ...&#125; 这种形式，这里面的色值，就是我们需要应用到页面上的颜色。 替换完之后，element plus 中的颜色变量就被标记上了记号，表示将来需要替换成真正的色值。12`--el-color-primary: #409eff` 就变成了 `--el-color-primary: primary``--el-color-primary-light-9: #ecf5ff` 变成了 `--el-color-primary-light-9: light-9` 返回处理过后的 element plus 样式表 cssText 接着，我们通过正则以及第二步 generateColors 方法返回的 colors，将 cssText 中每个打了标记的变量值替换 1cssText = cssText.replace(new RegExp(&#x27;(:|\\\\s+)&#x27; + key, &#x27;g&#x27;), &#x27;$1&#x27; + colors[key]) 这个模式中的 (:|\\s+) 表示一个冒号或一个【或】多个空白字符(\\s+)（包括空格、制表符和换行符） \\s+ 的第一个 \\ 是转义字符 key 是一个变量，代表一个需要匹配的字符串，比如匹配 primary &#39;$1&#39; + colors[key]: replace 第二个参数是一个字符串，字符串中的 $1 会被替换成第一个括号捕获组（即 (:|\\s+)）匹配到的文本。所以加上 $1 就是为了在【替换的文本】中【保留原本匹配到的文本】。 最后返回 cssText，新的样式表中，含有我们自定义的颜色主题 最后，通过 writeNewStyle 将新的样式表 cssText 插入到文档中。 123const style = document.createElement(&#x27;style&#x27;)style.innerText = cssTextdocument.head.appendChild(style) 总结 到这里，我们对 element plus 的主题换肤就完成了。 原理就是：拿到用户选中的颜色值(rgba)，通过 formula 颜色转换器转换成十六进制表 colors，然后拿到 element plus 的样式表，将其中需要修改的变量打上标记并返回含有标记的新样式表 cssText，最后，遍历 colors，通过正则将所有标记替换成 colors 中的值。完成样式的替换。 element-plus 新主题的立即生效到目前我们已经完成了 element-plus 的主题变更，但是当前的主题变更还有一个小问题，那就是：在刷新页面后，新主题会失效 那么出现这个问题的原因，非常简单：因为没有写入新的 style 所以我们只需要在 应用加载后，写入 style 即可 那么写入的时机，我们可以放入到 app.vue 中 123456789&lt;script setup&gt;import &#123; useStore &#125; from &#x27;vuex&#x27;import &#123; generateNewStyle, writeNewStyle &#125; from &#x27;@/utils/theme&#x27;const store = useStore()generateNewStyle(store.getters.mainColor).then(newStyleText =&gt; &#123; writeNewStyle(newStyleText)&#125;)&lt;/script&gt; 自定义主题变更自定义主题变更相对来说比较简单，因为 自己的代码更加可控。 目前在我们的代码中，需要进行 自定义主题变更 为 menu 菜单背景色 而目前指定 menu 菜单背景色的位置在 layout/components/sidebar/SidebarMenu.vue 中 123456789&lt;el-menu :default-active=&quot;activeMenu&quot; :collapse=&quot;!$store.getters.sidebarOpened&quot; :background-color=&quot;$store.getters.cssVar.menuBg&quot; :text-color=&quot;$store.getters.cssVar.menuText&quot; :active-text-color=&quot;$store.getters.cssVar.menuActiveText&quot; :unique-opened=&quot;true&quot; router&gt; 此处的 背景色是通过 getters 进行指定的，该 cssVar 的 getters 为： 1cssVar: state =&gt; variables, 所以，我们想要修改 自定义主题 ，只需要从这里入手即可。 根据当前保存的 mainColor 覆盖原有的默认色值 1234567891011121314151617import variables from &#x27;@/styles/variables.scss&#x27;import &#123; MAIN_COLOR &#125; from &#x27;@/constant&#x27;import &#123; getItem &#125; from &#x27;@/utils/storage&#x27;import &#123; generateColors &#125; from &#x27;@/utils/theme&#x27;const getters = &#123; ... cssVar: state =&gt; &#123; return &#123; ...variables, ...generateColors(getItem(MAIN_COLOR)) &#125; &#125;, ...&#125;export default getters 但是我们这样设定之后，整个自定义主题变更，还存在两个问题： menuBg 背景颜色没有变化 这个问题是因为咱们的 sidebar 的背景色未被替换，所以我们可以在 layout/index 中设置 sidebar 的 backgroundColor 12345&lt;sidebar id=&quot;guide-sidebar&quot; class=&quot;sidebar-container&quot; :style=&quot;&#123; backgroundColor: $store.getters.cssVar.menuBg &#125;&quot;/&gt; 主题色替换之后，需要刷新页面才可响应 这个是因为 getters 中没有监听到 依赖值的响应变化，所以我们希望修改依赖值 在 store/modules/theme 中 1234567891011121314151617181920...import variables from &#x27;@/styles/variables.scss&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; ... variables &#125;), mutations: &#123; /** * 设置主题色 */ setMainColor(state, newColor) &#123; ... state.variables.menuBg = newColor ... &#125; &#125;&#125; 在 getters 中 1234567891011121314....const getters = &#123; ... cssVar: state =&gt; &#123; return &#123; ...state.theme.variables, ...generateColors(getItem(MAIN_COLOR)) &#125; &#125;, ...&#125;export default getters 那么到这里整个自定义主题我们就处理完成了。 对于 自定义主题而言，核心的原理其实就是 修改scss变量来进行实现主题色变化 明确好了原理之后，对后续实现的步骤就具体情况具体分析了。 对于 element-plus：因为 element-plus 是第三方的包，所以它 不是完全可控 的，那么对于这种最简单直白的方案，就是直接拿到它编译后的 css 进行色值替换，利用 style 内部样式表 优先级高于 外部样式表 的特性，来进行主题替换 对于自定义主题：因为自定义主题是 完全可控 的，所以我们实现起来就轻松很多，只需要修改对应的 scss变量即可 那么在之后大家遇到 自定义主题 的处理时，就可以按照这里所梳理的方案进行处理了。 结束语这一章我们花了大量的篇幅来介绍换肤的原理以及业务场景如何实现换肤，篇幅有点长，就不在此添加其他功能的描述了。 如下功能我们放到下一章节去实现： screenfull headerSearch tagView guide 参考链接 CSS变量教程","categories":[],"tags":[{"name":"工程化,Vue3,通用功能","slug":"工程化-Vue3-通用功能","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD/"}]},{"title":"Vue3项目实战(四)：Layout架构实现","slug":"vue3-project-layout","date":"2022-12-24T07:00:48.000Z","updated":"2023-05-12T10:49:20.016Z","comments":true,"path":"/post/vue3-project-layout.html","link":"","permalink":"http://yoursite.com/post/vue3-project-layout.html","excerpt":"layout架构实现，包括动态菜单栏、动态的面包屑等方案、侧边栏伸缩动画、退出的通用逻辑封装以及Vue3.2版本中的组件状态驱动的动态 CSS 值等等。","text":"实现 layout 布局首先，我们要改造 layout/index.vue，先定义好结构，然后写样式即可。 1234567891011121314&lt;div class=&quot;app-wrapper&quot;&gt; &lt;!-- 左侧 menu --&gt; &lt;siderbar class=&quot;sidebar-container&quot;&gt;&lt;/siderbar&gt; &lt;div class=&quot;main-container&quot;&gt; &lt;div class=&quot;fixed-header&quot;&gt; &lt;!-- 顶部 --&gt; &lt;nav-bar&gt;&lt;/nav-bar&gt; &lt;/div&gt; &lt;!-- 主要内容 --&gt; &lt;app-main&gt;&lt;/app-main&gt; &lt;/div&gt;&lt;/div&gt; 结构定义好了，我再定义样式以及样式文件。在 src 下创建 styles 文件夹，主要存放 scss 的一些样式文件，其中就包括通用的 reset.scss 文件，处理基础的 html 元素样式。mixin.scss 编写通用的样式表，定义通用的样式变量 variables.scss。 123456// styles/index.scss@import &#x27;./reset.scss&#x27;;@import &#x27;./variables.scss&#x27;;@import &#x27;./mixin.scss&#x27;;@import &#x27;./sidebar.scss&#x27;; scss 的使用技巧这里我们主要看下 mixin.scss 和 variables.scss 的一些技巧和用法： mixin.scss 1234567891011121314151617181920212223242526272829303132/* 清除浮动，在 .vue 文件中使用的时候直接引用即可：@include clearfix; */@mixin clearfix &#123; &amp;:after &#123; content: &#x27;&#x27;; display: table; clear: both; &#125;&#125;/* 滚动条的设置 */@mixin scrollBar &#123; &amp;::-webkit-scrollbar-track-piece &#123; background: #d3dce6; &#125; &amp;::-webkit-scrollbar &#123; width: 6px; &#125; &amp;::-webkit-scrollbar-thumb &#123; background: #99a9bf; border-radius: 20px; &#125;&#125;@mixin relative &#123; position: relative; width: 100%; height: 100%;&#125; variables.scss 12345678910111213141516171819202122232425262728// sidebar$menuText: #bfcbd9;$menuActiveText: #ffffff;$subMenuActiveText: #f4f4f5;$menuBg: #304156;$menuHover: #263445;$subMenuBg: #1f2d3d;$subMenuHover: #001528;$sideBarWidth: 210px;$hideSideBarWidth: 54px;$sideBarDuration: 0.28s;// https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass// JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入:export &#123; menuText: $menuText; menuActiveText: $menuActiveText; subMenuActiveText: $subMenuActiveText; menuBg: $menuBg; menuHover: $menuHover; subMenuBg: $subMenuBg; subMenuHover: $subMenuHover; sideBarWidth: $sideBarWidth;&#125; 关于 :export 的使用方式，我们可以查阅一些文档： https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass 编写 layout/index.vue 样式12345678910111213141516171819&lt;style lang=&quot;scss&quot; scoped&gt;@import &#x27;~@/styles/mixin.scss&#x27;;@import &#x27;~@/styles/variables.scss&#x27;;.app-wrapper &#123; @include clearfix; // 使用 mixin 中的样式 position: relative; height: 100%; width: 100%;&#125;.fixed-header &#123; position: fixed; top: 0; right: 0; z-index: 9; width: calc(100% - #&#123;$sideBarWidth&#125;);&#125;&lt;/style&gt; 给 SideBar 赋予动态的背景色1234567891011121314&lt;template&gt;... &lt;!-- 左侧 menu --&gt; &lt;sidebar class=&quot;sidebar-container&quot; :style=&quot;&#123; backgroundColor: variables.menuBg &#125;&quot; /&gt;...&lt;/template&gt;&lt;script setup&gt;// scss 通过 :export 导出了变量import variables from &#x27;@/styles/variables.scss&#x27;&lt;/script&gt; script导入scss文件报错在 vue 项目里引用.scss文件，vscode编辑器会有红色波浪线，提示找不到模块 找到 shims-vue.d.ts 声明文件，添加如下代码: 1234567declare module &#x27;*.scss&#x27; &#123; const css: &#123; // 定义的变量，通过 `variables.menuBg` 取值时，就不会报错了 menuBg: string; &#125; export default css&#125; 将来，新增了新的样式变量，我们在 css 下添加即可。 设置NavBar样式和头像布局1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; &lt;div class=&quot;right-menu&quot;&gt; &lt;el-dropdown class=&quot;avatar-container&quot; trigger=&quot;click&quot;&gt; &lt;div class=&quot;avatar-wrapper&quot;&gt; &lt;el-avatar shape=&quot;square&quot; :size=&quot;40&quot; :src=&quot;&#x27;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&#x27;&quot; &gt;&lt;/el-avatar&gt; &lt;el-icon&gt;&lt;Tools /&gt;&lt;/el-icon&gt; &lt;/div&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu class=&quot;user-dropdown&quot;&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;el-dropdown-item&gt; 主页 &lt;/el-dropdown-item&gt; &lt;/router-link&gt; &lt;a target=&quot;_blank&quot; href=&quot;&quot;&gt; &lt;el-dropdown-item&gt;Vue3&lt;/el-dropdown-item&gt; &lt;/a&gt; &lt;el-dropdown-item divided&gt; 退出 &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref, reactive &#125; from &#x27;vue&#x27;import &#123; Tools &#125; from &#x27;@element-plus/icons-vue&#x27;&lt;/script&gt;&lt;style scoped lang=&quot;scss&quot;&gt;.navbar &#123; height: 50px; overflow: hidden; position: relative; background: #fff; box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08); .right-menu &#123; display: flex; align-items: center; float: right; padding-right: 16px; ::v-deep .right-menu-item &#123; display: inline-block; padding: 0 18px 0 0; font-size: 24px; color: #5a5e66; vertical-align: text-bottom; &amp;.hover-effect &#123; cursor: pointer; transition: background 0.3s; &amp;:hover &#123; background: rgba(0, 0, 0, 0.025); &#125; &#125; &#125; ::v-deep .avatar-container &#123; cursor: pointer; .avatar-wrapper &#123; margin-top: 5px; position: relative; .el-avatar &#123; --el-avatar-background-color: none; margin-right: 12px; &#125; &#125; &#125; &#125;&#125;&lt;/style&gt; 效果图 获取用户信息到目前为止，头像是静态的，也没有实现登出的逻辑，现在来实现一下。 设置请求头我们不希望每次调接口时，都去设置 token，那么我们可以在 请求拦截器 中去设置: 123456789101112service.interceptors.request.use( config =&gt; &#123; if (store.getters.token) &#123; config.headers.Authorization = `Baerer $&#123;store.getters.token&#125;` &#125; return config &#125;, error =&gt; &#123; return Promise.reject(error) &#125;) 编写 userInfo 接口简单实现一下 /userinfo 接口，主要是模拟前后端联调的流程。 123456789101112131415161718192021222324const express = require(&#x27;express&#x27;);const app = express()app.get(&#x27;/userinfo&#x27;, (req, res) =&gt; &#123; // 存在 token，可以返回用户信息 if (req.headers[&#x27;authorization&#x27;]) &#123; res.json(&#123; code: 0, data: &#123; avatar: &#x27;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&#x27;, name: &#x27;Hello_AlexCc&#x27;, id: 1, role: &#x27;super_admin&#x27; &#125;, message: &#x27;获取用户信息成功&#x27;, success: true, &#125;) &#125;&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 调用 userInfo 接口时机我们的 userInfo 接口已经编写好了，那么我们在什么时候调用呢？ 很显然，我们需要在 permission.ts 中去调用，当用户登录才有 token，也就是说，我们可以在 token 存在时，并且 to.path 不等于 /login 的时候去调用用户信息接口。 12345678910if (store.getters.token) &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#x27;/&#x27;) &#125; else &#123; // 调用用户信息接口 await store.dispatch(&#x27;user/getUserInfo&#x27;) next() &#125;&#125; 我们获取用户信息接口的动作，放在了 module user 的 actions 中： 1234567891011121314// module/user.ts// statestate: () =&gt; (&#123; token: getItem(&#x27;token&#x27;) || &#x27;&#x27;, userinfo: &#123;&#125;&#125;),// actionsasync getUserInfo(context) &#123; const info = await getUserInfo() context.commit(&#x27;setUserInfo&#x27;, info) return info&#125;, 方便使用 userInfo，我们可以将其放到 getters 中： 1234const getters = &#123; token: (state) =&gt; state.user.token, userInfo: (state) =&gt; state.user.userinfo&#125; 最后，我们就能在 NavBar 使用获取到的用户信息了。 12345&lt;el-avatar shape=&quot;square&quot; :size=&quot;40&quot; :src=&quot;$store.getters.userInfo.avatar&quot;&gt;&lt;/el-avatar&gt; 避免重复调用 userInfo 接口 我们发现，每次切换路由时，都会触发路由的前置守卫，从而多次触发 getUserInfo 接口，我们把这个问题解决一下 在 store 中定义 hasUserInfo，用来判断是否已经有用户信息了，如果有用户信息，我们就不要再触发 getUserInfo 接口了 123456// getters.tshasUserInfo: (state) =&gt; &#123; // 如果用户信息存在，return true return JSON.stringify(state.user.userinfo) !== &#x27;&#123;&#125;&#x27;&#125; 修改 permission.ts 文件，只有 hasUserInfo 为 false 时，我们才调用用户信息接口 1234567891011if (store.getters.token) &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#x27;/&#x27;) &#125; else &#123; if (!store.getters.hasUserInfo) &#123; await store.dispatch(&#x27;user/getUserInfo&#x27;) &#125; next() &#125;&#125; 登出逻辑登出分为两种形式： 用户主动退出 用户被动登录（token 过去 | 账号被挤） 不管以何种形式退出，登出的逻辑都是相同的。 清理掉用户的缓存数据 清理掉权限相关的配置 返回到登录页 登出的逻辑，我们也可以写在 module user 中去处理。 主要执行 3 个步骤： 清空 store token 清除浏览器本地存储 跳转到 login 页 12345logout(context: any) &#123; context.commit(&#x27;setToken&#x27;, &#x27;&#x27;) removeAllItem() router.push(&#x27;/login&#x27;)&#125; 主动退出用户点击登录按钮，通过 store dispatch 触发 action 的 logout 即可。 被动退出被动退出大概分为两种： token 失效 账号被挤下去 那么这两种场景下，在前端对应的处理方案一共也分为两种，共分为 主动处理 、被动处理 两种 ： 主动处理：主要应对 token 失效 被动处理：同时应对 token 失效 与 单点登录（账号被挤） 用户被动退出解决方案之主动处理为了保证用户的信息安全，那么对于 token 而言就被制定了很多的安全策略，比如： 动态 token（可变 token） 刷新 token 时效 token… 我们这里采用 时效 token。 那么对应到我们代码中的实现方案为： 在用户登陆时，记录当前 登录时间 制定一个 失效时长 在接口调用时，根据 当前时间 对比 登录时间 ，看是否超过了 时效时长 如果未超过，则正常进行后续操作 如果超过，则进行 退出登录 操作 代码实现创建 utils/auth.js 文件，并写入以下代码： 123456789101112131415161718192021222324import &#123; TIME_STAMP, TOKEN_TIMEOUT_VALUE &#125; from &#x27;@/constant&#x27;import &#123; setItem, getItem &#125; from &#x27;@/utils/storage&#x27;/** * 获取时间戳 */export function getTimeStamp() &#123; return getItem(TIME_STAMP)&#125;/** * 设置时间戳 */export function setTimeStamp() &#123; setItem(TIME_STAMP, Date.now())&#125;/** * 是否超时 */export function isCheckTimeout() &#123; // 当前时间戳 var currentTime = Date.now() // 缓存时间戳 var timeStamp = getTimeStamp() return currentTime - timeStamp &gt; TOKEN_TIMEOUT_VALUE&#125; 在 constant 中声明对应常量： 1234// token 时间戳export const TIME_STAMP = &#x27;timeStamp&#x27;// 超时时长(毫秒) 两小时export const TOKEN_TIMEOUT_VALUE = 2 * 60 * 60 * 1000 在用户登录成功之后去设置时间，到 store/user.js 的 login 中： 1234567891011121314import &#123; setTimeStamp &#125; from &#x27;@/utils/auth&#x27;login(context, userInfo) &#123; ... return new Promise((resolve, reject) =&gt; &#123; ... .then(data =&gt; &#123; ... // 保存登录时间 setTimeStamp() resolve() &#125;) &#125;)&#125;, 在 utils/request 对应的请求拦截器中进行 主动介入 123456789101112import &#123; isCheckTimeout &#125; from &#x27;@/utils/auth&#x27;if (store.getters.token) &#123; if (isCheckTimeout()) &#123; // 登出操作 store.dispatch(&#x27;user/logout&#x27;) // 失败的话，会走到 interceptors.response 的 error 方法。 return Promise.reject(new Error(&#x27;token 失效&#x27;)) &#125; ...&#125; 那么至此我们就完成了 主动处理 对应的业务逻辑。 用户被动退出解决方案之被动处理背景： 首先我们需要先明确 被动处理 需要应对两种业务场景： token 过期 单点登录 然后我们一个一个来去看，首先是 token 过期 我们知道对于 token 而言，本身就是具备时效的，这个是在服务端生成 token 时就已经确定的。 而此时我们所谓的 token 过期指的就是： 服务端生成的 token 超过 服务端指定时效 的过程，就像我们前端项目指定 token 的失效性一样。 而对于 单点登录 而言，指的是： 当用户 A 登录之后，token 过期之前。 用户 A 的账号在其他的设备中进行了二次登录，导致第一次登录的 A 账号被 “顶下来” 的过程。 即：同一账户仅可以在一个设备中保持在线状态 那么明确好了对应的背景之后，接下来我们来看对应的业务处理场景： 从背景中我们知道，以上的两种情况，都是在 服务端进行判断的，而对于前端而言其实是 服务端通知前端的一个过程。 所以说对于其业务处理，将遵循以下逻辑： 服务端返回数据时，会通过特定的状态码通知前端 当前端接收到特定状态码时，表示遇到了特定状态：token 时效 或 单点登录 此时进行 退出登录 处理 这里只做了 token 的过期处理，如果需要到 单点登录 时，只需要增加一个状态码判断即可。 服务端超时间逻辑我们来简单实现一下后端的超时逻辑。 我们通过 app.use 添加了一个中间件，每一次前端触发了接口请求，都会先走这个中间件逻辑。 服务器启动时，我们把 now 和 current 设置当前时间戳，当有一个接口触发了，会将 current 设置新的时间戳。 1234567891011121314151617181920212223242526272829303132const express = require(&#x27;express&#x27;);const app = express()// token 超时 2hconst TOKEN_TIMEOUT_VALUE = 2 * 60 * 60 * 1000let now = Date.now()let current = Date.now()app.use(function(req, res, next) &#123; // 每次有接口调用，触发中间件，将 current 更新 current = Date.now() // 如果是登录逻辑，我们将 now 设置为 current，这样就不会触发超时逻辑 // 重新登录，继续走此判断，将 now 设置为 current if (req.path === &#x27;/login&#x27;) &#123; now = current &#125; // 每次中间件都会将 current 更新为当前时间戳，一旦时间戳的差值，大于了 2h，就会触发 超时逻辑 if (current - now &gt; TOKEN_TIMEOUT_VALUE) &#123; // 超时 res.status(401).send(&#123; code: 401, message: &#x27;服务端message: token 失效啦&#x27;, success: false, &#125;) &#125; else &#123; // 没有超时，将执行权交给下一个路由 next() &#125;&#125;) 那么明确好了业务之后，接下来我们来实现前端对应代码： 在 utils/request 的响应拦截器中，增加以下逻辑： 1234567891011121314151617181920212223// 响应拦截器service.interceptors.response.use( response =&gt; &#123; ... &#125;, error =&gt; &#123; // 处理 token 超时问题 if ( error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.code === 401 ) &#123; store.dispatch(&#x27;user/logout&#x27;) &#125; if (error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.message) &#123; ElMessage.error(error.response.data.message) // 提示服务端抛出的错误信息 &#125; else &#123; ElMessage.error(error.message) &#125; return Promise.reject(error) &#125;) 那么至此，我们就已经完成了 整个用户退出 方案。 Sidebar 动态菜单接下来我们来处理 动态menu菜单。 临时的 menu 菜单，创建 layout/Sidebar/SidebarMenu 文件 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;!-- 一级 menu 菜单 --&gt; &lt;el-menu &#123;/* 只允许一个菜单展开 */&#125; :uniqueOpened=&quot;true&quot; default-active=&quot;1&quot; background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot; &gt; &lt;!-- 子集 menu 菜单 --&gt; &lt;el-sub-menu index=&quot;1&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;location /&gt;&lt;/el-icon&gt; &lt;span&gt;导航一&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;1-1&quot;&gt;选项1&lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;1-2&quot;&gt;选项2&lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;!-- 具体菜单项 --&gt; &lt;el-menu-item index=&quot;4&quot;&gt; &lt;el-icon&gt;&lt;setting /&gt;&lt;/el-icon&gt; &lt;template #title&gt;导航四&lt;/template&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref, reactive &#125; from &#x27;vue&#x27;import &#123; Location, Setting &#125; from &#x27;@element-plus/icons-vue&#x27;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 在 layout/Sidebar/index 中导入该组件 12345678910111213&lt;template&gt; &lt;div class=&quot;&quot;&gt; &lt;h1&gt;占位&lt;/h1&gt; &lt;el-scrollbar&gt; &lt;sidebar-menu&gt;&lt;/sidebar-menu&gt; &lt;/el-scrollbar&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import SidebarMenu from &#x27;./SidebarMenu&#x27;import &#123;&#125; from &#x27;vue&#x27;&lt;/script&gt; 那么至此我们生成了一个临时的 menu 菜单，从这个临时的 menu 菜单出可以看到，el-menu 其实分成了三个部分： el-menu：整个 menu 菜单 el-submenu：子集 menu 菜单 el-menu-item：具体菜单项 那么明确好了这些内容之后，接下来我们就可以来去分析一下 动态 menu 菜单如何生成了 动态menu菜单处理方案解析动态menu菜单 其实主要是和 动态路由表 配合来去实现 用户权限 的。 但是 用户权限处理 目前还未涉及到，因为咱们想要处理 用户权限 还需要先去处理很多的业务场景，所以暂时先只处理 动态menu菜单 。 所谓 动态menu菜单 指的是： 根据路由表的配置，自动生成对应的 menu 菜单。 当路由表发生变化时，menu 菜单自动发生变化 那么明确了 动态menu菜单 的含义之后，接下来咱们就需要来明确 动态menu菜单 的实现方案： 定义 路由表 对应 menu 菜单规则 根据规则制定 路由表 根据规则，依据 路由表 ，生成 menu 菜单 那么根据我们的实现方案可以发现，实现 动态menu菜单 最核心的关键点其实就在步骤一，也就是 定义 路由表 对应 menu 菜单规则 那么下面我们就来看一下，这个规则如何制定： 对于单个路由规则而言（循环）： 如果存在 meta &amp;&amp; meta.title &amp;&amp; meta.icon ：则显示在 menu 菜单中，其中 title 为显示的内容，icon 为显示的图标 如果存在 children ：则以 el-sub-menu（子菜单） 展示 否则：则以 el-menu-item（菜单项） 展示 否则：不显示在 menu 菜单中 那么明确好了对应的规则之后，接下来我们就可以来去看一下如何进行实现啦！ 生成项目页面组件明确了对应的方案之后，那么下面咱们就来实现对应的代码逻辑。 根据我们的分析，想要完成动态的 menu，那么我们需要按照以下的步骤来去实现： 创建页面组件 生成路由表 解析路由表 生成 menu 菜单 那么明确好了步骤之后，接下来我们就先来实现第一步 创建页面组件 在 views 文件夹下，创建如下页面： 创建文章：article-create 文章详情：article-detail 文章排名：article-ranking 错误页面：error-page 404 401 导入：import 权限列表：permission-list 个人中心：profile 角色列表：role-list 用户信息：user-info 用户管理：user-manage 创建结构路由表想要实现结构路由表，那么我们需要先知道最终我们要实现的结构是什么样子的，大家来看下面的截图： 这是我们最终要实现的 menu 截图。 根据此截图，我们可以知道两点内容： 我们创建的页面并没有全部进行展示 不显示页面表示 不满足 该条件 meta &amp;&amp; meta.title &amp;&amp; meta.icon menu 菜单将具备父子级的结构 按照此结构规划数据，则数据应为123456789101112131415161718192021222324252627282930313233343536[ &#123; &quot;title&quot;: &quot;个人中心&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;用户&quot;, &quot;children&quot;: [ &#123; &quot;title&quot;: &quot;员工管理&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;角色列表&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;权限列表&quot;, &quot;path&quot;: &quot;&quot; &#125; ] &#125;, &#123; &quot;title&quot;: &quot;文章&quot;, &quot;children&quot;: [ &#123; &quot;title&quot;: &quot;文章排名&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;创建文章&quot;, &quot;path&quot;: &quot;&quot; &#125; ] &#125;] 又因为将来我们需要进行 用户权限处理，所以此时我们需要先对路由表进行一个划分： 私有路由表 privateRoutes ：权限路由 公有路由表 publicRoutes：无权限路由 根据以上理论，生成以下路由表结构： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139/** * 私有路由表 */const privateRoutes = [ &#123; path: &#x27;/user&#x27;, component: layout, redirect: &#x27;/user/manage&#x27;, meta: &#123; title: &#x27;user&#x27;, icon: &#x27;personnel&#x27; &#125;, children: [ &#123; path: &#x27;/user/manage&#x27;, component: () =&gt; import(&#x27;@/views/user-manage/index&#x27;), meta: &#123; title: &#x27;userManage&#x27;, icon: &#x27;personnel-manage&#x27; &#125; &#125;, &#123; path: &#x27;/user/role&#x27;, component: () =&gt; import(&#x27;@/views/role-list/index&#x27;), meta: &#123; title: &#x27;roleList&#x27;, icon: &#x27;role&#x27; &#125; &#125;, &#123; path: &#x27;/user/permission&#x27;, component: () =&gt; import(&#x27;@/views/permission-list/index&#x27;), meta: &#123; title: &#x27;permissionList&#x27;, icon: &#x27;permission&#x27; &#125; &#125;, &#123; path: &#x27;/user/info/:id&#x27;, name: &#x27;userInfo&#x27;, component: () =&gt; import(&#x27;@/views/user-info/index&#x27;), meta: &#123; title: &#x27;userInfo&#x27; &#125; &#125;, &#123; path: &#x27;/user/import&#x27;, name: &#x27;import&#x27;, component: () =&gt; import(&#x27;@/views/import/index&#x27;), meta: &#123; title: &#x27;excelImport&#x27; &#125; &#125; ] &#125;, &#123; path: &#x27;/article&#x27;, component: layout, redirect: &#x27;/article/ranking&#x27;, meta: &#123; title: &#x27;article&#x27;, icon: &#x27;article&#x27; &#125;, children: [ &#123; path: &#x27;/article/ranking&#x27;, component: () =&gt; import(&#x27;@/views/article-ranking/index&#x27;), meta: &#123; title: &#x27;articleRanking&#x27;, icon: &#x27;article-ranking&#x27; &#125; &#125;, &#123; path: &#x27;/article/:id&#x27;, component: () =&gt; import(&#x27;@/views/article-detail/index&#x27;), meta: &#123; title: &#x27;articleDetail&#x27; &#125; &#125;, &#123; path: &#x27;/article/create&#x27;, component: () =&gt; import(&#x27;@/views/article-create/index&#x27;), meta: &#123; title: &#x27;articleCreate&#x27;, icon: &#x27;article-create&#x27; &#125; &#125;, &#123; path: &#x27;/article/editor/:id&#x27;, component: () =&gt; import(&#x27;@/views/article-create/index&#x27;), meta: &#123; title: &#x27;articleEditor&#x27; &#125; &#125; ] &#125;]/** * 公开路由表 */const publicRoutes = [ &#123; path: &#x27;/login&#x27;, component: () =&gt; import(&#x27;@/views/login/index&#x27;) &#125;, &#123; path: &#x27;/&#x27;, // 注意：带有路径“/”的记录中的组件“默认”是一个不返回 Promise 的函数 component: layout, redirect: &#x27;/profile&#x27;, children: [ &#123; path: &#x27;/profile&#x27;, name: &#x27;profile&#x27;, component: () =&gt; import(&#x27;@/views/profile/index&#x27;), meta: &#123; title: &#x27;profile&#x27;, icon: &#x27;el-icon-user&#x27; &#125; &#125;, &#123; path: &#x27;/404&#x27;, name: &#x27;404&#x27;, component: () =&gt; import(&#x27;@/views/error-page/404&#x27;) &#125;, &#123; path: &#x27;/401&#x27;, name: &#x27;401&#x27;, component: () =&gt; import(&#x27;@/views/error-page/401&#x27;) &#125; ] &#125;]const router = createRouter(&#123; history: createWebHashHistory(), routes: [...publicRoutes, ...privateRoutes]&#125;) 最后不要忘记在 layout/appMain 下设置路由出口 12345&lt;template&gt; &lt;div class=&quot;app-main&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 解析路由表，获取结构化数据想要获取路由表数据，那么有两种方式： router.options.routes：初始路由列表（新增的路由 无法获取到） router.getRoutes()：获取所有 路由记录 的完整列表 所以，我们此时使用 router.getRoutes() 方法获取完整的路由列表 在 layout/components/Sidebar/SidebarMenu 下写入以下代码： 123456&lt;script setup&gt;import &#123; useRouter &#125; from &#x27;vue-router&#x27;const router = useRouter()console.log(router.getRoutes())&lt;/script&gt; 从返回的数据来看，它与我们想要的数据结构相去甚远。 出现这个问题的原因，是因为它返回的是一个 完整的路由表 这个路由表距离我们想要的存在两个问题： 存在重复的路由数据 不满足该条件 meta &amp;&amp; meta.title &amp;&amp; meta.icon 的数据不应该存在 那么接下来我们就应该来处理这两个问题 创建 utils/route.ts 文件，创建两个方法分别处理对应的两个问题： filterRouters generateMenus 写入以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import path from &#x27;path&#x27;/** * 返回所有子路由 */const getChildrenRoutes = routes =&gt; &#123; const result = [] routes.forEach(route =&gt; &#123; if (route.children &amp;&amp; route.children.length &gt; 0) &#123; result.push(...route.children) &#125; &#125;) return result&#125;/** * 处理脱离层级的路由：某个一级路由为其他子路由，则剔除该一级路由，保留路由层级 * @param &#123;*&#125; routes router.getRoutes() */export const filterRouters = routes =&gt; &#123; const childrenRoutes = getChildrenRoutes(routes) return routes.filter(route =&gt; &#123; return !childrenRoutes.find(childrenRoute =&gt; &#123; return childrenRoute.path === route.path &#125;) &#125;)&#125;/** * 判断数据是否为空值 */function isNull(data) &#123; if (!data) return true if (JSON.stringify(data) === &#x27;&#123;&#125;&#x27;) return true if (JSON.stringify(data) === &#x27;[]&#x27;) return true return false&#125;/** * 根据 routes 数据，返回对应 menu 规则数组 */export function generateMenus(routes, basePath = &#x27;&#x27;) &#123; const result = [] // 遍历路由表 routes.forEach(item =&gt; &#123; // 不存在 children &amp;&amp; 不存在 meta 直接 return if (isNull(item.meta) &amp;&amp; isNull(item.children)) return // 存在 children 不存在 meta，进入迭代 if (isNull(item.meta) &amp;&amp; !isNull(item.children)) &#123; result.push(...generateMenus(item.children)) return &#125; // 合并 path 作为跳转路径 const routePath = path.resolve(basePath, item.path) // 路由分离之后，存在同名父路由的情况，需要单独处理 let route = result.find(item =&gt; item.path === routePath) if (!route) &#123; route = &#123; ...item, path: routePath, children: [] &#125; // icon 与 title 必须全部存在 if (route.meta.icon &amp;&amp; route.meta.title) &#123; // meta 存在生成 route 对象，放入 arr result.push(route) &#125; &#125; // 存在 children 进入迭代到children if (item.children) &#123; route.children.push(...generateMenus(item.children, route.path)) &#125; &#125;) return result&#125; 在 SidebarMenu 中调用该方法 123456789101112&lt;script setup&gt;import &#123; computed &#125; from &#x27;vue&#x27;import &#123; useRouter &#125; from &#x27;vue-router&#x27;import &#123; filterRouters, generateMenus &#125; from &#x27;@/utils/route&#x27;const router = useRouter()const routes = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateMenus(filterRoutes)&#125;)console.log(JSON.stringify(routes.value))&lt;/script&gt; 得到该数据结构 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091[ &#123; &quot;path&quot;:&quot;/profile&quot;, &quot;name&quot;:&quot;profile&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;profile&quot;, &quot;icon&quot;:&quot;el-icon-user&quot; &#125;, &#125;, &#123; &quot;path&quot;:&quot;/user&quot;, &quot;redirect&quot;:&quot;/user/manage&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;user&quot;, &quot;icon&quot;:&quot;personnel&quot; &#125;, &quot;props&quot;:&#123; &quot;default&quot;:false &#125;, &quot;children&quot;:[ &#123; &quot;path&quot;:&quot;/user/manage&quot;, &quot;name&quot;:&quot;userManage&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;userManage&quot;, &quot;icon&quot;:&quot;personnel-manage&quot; &#125;, &quot;children&quot;:[ ] &#125;, &#123; &quot;path&quot;:&quot;/user/role&quot;, &quot;name&quot;:&quot;userRole&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;roleList&quot;, &quot;icon&quot;:&quot;role&quot; &#125;, &quot;children&quot;:[ ] &#125;, &#123; &quot;path&quot;:&quot;/user/permission&quot;, &quot;name&quot;:&quot;userPermission&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;permissionList&quot;, &quot;icon&quot;:&quot;permission&quot; &#125;, &quot;children&quot;:[ ] &#125; ], &#125;, &#123; &quot;path&quot;:&quot;/article&quot;, &quot;redirect&quot;:&quot;/article/ranking&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;article&quot;, &quot;icon&quot;:&quot;article&quot; &#125;, &quot;props&quot;:&#123; &quot;default&quot;:false &#125;, &quot;children&quot;:[ &#123; &quot;path&quot;:&quot;/article/ranking&quot;, &quot;name&quot;:&quot;articleRanking&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;articleRanking&quot;, &quot;icon&quot;:&quot;article-ranking&quot; &#125;, &quot;children&quot;:[ ] &#125;, &#123; &quot;path&quot;:&quot;/article/create&quot;, &quot;name&quot;:&quot;articleCreate&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;articleCreate&quot;, &quot;icon&quot;:&quot;article-create&quot; &#125;, &quot;children&quot;:[ ] &#125; ], &#125;] 生成动态 menu 菜单有了数据结构之后，最后的步骤就水到渠成了 整个 menu 菜单，我们将分成三个组件来进行处理 SidebarMenu：处理数据，作为最顶层 menu 载体 SidebarItem：根据数据处理 当前项为 el-submenu || el-menu-item MenuItem：处理 el-menu-item 样式 那么下面我们一个个来处理 首先是 SidebarMenu 12345678910111213&lt;template&gt; &lt;!-- 一级 menu 菜单 --&gt; &lt;el-menu ... &gt; &lt;sidebar-item v-for=&quot;item in routes&quot; :key=&quot;item.path&quot; :route=&quot;item&quot; &gt;&lt;/sidebar-item&gt; &lt;/el-menu&gt;&lt;/template&gt; 创建 SidebarItem 组件，用来根据数据处理 当前项为 el-sub-menu || el-menu-item 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;!-- 支持渲染多级 menu 菜单 --&gt; &lt;el-sub-menu v-if=&quot;route.children.length &gt; 0&quot; :index=&quot;route.path&quot;&gt; &lt;template #title&gt; &lt;menu-item :title=&quot;route.meta.title&quot; :icon=&quot;route.meta.icon&quot;&gt;&lt;/menu-item&gt; &lt;/template&gt; &lt;!-- 循环渲染 --&gt; &lt;sidebar-item v-for=&quot;item in route.children&quot; :key=&quot;item.path&quot; :route=&quot;item&quot; &gt;&lt;/sidebar-item&gt; &lt;/el-sub-menu&gt; &lt;!-- 渲染 item 项 --&gt; &lt;el-menu-item v-else :index=&quot;route.path&quot;&gt; &lt;menu-item :title=&quot;route.meta.title&quot; :icon=&quot;route.meta.icon&quot;&gt;&lt;/menu-item&gt; &lt;/el-menu-item&gt;&lt;/template&gt;&lt;script setup&gt;import MenuItem from &#x27;./MenuItem&#x27;import &#123; defineProps &#125; from &#x27;vue&#x27;// 定义 propsdefineProps(&#123; route: &#123; type: Object, required: true &#125;&#125;)&lt;/script&gt; 创建 MenuItem 用来处理 el-menu-item 样式 12345678910111213141516171819202122&lt;template&gt; &lt;i v-if=&quot;icon.includes(&#x27;el-icon&#x27;)&quot; class=&quot;sub-el-icon&quot; :class=&quot;icon&quot;&gt;&lt;/i&gt; &lt;svg-icon v-else :icon=&quot;icon&quot;&gt;&lt;/svg-icon&gt; &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps &#125; from &#x27;vue&#x27;defineProps(&#123; title: &#123; type: String, required: true &#125;, icon: &#123; type: String, required: true &#125;&#125;)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt; 至此，整个的 menu 菜单结构就已经完成了！ 修复最后残余问题目前 menu 菜单存在三个问题 样式问题 路由跳转问题 默认激活项 样式问题： 首先处理样式，因为后面我们需要处理 主题替换 ，所以此处我们不能把样式写死。因为我们的样式变量都放在 variables.scss 文件中，并通过 :export 导出了变量以供 js 导入，每次使用都需要导入，比较麻烦，我们可以将其放在 store getters 中，以便 快捷访问。 12345import variables from &#x27;@/styles/variables.scss&#x27;const getters = &#123; cssVar: () =&gt; variables&#125;export default getters 在 SidebarMenu 中写入如下样式 123456&lt;el-menu :background-color=&quot;$store.getters.cssVar.menuBg&quot; :text-color=&quot;$store.getters.cssVar.menuText&quot; :active-text-color=&quot;$store.getters.cssVar.menuActiveText&quot; :unique-opened=&quot;true&quot;&gt; 路由跳转问题： 为 el-menu 指定 router 1234&lt;el-menu ... router&gt; 添加 router 属性 表示是否启用 vue-router 模式。 启用该模式会在激活导航时以 index 作为 path 进行路由跳转 使用 default-active 来设置加载时的激活项。 默认激活项： 根据当前 url 进行判断即可 123456789101112131415&lt;el-menu :default-active=&quot;activeMenu&quot; ...&gt;&lt;script setup&gt;...// 计算高亮 menu 的方法const route = useRoute()const activeMenu = computed(() =&gt; &#123; const &#123; path &#125; = route return path&#125;)&lt;/script&gt; 至此整个 动态menu完成 左侧菜单伸缩功能实现下面我们来实现一个标准化功能 左侧菜单伸缩 ，对于这个功能核心的点在于动画处理 样式的改变总是由数据进行驱动，所以首先我们去创建对应的数据 创建 store/app 模块，写入如下代码 12345678910111213export default &#123; namespaced: true, state: () =&gt; (&#123; sidebarOpened: true &#125;), mutations: &#123; triggerSidebarOpened(state) &#123; state.sidebarOpened = !state.sidebarOpened &#125; &#125;, actions: &#123;&#125;&#125; 在 store/index 中进行导入 123456789...import app from &#x27;./modules/app&#x27;export default createStore(&#123; getters, modules: &#123; ... app &#125;&#125;) 在 store/getters 中创建快捷访问 1sidebarOpened: state =&gt; state.app.sidebarOpened 创建 components/hamburger 组件，用来控制数据 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;hamburger-container&quot; @click=&quot;toggleClick&quot;&gt; &lt;svg-icon class=&quot;hamburger&quot; :icon=&quot;icon&quot;&gt;&lt;/svg-icon&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; computed &#125; from &#x27;vue&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;const store = useStore()const toggleClick = () =&gt; &#123; store.commit(&#x27;app/triggerSidebarOpened&#x27;)&#125;const icon = computed(() =&gt; store.getters.sidebarOpened ? &#x27;hamburger-opened&#x27; : &#x27;hamburger-closed&#x27;)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.hamburger-container &#123; padding: 0 16px; .hamburger &#123; display: inline-block; vertical-align: middle; width: 20px; height: 20px; &#125;&#125;&lt;/style&gt; 在 navbar 中使用该组件 123456789101112131415161718192021222324252627282930313233&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; &lt;hamburger class=&quot;hamburger-container&quot; /&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import Hamburger from &#x27;@/components/Hamburger&#x27;...&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.navbar &#123; ... .hamburger-container &#123; line-height: 46px; height: 100%; float: left; cursor: pointer; // hover 动画 transition: background 0.5s; &amp;:hover &#123; background: rgba(0, 0, 0, 0.1); &#125; &#125; ...&#125;&lt;/style&gt; 在 SidebarMenu 中，控制 el-menu 的 collapse 属性 123&lt;el-menu :collapse=&quot;!$store.getters.sidebarOpened&quot; ... 在 layout/index 中指定 整个侧边栏的宽度和缩放动画 12345&lt;div class=&quot;app-wrapper&quot; :class=&quot;[$store.getters.sidebarOpened ? &#x27;openSidebar&#x27; : &#x27;hideSidebar&#x27;]&quot; &gt; ... 在 layout/index 中 处理 navbar 的宽度 12345678910111213141516&lt;style lang=&quot;scss&quot; scoped&gt;....fixed-header &#123; position: fixed; top: 0; right: 0; z-index: 9; width: calc(100% - #&#123;$sideBarWidth&#125;); transition: width 0.28s;&#125;.hideSidebar .fixed-header &#123; width: calc(100% - #&#123;$hideSideBarWidth&#125;);&#125;&lt;/style&gt; 在 styles/variables.scss 中指定 hideSideBarWidth 1$hideSideBarWidth: 54px; SidebarHeader 处理整个左侧的 menu 菜单，到现在咱们还剩下最后一个 header 没有进行处理 在 sidebar/index 中写入如下代码 12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div class=&quot;&quot;&gt; &lt;div class=&quot;logo-container&quot;&gt; &lt;el-avatar size=&quot;44&quot; shape=&quot;square&quot; src=&quot;https://m.imooc.com/static/wap/static/common/img/logo-small@2x.png&quot; /&gt; &lt;h1 class=&quot;logo-title&quot; v-if=&quot;$store.getters.sidebarOpened&quot;&gt; imooc-admin &lt;/h1&gt; &lt;/div&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.logo-container &#123; height: 44px; padding: 10px 0 22px 0; display: flex; align-items: center; justify-content: center; .logo-title &#123; margin-left: 10px; color: #fff; font-weight: 600; line-height: 50px; font-size: 16px; white-space: nowrap; &#125;&#125;&lt;/style&gt; 创建 styles/element.scss 文件，统一处理 el-avatar 的背景问题 123.el-avatar &#123; --el-avatar-background-color: none;&#125; 在 styles/index.scss 中导入 12...@import &#x27;./element.scss&#x27;; 统一处理下动画时长的问题，在 styles/variables.scss 中，加入以下变量 1$sideBarDuration: 0.28s; 为 styles/sidebar.scss 修改时长 123456789.main-container &#123; transition: margin-left #&#123;$sideBarDuration&#125;; ...&#125;.sidebar-container &#123; transition: width #&#123;$sideBarDuration&#125;; ...&#125; 为 layout/index 修改样式 1234.fixed-header &#123; ... transition: width #&#123;$sideBarDuration&#125;;&#125; Vue3.2：组件状态驱动的动态 CSS 值在 vue 3.2 最新更新中，除了之前我们介绍的 响应式变化 之外，还有另外一个很重要的更新，那就是 组件状态驱动的动态 CSS 值 ，对应的文档也已经公布，大家可以 点击这里 查看 那么下面我们就使用下最新的特性，来为 logo-container 指定下高度： 1234567891011121314151617181920&lt;template&gt; ... &lt;el-avatar :size=&quot;logoHeight&quot; ...&lt;/template&gt;&lt;script setup&gt;...const logoHeight = 44&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.logo-container &#123; height: v-bind(logoHeight) + &#x27;px&#x27;;...&#125;&lt;/style&gt; 动态面包屑方案分析面包屑导航分为： 静态面包屑 动态面包屑 静态面包屑： 指的是：在每个页面中写死对应的面包屑菜单，缺点也很明显： 每个页面都得写一遍 页面路径结构变化了，得手动更改 简单来说就是 不好维护，不好扩展 。 动态面包屑： 根据当前的 url 自动生成面包屑导航菜单 无论之后路径发生了什么变化，动态面包屑 都会正确的进行计算 那么在后面的实现过程中，我们将会分成三大步来实现 创建、渲染基本的面包屑组件 计算面包屑结构数据 根据数据渲染动态面包屑内容 渲染基本的面包屑组件完成第一步，先去创建并渲染出基本的 面包屑 组件 创建 components/Breadcrumb/index，并写入如下代码： 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt; &lt;el-breadcrumb-item :to=&quot;&#123; path: &#x27;/&#x27; &#125;&quot;&gt;首页&lt;/el-breadcrumb-item&gt; &lt;el-breadcrumb-item&gt;&lt;a href=&quot;/&quot;&gt;活动管理&lt;/a&gt;&lt;/el-breadcrumb-item&gt; &lt;el-breadcrumb-item&gt;活动列表&lt;/el-breadcrumb-item&gt; &lt;!-- 面包屑的最后一项 --&gt; &lt;el-breadcrumb-item&gt; &lt;span class=&quot;no-redirect&quot;&gt;活动详情&lt;/span&gt; &lt;/el-breadcrumb-item&gt; &lt;/el-breadcrumb&gt;&lt;/template&gt;&lt;script setup&gt;import &#123;&#125; from &#x27;vue&#x27;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.breadcrumb &#123; display: inline-block; font-size: 14px; line-height: 50px; margin-left: 8px; ::v-deep .no-redirect &#123; color: #97a8be; cursor: text; &#125;&#125;&lt;/style&gt; 在 layout/components/Navbar 组件下导入 1234567891011121314151617181920&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; &lt;hamburger class=&quot;hamburger-container&quot; /&gt; &lt;breadcrumb class=&quot;breadcrumb-container&quot; /&gt; ... &lt;/div&gt;&lt;/template&gt;...&lt;style lang=&quot;scss&quot; scoped&gt;.navbar &#123; ... .breadcrumb-container &#123; float: left; &#125; ...&#125;&lt;/style&gt; 动态计算面包屑结构数据现在我们是完成了一个静态的 面包屑，接下来咱们就需要依托这个静态的菜单来完成动态的。 对于现在的静态面包屑来说，他分成了两个组件： el-breadcrumb：包裹性质的容器 el-breadcrumb-item：每个单独项 如果我们想要完成动态的，那么就需要 *依据动态数据，渲染 el-breadcrumb-item * 所以说接下来我们需要做的事情就很简单了 动态数据 渲染 el-breadcrumb-item 咱们先来看 动态数据如何制作 我们希望可以制作出一个 数组，数组中每个 item 都表示一个 路由信息： 创建一个方法，用来生成数组数据，在这里我们要使用到 route.match 属性来：获取与给定路由地址匹配的标准化的路由记录数组 如何理解上面这句话呢？其实我们将 route.matched 打印出来就可以发现，你每次切换菜单（或者说更换了路由），打印出来的就是当前路由的路由表（包含父级、子集的路由信息）。 123456789101112131415161718192021222324252627&lt;script setup&gt;import &#123; ref, reactive, watch &#125; from &#x27;vue&#x27;import &#123; useRoute, RouteRecordRaw &#125; from &#x27;vue-router&#x27;const breadcrumbData = ref&lt;RouteRecordRaw[]&gt;([]) // 存放计算出的面包屑数据const route = useRoute()const getBreadcrumbData = () =&gt; &#123; console.log(route.matched) // 只有存在 meta 并且 meta.title 的路由，我们才会显示到面包屑中 // 就像 menu 菜单一样，类似 404 login 的我们不要显示 breadcrumbData.value = route.matched.filter(r =&gt; r.meta &amp;&amp; r.meta.title)&#125;// 监听路由变化时触发watch( route, () =&gt; &#123; getBreadcrumbData() &#125;, &#123; immediate: true &#125;)&lt;/script&gt; 依据动态数据，渲染面包屑有了数据之后，根据数据来去渲染面包屑就比较简单了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;template&gt; &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt; &lt;el-breadcrumb-item v-for=&quot;(item, index) in breadcrumbData&quot; :key=&quot;item.path&quot; &gt; &lt;!-- 不可点击项 --&gt; &lt;span v-if=&quot;index === breadcrumbData.length - 1&quot; class=&quot;no-redirect&quot;&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt; &lt;!-- 可点击项 --&gt; &lt;a v-else class=&quot;redirect&quot; @click.prevent=&quot;onLinkClick(item)&quot;&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/a&gt; &lt;/el-breadcrumb-item&gt; &lt;/el-breadcrumb&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, watch &#125; from &#x27;vue&#x27;import &#123; useRoute, useRouter, RouteRecordRaw &#125; from &#x27;vue-router&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;const breadcrumbData = ref&lt;RouteRecordRaw[]&gt;([]) // 存放计算出的面包屑数据const store = useStore()const route = useRoute()const router = useRouter()const getBreadcrumbData = () =&gt; &#123; console.log(route.matched) // 只有存在 meta 并且 meta.title 的路由，我们才会显示到面包屑中 // 就像 menu 菜单一样，类似 404 login 的我们不要显示 breadcrumbData.value = route.matched.filter(r =&gt; r.meta &amp;&amp; r.meta.title)&#125;watch( route, () =&gt; &#123; getBreadcrumbData() &#125;, &#123; immediate: true &#125;)// 跳转路由const onLinkClick = (item: RouteRecordRaw) =&gt; &#123; router.push(item.path)&#125;// 将来需要进行主题替换，所以这里获取下动态样式const linkHoverColor = ref(store.getters.cssVars.menuBg)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.breadcrumb &#123; ... .redirect &#123; color: #666; font-weight: 600; &#125; .redirect:hover &#123; color: v-bind(linkHoverColor); // 应对主题切换 &#125;&#125;&lt;/style&gt; 面包屑动画vue3对 动画 进行了一些修改（vue 动画迁移文档） 主要的修改其实只有两个： 过渡类名 v-enter 修改为 v-enter-from 过渡类名 v-leave 修改为 v-leave-from 那么依据修改之后的动画，我们来为面包屑增加一些动画样式： 在 Breadcrumb/index 中增加 transition-group 1234567&lt;template&gt; &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt; &lt;transition-group name=&quot;breadcrumb&quot;&gt; ... &lt;/transition-group&gt; &lt;/el-breadcrumb&gt;&lt;/template&gt; 新建 styles/transition 样式文件 1234567891011121314.breadcrumb-enter-active,.breadcrumb-leave-active &#123; transition: all 0.5s;&#125;.breadcrumb-enter-from,.breadcrumb-leave-active &#123; opacity: 0; transform: translateX(20px);&#125;.breadcrumb-leave-active &#123; position: absolute;&#125; 在 styles/index 中导入 1@import &#x27;./transition.scss&#x27;; 总结到这里我们的 layout 整体架构就已经做完了，我们来看看效果吧。","categories":[],"tags":[{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"}]},{"title":"Vue3项目实战(三)：登录/请求模块/鉴权","slug":"vue3-project-generalLogin","date":"2022-12-23T15:34:24.000Z","updated":"2023-05-12T10:49:20.015Z","comments":true,"path":"/post/vue3-project-generalLogin.html","link":"","permalink":"http://yoursite.com/post/vue3-project-generalLogin.html","excerpt":"axios模块/接口请求模块/登录请求动作/Token缓存/鉴权","text":"配置环境变量 / 封装 axios封装的 axios 模块，至少具备一种能力，根据当前环境的不同，设定不同的 baseUrl @vue/cli 模式 官网：https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F 请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中。这是为了避免意外公开机器上可能具有相同名称的私钥。 除了 VUE_APP_* 变量之外，在你的应用代码中始终可用的还有两个特殊的变量： NODE_ENV - 会是 “development”、”production” 或 “test” 中的一个。具体的值取决于应用运行的模式。 BASE_URL - 会和 vue.config.js 中的 publicPath 选项相符，即你的应用会部署到的基础路径。 12345// .env.developmentusername=chenghaolun // 不会暴露出来VUE_APP_BASE_API=/api // 暴露出来，可以通过 process.env 获取 所有解析出来的环境变量都可以在 public/index.html 中以 HTML 插值中介绍的方式使用。 1&lt;title&gt;网站标题 &lt;%= VUE_APP_BASE_API %&gt;&lt;/title&gt; 我们可以打印 process.env 看看： 12345&#123; BASE_URL: &quot;/&quot;, NODE_ENV: &quot;development&quot;, VUE_APP_BASE_API: &quot;/api&quot;,&#125; 根据环境变量切换 baseUrl12345678import axios from &#x27;axios&#x27;const service = axios.create(&#123; baseURL: process.env.VUE_APP_BASE_API, timeout: 5000&#125;)export default service 封装接口请求模块在 src 下创建 api 文件夹，并创建 sys.ts 文件，用于处理系统的一些接口请求： 123456789import request from &#x27;@/utils/request&#x27;export const login = data =&gt; &#123; return request(&#123; url: &#x27;/sys/login&#x27;, method: &#x27;POST&#x27;, data &#125;)&#125; 封装登录请求动作我们不希望在点击登录按钮时，就立马调用登录接口，而是将其封装到 vuex 中，当然也可以使用 pinia。 在 store 下创建 modules 文件夹，并创建 user.ts 模块，用于处理所有的 用户相关 的内容（token获取、用户信息获取、退出登录…） 注意 当我们创建好了 store 时，在 vue template 里面使用 $store.state.globalName 可能会爆红，原因是没有声明 $store 123456789101112131415// src/vuex.d.tsimport &#123; Store &#125; from &#x27;vuex&#x27;declare module &#x27;@vue/runtime-core&#x27; &#123; // 声明自己的 store state interface State &#123; globalName: string &#125; // 为 `this.$store` 提供类型声明 interface ComponentCustomProperties &#123; $store: Store&lt;State&gt; &#125;&#125; 创建 user.ts 模块 123456789101112131415// store/index.jsimport &#123; createStore &#125; from &#x27;vuex&#x27;import user from &#x27;./modules/user&#x27;export default createStore(&#123; state() &#123; return &#123; globalName: &#x27;Hello_AlexCc&#x27; &#125; &#125;, modules: &#123; user &#125;&#125;) 创建 modules 文件夹 12345678910111213141516171819202122232425import md5 from &#x27;md5&#x27;import &#123; login &#125; from &#x27;@/api/sys&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123;&#125;), mutations: &#123;&#125;, actions: &#123; login(context: any, userInfo: any) &#123; const &#123; username, password &#125; = userInfo return new Promise((resolve, reject) =&gt; &#123; login(&#123; username, password: md5(password) &#125;) .then(res =&gt; &#123; resolve(res) &#125;) .catch(err =&gt; &#123; reject(err) &#125;) &#125;) &#125; &#125;&#125; 到这里，我们的登录请求动作就完成了，我们只需要在点击登录按钮时，获取到 store 并 dispatch login 方法即可： 12345678910111213// 获取到 store 实例const store = useStore()// user.value 是登录表单的 refstore .dispatch(&#x27;user/login&#x27;, user.value) .then(res =&gt; &#123; console.log(&#x27;login res&#x27;, res) &#125;) .catch(err =&gt; &#123; console.log(&#x27;err &#x27;, err) &#125;) 写一个简单的 node 服务器12345678910111213const express = require(&#x27;express&#x27;);const app = express()app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &quot;hello server 9999&quot; &#125;)&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 配置 devServer我们将 项目 和 node 服务跑起来之后，点击登录，发现报错了 404，是因为请求 http://localhost:8080/#/api/user 并不存在，接口请求地址资源找不到，我们的接口写在 node 端，那么 node 服务跑起来后，我们怎么去访问呢，这里就要用到 webpack 的 devServer 了。 123456789101112131415161718// vue.config.jsdevServer: &#123; // 配置代理 proxy: &#123; // 当地址中有/api的时候会触发代理机制，因为我们配置了 axios baseURL，所以每个请求中，都会以 `/api` 开头 &#x27;/api&#x27;: &#123; // 要代理的服务器地址 这里不用写 api // node 服务 target: &#x27;http://localhost:9999&#x27;, changeOrigin: true, // 是否跨域 pathRewrite: &#123; // 必须得带上,否则，真正的请求中就会带上 &#x27;/api&#x27;，&#x27;http://localhost:9999/api/user&#x27; &#x27;^/api&#x27;: &#x27;&#x27; &#125; &#125; &#125;&#125;, 最后，我们再重启项目，点击登录，就会拿到 user 接口返回的的结果了。 本地缓存处理方案存储 token 分为两种： 本地缓存：localstorage 全局状态管理：vuex 保存在 localstorage 中，是为了在 token 没过期的情况下，让用户自动登录。保存在 vuex 中，是为了方便在其他位置使用。 那么我们来定义 localstorage 的相关方法吧！ 123456789101112131415161718192021222324252627282930313233343536373839// utils/storage.ts/** * 存储数据 */export const setItem = (key: string, value: unknown): void =&gt; &#123; // 将数组、对象类型的数据转化为 JSON 字符串进行存储 if (typeof value === &#x27;object&#x27;) &#123; value = JSON.stringify(value) &#125; window.localStorage.setItem(key, value as string)&#125;/** * 获取数据 */export const getItem = (key: string): unknown =&gt; &#123; const data = window.localStorage.getItem(key) as string try &#123; return JSON.parse(data) &#125; catch (err) &#123; // 如果报错了，直接将数据发送给使用端 return data &#125;&#125;/** * 删除数据 */export const removeItem = (key: string): void =&gt; &#123; window.localStorage.removeItem(key)&#125;/** * 删除所有数据 */export const removeAllItem = (key: string): void =&gt; &#123; window.localStorage.clear()&#125; 然后，我们来处理 vuex user 模块，在 state 中定义 token，以及设置 token 的 mutations 方法。 123456789101112131415161718import &#123; setItem, getItem &#125; from &#x27;@/utils/storage&#x27;// 我们可以定义一个常量文件夹，用来设置 TOKEN 常量，或者各种其他常量值const TOKEN = &#x27;token&#x27;&#123; state: () =&gt; (&#123; token: getItem(TOKEN) || &#x27;&#x27; &#125;), mutations: &#123; setToken(state: IState, token: string): void &#123; state.token = token // 本地存储 token setItem(TOKEN, token) &#125; &#125;,&#125; 在 actions login 方法中，请求成功后我们需要 commit 一个 mutation，来触发 setToken 方法: 1context.commit(&#x27;setToken&#x27;, res.data.data.token) 到这，我们的 token 存储就完成了，我们可以在页面上将其显示出来看看。 1&lt;p&gt;token: &#123;&#123; $store.state.user.token || &#x27;暂无Token&#x27; &#125;&#125;&lt;/p&gt; 接口响应数据统一处理我们在 vuex user 模块中通过 login 接口获取到了 token，当我们处理数据时，会发现需要通过好几个 . 的方式去拿到token，层级太深了，不太方便。 那么我们可以通过 axios 的响应拦截器来处理这种情况。 12345678910111213141516171819import &#123; ElMessage &#125; from &#x27;element-plus&#x27;// 响应拦截器service.interceptors.response.use( response =&gt; &#123; const &#123; success, message, data &#125; = response.data if (success) &#123; return data &#125; else &#123; ElMessage.error(message) return Promise.reject(new Error(message)) &#125; &#125;, error =&gt; &#123; ElMessage.error(error.message) // 提示错误信息 return Promise.reject(error) &#125;) 修改好 axios 响应拦截器之后，我们就可以改写一下 vuex user 下的 actions login 方法了。 1234.then(res =&gt; &#123; context.commit(&#x27;setToken&#x27;, res.token) // 这样获取 token 是不是就方便很多了 resolve(res)&#125;) 登录后操作我们可以创建一个 src/layout 文件夹，登录成功后，用来显示的主容器，将 layout/index.vue 配置在 router 路由表中 1234&#123; path: &#x27;/&#x27;, component: () =&gt; import(&#x27;@/layout/index.vue&#x27;)&#125; 登录成功后，跳转到 layout 页面 12345678910// login/index.vuestore .dispatch(&#x27;user/login&#x27;, user.value) .then(() =&gt; &#123; router.replace(&#x27;/&#x27;) &#125;) .catch(err =&gt; &#123; console.log(&#x27;err &#x27;, err) &#125;) 登录鉴权到这里，我们点击登录，就可以跳转到 layout 页面了，但是我们如果在地址栏手动输入 /login，我们依然可以回到 login 页面，明明我们登录成功，有了 token 还会跳到 login 页面，这是为什么呢？ 因为我们到这里，还未做登录鉴权，即使存在token，我们并未做任何的权限控制和处理。 那么我们要做什么处理呢？ 当用户未登录时，不允许进入除 login 之外的任何页面 用户登录成功之后，token 未过期之前，不让用户进入 login 页面 实现这个功能的核心就是使用 vue-router 的 路由守卫 传送门：https://router.vuejs.org/zh/guide/advanced/navigation-guards.html 那么我们创建 permission.ts 来处理路由守卫吧： 因为我们的 token 定义在 modules user 中，每次获取 token，需要使用 store.state.user.token，这样显得太长了，我们可以定义 store getters，来方便获取 token： 12345// getters.tsconst getters = &#123; token: (state: any) =&gt; state.user.token&#125;export default getters 然后将其放入 store 的 getters 中 12345678910111213import getters from &#x27;./getters&#x27;export default createStore(&#123; state() &#123; return &#123; globalName: &#x27;Hello_AlexCc&#x27; &#125; &#125;, getters, modules: &#123; user &#125;&#125;) 然后创建 permissions.ts 文件，定义路由前置守卫。 判断 token 是否存在，如果存在 token，并且 to.path 等于 /login，那么不让跳转到登录页，而是去 layout 页面。 如果 to.path 不是 /login，直接执行 next 方法即可。 如果 token 不存在，并且 to.path 是 /login，直接跳转 next() 如果 token 不存在并且 to.path 不是 /login，我们让其跳转到登录页 next(&#39;/login&#39;) 123456789101112131415161718192021// permissions.tsimport router from &#x27;./router&#x27;import store from &#x27;./store&#x27;router.beforeEach((to, from, next) =&gt; &#123; // 判断token是否存在 if (store.getters.token) &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#x27;/&#x27;) &#125; else &#123; next() &#125; &#125; else &#123; if (to.path === &#x27;/login&#x27;) &#123; next() &#125; else &#123; next(&#x27;/login&#x27;) &#125; &#125;&#125;) 到这里，我们点击登录，就会去到根路径下 ‘/‘，也就是 layout 页面。这时我们在地址栏输入 /login，就不会再去登录页面了。 我们还可以改进一下，当 token 不存在时，我们判断了 to.path === &#39;/login&#39;，这样限制死了，将来我们还有 /404 以及 /401 等页面，这些页面也是不需要 token 就能访问的，我们不希望在 if 语句里面加太多的判断逻辑，这时，我们可以定义一个 白名单，专门处理不需要 token 的路径: 1234567const whiteList = [&#x27;/login&#x27;]if (whiteList.indexOf(to.path) &gt; -1) &#123; next()&#125; else &#123; next(&#x27;/login&#x27;)&#125;","categories":[],"tags":[{"name":"工程化,Vue3,Config","slug":"工程化-Vue3-Config","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-Config/"}]},{"title":"Vue3项目实战(一)：工程化配置","slug":"vue3-project-config","date":"2022-12-23T04:16:55.000Z","updated":"2023-05-12T10:49:20.014Z","comments":true,"path":"/post/vue3-project-config.html","link":"","permalink":"http://yoursite.com/post/vue3-project-config.html","excerpt":"工程化/编程规范/项目基础配置/...","text":"编程规范编程规范的重要作用： 规范的代码可以促进团队合作 规范的代码可以减少bug处理，规范不是对开发的制约，而确实是有助于提高开发效率的 规范的代码可以降低维护成本 规范的代码有助于代码审查 养成代码规范的习惯，有助于自身的成长 ESLint + Prettier 自动格式化代码 VSCode 安装 ESLint 插件，在根目录创建 .eslintrc 配置文件 123456789101112131415161718192021222324252627282930313233module.exports = &#123; root: true, // 表示当前目录为根目录 env: &#123; node: true, &#125;, // ESLint 中基础配置需要继承的配置 extends: [ &quot;plugin:vue/vue3-essential&quot;, &quot;eslint:recommended&quot;, &quot;@vue/typescript/recommended&quot;, &quot;@vue/prettier&quot;, &quot;@vue/prettier/@typescript-eslint&quot;, ], parserOptions: &#123; ecmaVersion: 2020, &#125;, // 错误规则：off(0) warn(1) error(2) rules: &#123; &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, // 关闭 no-used 检查 &quot;@typescript-eslint/no-unused-vars&quot;: &quot;off&quot;, &#125;, overrides: [&#123; files: [ &quot;**/__tests__/*.&#123;j,t&#125;s?(x)&quot;, &quot;**/tests/unit/**/*.spec.&#123;j,t&#125;s?(x)&quot;, ], env: &#123; jest: true, &#125;, &#125;, ],&#125;; VSCode 安装 Prettier 插件，在根目录创建 .prettierrc 配置文件 123456&#123; &quot;semi&quot;: false, // 是否加分号 &quot;singleQuote&quot;: true, // 单引号 &quot;arrowParens&quot;: &quot;avoid&quot;, // (x) =&gt; &#123;&#125; 箭头函数参数只有一个时，是否要小括号， avoid: 省略小括号 &quot;trailingComma&quot;: &quot;none&quot; // 以多个逗号相隔的，最后是否加逗号&#125; 我们打开 VSCode 设置，切换到 工作区，找到 Code Action on Save，修改配置： 123456&quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll&quot;: true, &quot;source.fixAll.eslint&quot;: true, &quot;source.fixAll.stylelint&quot;: true, &quot;source.fixAll.tslint&quot;: true,&#125;, 注意项 对 VSCode 而言，默认一个 tab 等于 4 个空格，而 ESlint 默认为两个空格，我们在 VSCode 设置中，找到 tab size 改为 2 就行。 可能安装了多个代码格式化工具，我们右键文件，找到 使用...格式化文档，设置默认的为 Prettier 即可。 有可能 Prettier 和 eslint 规则存在冲突，比如 eslint 希望方法名和括号之间有空格，而 Prettier 不希望有空格，控制台就会报出 ESlint 错误，我们就可以找到 ESlint 配置文件，找到 rules，将 space-before-function-paren 设置为 0 或者 off 即可。 Git 提交规范12345&lt;类型&gt;[可选 范围]: &lt;描述&gt;[可选 正文][可选 脚注] CommitizenGithub: cz-cli 当你使用 commitizen 进行代码提交时，commitizen 会提交你在提交时填写所有必须得提交字段 全局安装 1npm install -g commitizen@4.2.4 项目配置 安装 cz-customizable 1npm install cz-customizable@6.3.0 --save-dev 在 package.json 中配置 表示 commitizen 的配置在 node_modules 中的第三方包之中。 1234567...&quot;config&quot;: &#123; &quot;commitizen&quot;: &#123; &quot;path&quot;: &quot;node_modules/cz-customizable&quot; &#125;&#125;... 3.项目根目录下创建 .cz-config.js，配置自定义提示文件 1234567891011121314151617181920212223242526module.exports = &#123; types: [ &#123; value: &#x27;feat&#x27;, name: &#x27;feat: 新功能&#x27; &#125;, &#123; value: &#x27;fix&#x27;, name: &#x27;fix: 修复&#x27; &#125;, &#123; value: &#x27;docs&#x27;, name: &#x27;docs: 文档变更&#x27; &#125;, &#123; value: &#x27;style&#x27;, name: &#x27;style: 代码格式（不影响代码运行的变动）&#x27; &#125;, &#123; value: &#x27;refactor&#x27;, name: &#x27;refactor: 重构（既不是增加 feature，也不是修复 bug）&#x27; &#125;, &#123; value: &#x27;perf&#x27;, name: &#x27;perf: 性能优化&#x27; &#125;, &#123; value: &#x27;test&#x27;, name: &#x27;test: 增加测试&#x27; &#125;, &#123; value: &#x27;chore&#x27;, name: &#x27;chore: 构建过程或辅助工具的变动&#x27; &#125;, &#123; value: &#x27;revert&#x27;, name: &#x27;revert: 回退&#x27; &#125;, &#123; value: &#x27;build&#x27;, name: &#x27;build: 打包&#x27; &#125;, ], // 步骤 messages: &#123; type: &#x27;请选择提交的类型&#x27;, customScope: &#x27;请输入修改的范围（可选）&#x27;, subject: &#x27;请简要描述提交内容（必填）&#x27;, body: &#x27;请输入详细的描述（可选）&#x27;, footer: &#x27;请输入要关闭的 issue（可选）&#x27;, confirmCommit: &#x27;确认要使用以上信息提交?(y/n)&#x27;, &#125;, // 需要跳过的问题 skipQuestions: [&#x27;body&#x27;, &#x27;footer&#x27;], subjectLimit: 72, // 描述内容的限制&#125; 使用 git cz 代替 git commit 最后 我们可以通过 git cz 规范化了 git 提交，那么存在一个问题，我们必须通过 git cz 提交，才能规范化，如果我们忘记了使用 git cz，依然使用的 git commit 直接提交了怎么办呢？ 那么，有没有办法限制这种错误的出现？ 使用 git hooks Git Hooks当《提交描述信息》不符合 约定式提交规范 的时候，阻止当前的提交，并抛出相应的错误提示。 通过 git hooks 在执行某个事件之前或者之后进行一些额外的操作。 git hooks 非常多，实际用的比较多的就两个： pre-commit：git commit 执行前，在获取提交日志信息并进行提交之前调用 commit-msg：git commit 执行前，可用于将消息规范化为某种项目标准格式 使用 husky + commitlint 检查提交信息使用 git hooks去检验我们的提交信息，需要使用两个工具： commitlint: 用于检查提交信息 husky: git hooks 工具 主要: npm 版本需要在 7.x 以上 安装依赖: 1npm install @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4 --save-dev 创建 commitlint-config.js 123module.exports = &#123; extends: [&#x27;@commitlint/config-conventional&#x27;]&#125; 增加配置项 12345678910111213141516module.exports = &#123; extends: [&#x27;@commitlint/config-conventional&#x27;], rules: &#123; // type 的类型定义，表示 git 提交的 type 必须在以下范围内 &#x27;type-enum&#x27;: [ // 当前验证的错误级别 2, // 在什么情况下验证 &#x27;always&#x27;, // 枚举的内容 [&#x27;feat&#x27;, &#x27;fix&#x27;, &#x27;docs&#x27;, &#x27;style&#x27;, &#x27;refactor&#x27;, &#x27;perf&#x27;, &#x27;test&#x27;, &#x27;chore&#x27;, &#x27;revert&#x27;, &#x27;build&#x27;], ], // subject 大小写不做校验 &#x27;subject-case&#x27;: [0] &#125;&#125; 注意: 必须确保我们的配置文件保存为 utf-8 的编码格式，否则可能会报错。 打开配置文件，查看 vscode 右下角，是否显示了 utf-8，如果不是就要将其切换为正确的编码格式。 安装 husky 检测 git hooks 的工具 安装 1npm install husky@7.0.1 --save-dev 启动 hooks，在根目录下生成 .husky 文件夹 1npx husky install 在 package.json 中生成 prepare 指令（npm &gt; 7） 12// 执行指令，会在 npm scripts 中生成配置npm set-script prepare &quot;husky install&quot; 执行 prepare 指令 1npm run prepare 添加 commitlint 的 hook 到 husky 中，并在 commit-msg 的 hooks 下，执行 npx --no-install commitlint --edit &quot;$1&quot; 1npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27; 打开 .husky，就可以看到 commit-msg 文件了。 123456// commit-msg#!/bin/sh. &quot;$&#123;dirname &quot;$&#123;0&#125;&quot;&#125;/_/husky.sh&quot;npx --no-install commitlint --edit $1 最后，我们就可以愉快的提交了。 pre-commit 检测代码提交规范虽然我们使用了 eslint + prettier 在本地自动格式化代码，但是，有可能有的小伙伴，忘记将 vscode 的自动保存格式化打开了，并且写的代码格式不符合规范，也是可以提交上去的。 那么我们就得加一些配置，来检测小伙伴们提交的代码是否符合规范了。 要完成这一操作，就需要使用 husky 配合 eslint 来实现了。 我们期望通过 husky 检测 pre-commit 钩子，在该钩子下执行 npx eslint --ext .js,.vue, src 指令去进行相关的检测。 执行 npx husky add .husky/pre-commit &quot;npx eslint --ext .js,.vue, src&quot; 命令 会在 .husky 文件夹下面，生成 pre-commit 文件 123456// pre-commit#!/bin/sh. &quot;$&#123;dirname &quot;$&#123;0&#125;&quot;&#125;/_/husky.sh&quot;npx eslint --ext .js,.vue, src 每次我们提交代码，都会触发 pre-commit 钩子，从而使用 eslint 去检测我们的代码文件。 关闭自动保存，修改代码提交试试吧 lint staged 自动修复错误我们通过 pre-commit + husky 处理了代码提交时的规范化问题，当我们进行代码提交时，会检测所有的代码格式规范。 但是这样就有两个问题： 我们只修改了个别文件，没有必要检测所有的文件代码格式 它只能给我们提示出对应的错误，竟然还需要我们手动进行修复？不合理 我们使用 lint-staged 插件，来帮助我们解决这两个问题。 lint-staged 可以 只检测本次更新的代码，并在错误出现的时候，自动修复并且推送 安装 使用 vue-cli 生成项目时，lint-staged 不需要安装了，项目已经有了。如果没有的话，就需要单独安装 修改 package.json： 123456&quot;lint-staged&quot;: &#123; &quot;src/**/*.&#123;js,jsx,vue&#125;&quot;: &#123; &quot;eslint --fix&quot;, &quot;git add&quot; &#125;&#125; 修改 .husky/pre-commit 文件 12345678// pre-commit#!/bin/sh. &quot;$&#123;dirname &quot;$&#123;0&#125;&quot;&#125;/_/husky.sh&quot;// npx eslint --ext .js,.vue, src // 删除npx lint-staged // 新增 尝试将代码修改为不符合规范的，通过 git cz 再次提交试试！ lint-staged 会尝试自动修复错误 错误修复完成，继续执行，并将代码提交","categories":[],"tags":[{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"}]},{"title":"Vue3项目实战(二)：Icon图标（SVG）","slug":"vue3-project-traning","date":"2022-12-23T04:16:55.000Z","updated":"2023-05-12T10:49:20.017Z","comments":true,"path":"/post/vue3-project-traning.html","link":"","permalink":"http://yoursite.com/post/vue3-project-traning.html","excerpt":"自定义 SvgIcon 组件，支持外部链接显示以及本地 svg 图片显示","text":"使用 Element plus Icon https://element-plus.gitee.io/zh-CN/component/icon.html 自定义 SVG 图标对于 element plus 的图标，我们可以直接通过 el-icon 来显示。 12345678910111213&lt;template&gt; &lt;div&gt; &lt;el-icon :size=&quot;size&quot; :color=&quot;color&quot;&gt; &lt;Edit /&gt; &lt;/el-icon&gt; &lt;!-- 或者独立使用它，不从父级获取属性 --&gt; &lt;!-- 由于SVG图标默认不携带任何属性，你需要直接提供它们 --&gt; &lt;Edit /&gt; &lt;Edit style=&quot;width: 1em; height: 1em; margin-right: 8px&quot; /&gt; &lt;Share style=&quot;width: 1em; height: 1em; margin-right: 8px&quot; /&gt; &lt;/div&gt;&lt;/template&gt; 但是自定义的图标，我们却没有显示的方式，那么我们就需要一个自定义的组件，来展示自定义的 svg 图标。 对于这个自定义的组件，它需要拥有两种能力： 显示外部的 svg 图标（链接的方式） 显示项目内的 svg 图标 接下来，我们就来实现自定义组件。 显示外部的 svg 图标css mask:mask 属性允许使用者通过遮罩或者裁切特定区域的图片的方式来 隐藏一个元素的部分 或者 全部可见区域。 css mask: https://juejin.cn/post/6846687594693001223 接下来，我们定义组件 SvgIcon: 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;template&gt; &lt;div v-if=&quot;isExternal&quot; :style=&quot;styleExternalIcon&quot; class=&quot;svg-external-icon svg-icon&quot; :class=&quot;className&quot; /&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; defineProps, computed &#125; from &#x27;vue&#x27;const props = withDefaults(defineProps&lt;&#123; icon: string className?: string&#125;&gt;(), &#123; className: &#x27;&#x27;, icon: &#x27;&#x27;&#125;)// 判断是否为外部图标const isExternal = computed(() =&gt; /^(https?:|mailto:|tel:)/.test(props.icon))// 外部图标样式const styleExternalIcon = computed(() =&gt; (&#123; mask: `url($&#123;props.icon&#125;) no-repeat 50% 50%`, &#x27;-webkit-mask&#x27;: `url($&#123;props.icon&#125;) no-repeat 50% 50%`&#125;))&lt;/script&gt;&lt;style scoped&gt;.svg-icon &#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden;&#125;.svg-external-icon &#123; background-color: currentColor; mask-size: cover !important; display: inline-block;&#125;&lt;/style&gt; 这样，我们就可以通过 链接 的形式，来使用 svg 图标了： 1&lt;svg-icon icon=&quot;https://res.lgdsunday.club/user.svg&quot;&gt;&lt;/svg-icon&gt; 展示内部图标如果不是外部链接的话，我们就展示项目内部的 svg 图标。 通过 use 的 xlink href 属性，找到 body 下已经处理的过的 svg sprite 元素内容，它其中就包含了 symbol 元素，每个 symbol 元素上都有一个 id，这个 id 就是和 xlink:href 与之对应的。 123456// ...&lt;svg v-else class=&quot;svg-icon&quot; :class=&quot;className&quot; aria-hidden=&quot;true&quot;&gt; &lt;use :xlink:href=&quot;iconName&quot; /&gt;&lt;/svg&gt;const iconName = computed(() =&gt; `#icon-$&#123;props.icon&#125;`) // 当我们定义好了组件之后，那么就需要在项目中，导入所有的 svg 图标了。 1234// icons/index.tsrequire(&#x27;./svg/user.svg&#x27;)require(&#x27;./svg/password.svg&#x27;) 假设我们有几百上千个 svg 图标，我们都要这样子引入吗？会不会太难受了 ~~ 这里，我们可以使用 webpack 提供的 require.context 方法，来 批量 导入 svg 图标: 12345678// https://webpack.docschina.org/guides/dependency-management/#requirecontext// 通过 require.context() 函数来创建自己的 contextconst svgRequire = require.context(&#x27;./svg&#x27;, false, /\\.svg$/)// 此时返回一个 require 的函数，可以接受一个 request 的参数，用于 require 的导入。// 该函数提供了三个属性，可以通过 require.keys() 获取到所有的 svg 图标 [&#x27;./xxx1.svg&#x27;, &#x27;./xxx2.svg&#x27;]// 遍历图标，把图标作为 request 传入到 require 导入函数中，完成本地 svg 图标的导入svgRequire.keys().forEach(svgIcon =&gt; svgRequire(svgIcon)) 这样，就完成了所有的本地 svg 图片导入。 然后我们注册全局的 SvgIcon 组件，方便使用。 12345678// icons/index.tsimport type &#123; App &#125; from &#x27;vue&#x27;import SvgIcon from &#x27;@/components/SvgIcon/index.vue&#x27;export default (app: App): void =&gt; &#123; app.component(&#x27;svg-icon&#x27;, SvgIcon)&#125; 到这里，我们去页面上使用 &lt;svg-icon icon=&quot;user&quot; /&gt;，发现没有效果，图标展示不出来。 这是因为，我们虽然在 icons/index.ts 中，通过 require.context 导入了所有的 svg 图片，但是并没有做处理，svg-icon 内部的 &lt;use :xlink:href=&quot;#icon-user&quot; /&gt; 找不到任何跟 #icon-user 有关的 svg 图标。 这里，我们就需要用到 svg-sprite-loader 了。 svg-sprite-loadersvg-sprite-loader 的官方解释是：一个用于创建 svg 雪碧图的 Webpack 加载器。这个加载器现在已经被 JetBrains 公司收录和维护了。 通俗的讲：svg-sprite-loader 会把你引入的 svg 塞到一个个 symbol 中，合成一个大的 svg，最后将这个大的 svg 放入 body 中。symbol 的 id 如果不特别指定，就是你的文件名。在页面上形成这样的元素，下面是导入了本地的 user.svg 和 password.svg： 我们可以看到，每个 symbol 上，都有一个 id 属性，因为我们在 SvgIcon 中指定了 use 的 :xlink:href，使用时，就能找到页面上对应的图标了。 接着，我们来配置 svg-sprite-loader，打开 vue.config.js: 1234567891011121314151617181920212223242526272829303132333435const path = require(&#x27;path&#x27;)function resolve(dir) &#123; return path.join(__dirname, dir)&#125;module.exports = &#123; chainWebpack(config) &#123; // 使用了 config.module.rule(&#x27;svg&#x27;) 方法来获取对 SVG 文件的处理规则。 // 然后，它使用了 exclude 属性来添加一个排除规则，这个规则会排除 resolve(&#x27;src/icons&#x27;) 目录中的所有文件。 // 最后，它使用了 end 方法来结束这个链式调用。 // 这段代码的作用是在 Webpack 构建流程中排除 src/icons 目录中的所有 SVG 文件。这意味着 Webpack 在构建时不会处理这些文件。 config.module.rule(&#x27;svg&#x27;).exclude.add(resolve(&#x27;src/icons&#x27;)).end() // 使用了 config.module.rule(&#x27;icons&#x27;) 方法来获取对图标文件的处理规则。 // 然后，它使用了 test 属性来设置这个规则应用于哪些文件，这里使用的是一个正则表达式，表示只有以 .svg 结尾的文件才会被处理。 // 接着，它使用了 include 属性来添加一个包含规则，这个规则只会包含 resolve(&#x27;src/icons&#x27;) 目录中的文件。 // 最后，它使用了 use 方法来添加一个新的规则，这个规则使用了 svg-sprite-loader 来处理 SVG 文件。 // 这段代码的作用是在 Webpack 构建流程中处理 src/icons 目录中的 SVG 文件。 // 它会使用 svg-sprite-loader 加载器来将这些 SVG 文件转换为可以在浏览器中使用的精灵图（Sprite）。 config.module .rule(&#x27;icons&#x27;) .test(/\\.svg$/) .include.add(resolve(&#x27;src/icons&#x27;)) .end() .use(&#x27;svg-sprite-loader&#x27;) .loader(&#x27;svg-sprite-loader&#x27;) .options(&#123; symbolId: &#x27;icon-[name]&#x27; // 指定精灵的符号 ID 应为 icon-[name]。 &#125;) .end() &#125;&#125; 这两条规则在 webpack 配置中设置了两种不同的方法来处理 SVG 文件：一种用于排除位于 src/icons 目录中的 SVG 文件，另一种用于使用 svg-sprite-loader 处理位于 src/icons 目录中的 SVG 文件。 到这里，我们就完成了 svg-sprite-loader 的配置，然后重新启动项目，就可以愉快的使用本地的 svg 了。 12345&lt;svg-icon icon=&quot;user&quot;&gt;&lt;/svg-icon&gt;&lt;svg-icon icon=&quot;password&quot;&gt;&lt;/svg-icon&gt; 页面上的效果是这样的 总结经过 svg-sprite-loader 加载之后，不仅可以通过指定 id 的方式引入 icon，而且相比图片引入的方式，最大的优点就在于可以通过给 svg 标签添加 fill 属性来调整 icon 的颜色。 除此之外，还可以通过给 svg 添加 class 来调整 icon 的样式，虽然说图片引入的方式也能做到，但是如果图片指定宽高与原图的宽高不成比例，就会导致图片的失真，而 svg 不会。即使随意调整 svg 的宽高样式，它也是按照原尺寸进行缩放，达到高保真的效果。 而且通过svg-sprite-loader的处理后，生成了精灵图，它是一种将多个图标放在一张图片中的技术，可以减少 HTTP 请求数，从而提升网站性能。","categories":[],"tags":[{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"}]},{"title":"Vue3的响应式系统","slug":"vue3-reactive","date":"2022-12-22T13:34:30.000Z","updated":"2023-05-12T10:49:20.017Z","comments":true,"path":"/post/vue3-reactive.html","link":"","permalink":"http://yoursite.com/post/vue3-reactive.html","excerpt":"响应式系统的作用与实现","text":"响应式系统实现响应式基础 通过 proxy 代理对象，读取属性时触发 get 方法，设置属性时触发 set 方法 在 get 方法中收集副作用函数，在 set 方法中触发副作用函数 假设有这么一个对象：&#123; ok: true, text: &#39;hello world&#39; &#125;，注册副作用函数 123effect(() =&gt; &#123; document.body.innerHTML = obj.ok ? obj.text : &#x27;ok not&#x27;&#125;) 当 ok 为 true，我们会走 obj.text 的读取逻辑，触发 get 拦截方法。这个时候页面上会显示 hello world，当我们将 obj.ok 设置为 false 后，我们会有副作用遗留函数（text的），因为 ok 为 false，永远不会再读取 obj.text 了。 但是，当我们修改 obj.text 时， effect 副作用函数依然会触发，虽然页面上永远是 ok not。 清除不必要的副作用函数 这时，我们就需要进行 分支切换和 cleanup 函数了，通过 cleanup 函数，我们将只收集使用到的 key 的副作用函数，也就是说，当 ok 为false 时，我们不再对 obj.text 进行依赖手机，无论我们如何修改 obj.text，都不会触发 effect 方法。 我们对注册副作用函数，做一些改变，在注册函数内部，定义了一个新的副作用函数方法，这个方法内部执行 删除副作用函数的方法 和真正的副作用函数（设置 document.body 内容） 同时，我们还在 副作用函数 上定义了一个 deps 属性，用来存储与该副作用函数相关联的依赖集合，将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 某个 key 的 deps 中的副作用函数删除了 1234567891011121314function effect(fn) &#123; function effectFn() &#123; activeEffect = effectFn cleanup(effectFn) // 删除所有key 收集到的依赖 fn() // 重新执行副作用函数，重新收集依赖 &#125; effectFn.deps = [] effectFn()&#125; 定义 cleanup 函数，每一次触发 set 方法时，都会先删除所有 key 对应的依赖，然后重新执行 effectFn 内部的 fn 函数，重新收集依赖 因为 obj.ok = false 了，不会再读取 obj.text，所以也就不会再对 obj.text 收集依赖了。 12345678910function cleanup(effectFn) &#123; for(let i = 0; i &lt; effectFn.deps.length; i++) &#123; const deps = effectFn.deps[i] // Set 集合 deps.delete(effectFn) &#125; effectFn.deps.length = []&#125; 注意 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 ‘ok、text’ 中对应的依赖集合（Set）的副作用函数，因为 effectFn.deps 中存放的集合 和 Map key 对应的 Value 的集合，是同一个集合 删除后，Map 中的所有 value 都是空的 Set 然后执行 fn 函数，重新进行读取 obj 属性，进行依赖收集。 竟然无限循环？ 最后一步，我们还需要改造一下 trigger 函数，否则会造成 无限循环 1234567891011function trigger(target, key) &#123; const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) const effectsToRun = new Set(effects) // effects &amp;&amp; effects.forEach(fn =&gt; fn()) effectsToRun &amp;&amp; effectsToRun.forEach(fn =&gt; fn())&#125; 为什么新建一个 Set 集合呢? const effectsToRun = new Set(effects) 因为，我们遍历 effects 时，执行了每一个 副作用 函数，当副作用函数执行时，会调用 cleanup 进行清除，实际上就是从 effects 集合中奖当前执行的副作用函数剔除 但是，副作用函数的执行 fn() 会触发属性的读取操作，执行 track，导致副作用函数重新被收集到依赖中，而对于 effects集合的遍历仍然在执行，从而造成 无限循环。 解决办法就是：根据 effects 重新建立一个集合，进行遍历。 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;收集 key 的依赖&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; // 存储被注册的副作用函数 let activeEffect; const data = &#123; ok: true, text: &#x27;hello world&#x27; &#125; const bucket = new WeakMap() // target =&gt; Map const obj = new Proxy(data, &#123; get(target, key) &#123; // 追踪依赖 track(target, key) return target[key] &#125;, set(target, key, value) &#123; target[key] = value // 触发依赖 trigger(target, key) &#125; &#125;) function track(target, key) &#123; if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) &#123; bucket.set(target, depsMap = new Map()) &#125; let deps = depsMap.get(key) if (!deps) &#123; depsMap.set(key, deps = new Set()) &#125; // 添加副作用函数 deps.add(activeEffect) // deps 存储与该副作用函数相关联的依赖集合 // 将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 deps 中的副作用函数删除了 activeEffect.deps.push(deps) &#125; function trigger(target, key) &#123; const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) const effectsToRun = new Set(effects) // effects &amp;&amp; effects.forEach(fn =&gt; fn()) effectsToRun &amp;&amp; effectsToRun.forEach(fn =&gt; fn()) &#125; function effect(fn) &#123; function effectFn() &#123; activeEffect = effectFn cleanup(effectFn) fn() &#125; effectFn.deps = [] // 存储所有包含当前副作用函数的依赖 集合，在 get 拦截函数中处理 deps effectFn() &#125; function cleanup(effectFn) &#123; console.log(&#x27;effectFn &#x27;, effectFn.deps) // 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 &#x27;xxx&#x27;(key) 中对应的依赖集合的副作用函数 // effectFn.deps[i] 中，存放的依赖集合，和 Map key 对应的依赖集合，是同一个集合，删除某一项，自然会影响到另一个 // 当我们在 trigger 中执行 effects 时，就是执行副作用函数 // 这个时候，会执行 cleanup，删除所有的 key 对应的副作用函数，最后执行 fn，重新走 属性的读取逻辑，触发 get 方法，重新收集依赖 // 当我们设置 obj.ok = false 后，不会再读取 obj.text 了，从而不会对其 key 收集依赖。 for(let i = 0; i &lt; effectFn.deps.length; i++) &#123; const deps = effectFn.deps[i] deps.delete(effectFn) &#125; effectFn.deps.length = 0 &#125; effect(() =&gt; &#123; console.log(&#x27; obj.ok&#x27;, obj.ok) // obj.ok = true 会触发 obj 的 get拦截方法，并且通过 track 函数收集到了副作用函数，并且将其存储在 deps 中 document.body.innerHTML = obj.ok ? obj.text : &#x27;ok not&#x27; &#125;) setTimeout(() =&gt; &#123; // obj.text = &#x27;Vue3 Reactive&#x27; obj.ok = false console.log(&#x27;bucket &#x27;, bucket) &#125;, 1000) // setTimeout(() =&gt; &#123; // console.log(&#x27;执行了&#x27;) // obj.text = &#x27;Vue3 Reactive&#x27; // &#125;, 3000) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Reactive,Vue3","slug":"Reactive-Vue3","permalink":"http://yoursite.com/tags/Reactive-Vue3/"}]},{"title":"Nginx 实战","slug":"nginx","date":"2022-12-17T03:30:00.000Z","updated":"2023-05-12T10:49:20.013Z","comments":true,"path":"/post/nginx.html","link":"","permalink":"http://yoursite.com/post/nginx.html","excerpt":"Never too old to learn.","text":"查看 Nginx 命令查看安装目录 whereis nginx nginx: /usr/bin/nginx 查看 nginx 进程 ps -ef | grep nginx 查看 nginx 可执行文件 ps -ef | grep nginx /www/server/nginx/conf/nginx.conf 表示配置文件 或者也可以通过 nginx -t 来查看配置文件在哪，虽然这个命令是检测 nginx 配置文件是否有语法错误： 12nginx: the configuration file /www/server/nginx/conf/nginx.conf syntax is oknginx: configuration file /www/server/nginx/conf/nginx.conf test is successful 配置文件 nginx.conf 全局模块worker_processes auto; // 进程数量error_log /www/wwwlogs/nginx_error.log crit; // 错误日志存放路径pid /www/server/nginx/logs/nginx.pid; // 存放 pid 文件 eventsworker_connections 51200; // 单个进程最大的连接数（最大连接数：连接数+进程数） http 块 include 引入其他的配置文件 default_type 文件类型 解决跨域问题首先启动 nginx 服务，输入命令 nginx，修改根路径下的 index.html 文件 1234567891011121314151617181920212223242526// nginx 配置，访问 localhost:8080/ 时，会打开 index.htmllocation / &#123; root html; index index.html index.htm;&#125;// 修改index.html&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;button id=&quot;btn&quot;&gt;send&lt;/button&gt;&lt;script&gt; btn.onclick = () =&gt; &#123; const xhr = new XMLHttpRequest() xhr.open(&#x27;GET&#x27;, &#x27;http://localhost:9999/list&#x27;) xhr.onreadystatechange = () =&gt; &#123; if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; console.log(&#x27;返回结果&#x27;, xhr.responseText) &#125; &#125; xhr.send(null) &#125;&lt;/script&gt;&lt;/body&gt; 起一个本地 node 服务 9999 123456789101112const express = require(&#x27;express&#x27;);const app = express()app.get(&#x27;/list&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &quot;hello server&quot; &#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 当我们点击发送按钮时，会出现跨域问题，这是因为浏览器 同源策略限制，协议、域名、端口号不同，会形成跨域。 这里是端口不同。 我们可以利用 nginx 来解决。 打开 nginx.conf，新增一条转发规则，表示遇到 api 开头的，都将转发到某个服务下 比如 xhr.open(&#39;GET&#39;, &#39;/api/list&#39;), 会将 api 替换成 http://localhost:9999/ 12345// 添加location /api/ &#123; proxy_pass http://localhost:9999/;&#125; 修改调用接口的地方: 1xhr.open(&#x27;GET&#x27;, &#x27;/api/list&#x27;) 此时，再次点击 发送,不会再出现跨域了。 Vue Router History 模式 404 问题Vue 项目，采用 history 的路由模式，打包后放到 nginx 上部署，切换路由时出现 404 现象。 解决方案：try_files $uri $uri/ /index.html; 123456location / &#123; root html; index index.html index.htm; try_files $uri $uri/ /index.html;&#125; 负载均衡我们可以建 3 个（或者更多）node 服务来模拟实现，可以通过 count 计数，来查看每个服务被分配到的请求数 server1 1234567891011121314151617181920const express = require(&#x27;express&#x27;);const app = express()let count = 1app.get(&#x27;/list&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &quot;hello server 9999&quot; &#125;) console.log(`server 9999 ------ $&#123;count&#125;`) count++&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 通过 pm2 log 查看日志 1234567// package.json&quot;start&quot;: &quot;pm2 start index.js index2.js index3.js --watch&quot;,&quot;stop&quot;: &quot;pm2 stop index.js&quot;,&quot;allList&quot;: &quot;pm2 list&quot;,&quot;monit&quot;: &quot;pm2 monit&quot;,&quot;log&quot;: &quot;pm2 log&quot; server2、server3 只是端口不一样 修改 nginx 配置配置根路径，代理到本地服务，当我们启动 nginx，访问 http://localhost:8080/ 时，服务会代理到我们配置的 upstream node 服务上，访问 http://localhost:8080/list 即可调用咱们写好的 node 接口。 1234567891011upstream node &#123;server 127.0.0.1:9997;server 127.0.0.1:9998;server 127.0.0.1:9999;&#125;server &#123; location / &#123; proxy_pass http://node; // node 是 upstream 指定的 name &#125;&#125; 最后我们可以通过 postman 或 apifox 来进行压测了。 1接口：http://localhost:8080/list 这里设置的接口循环次数是 33，意味着我们将要调用 33 次接口，运行之后，33次均可以成功跑通。 来看下结果： 每个 server 分配均匀，33次，每个服务分配了 11 次请求。 权重还可以给服务设置权重 weight，数值越大，权重越高，请求数越多。 123server 127.0.0.1:9997 weight=3;server 127.0.0.1:9998 weight=2;server 127.0.0.1:9999 weight=1; 修改完配置后，重启 nginx nginx -s reload，继续运行 apifox 压测接口： 权重最高的 9997 请求被分配了 17 次，权重最低的 9999 只分配了 5 次请求。 超时设置超时备用模式，如果存在超时，就会选用备用的服务 9003，如果不存在超时请求，则不会有请求打到 9999 服务上。 12345upstream node &#123; server 127.0.0.1:9997 fail_timeout=60; server 127.0.0.1:9998 fail_timeout=20; server 127.0.0.1:9999 backup;&#125; 参考资料小满介绍Nginx ↩安装Nginx ↩Nginx相关 ↩","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}]},{"title":"在Linux上部署 Node 接口","slug":"nodejs","date":"2022-12-16T06:00:00.000Z","updated":"2023-05-12T10:49:20.013Z","comments":true,"path":"/post/nodejs.html","link":"","permalink":"http://yoursite.com/post/nodejs.html","excerpt":"Never too old to learn.","text":"连接远程服务器打开 mac 终端: 123ssh root@124.221.230.105 (公网IP)// 接着输入密码，即可登录远程服务器 登录进去，输入 pwd，会输出 /root，这时我们切到 ‘/‘ 目录下: cd .. 在远程安装 nodejs1wget https://cdn.npmmirror.com/binaries/node/v14.19.1/node-v14.19.1-linux-x64.tar.xz 解压压缩包使用 tar 命令 -c 压缩 -x 解压 -t 查看内容 -r 想压缩归档文件末尾追加文件 -v 显示所有过程 -f 使用档案名字，切记，这是最后一个参数，最后只能接档案名 1tar -xvf node-v14.19.1-linux-x64.tar.xz 配置环境变量找到根目录 ‘/‘ 下的 etc文件夹，进去里面，打开 profile 文件，打开，执行命令： 12345// &#x27;/&#x27;cd etcvim profile 在最后一行加上如下这句： 1export PATH=$PATH:/node-v14.19.1-linux-x64/bin 最后，使文件生效 12// /etcsource profile 查看 node 版本 123node -vnpm -v 安装 pm21npm install -g pm2 部署 node 接口在根目录下 /，创建 node-server 文件夹 可以通过 express 建立一个 node 服务 123456789101112131415const express = require(&quot;express&quot;);const app = express()app.get(&#x27;/list&#x27;, (req, res) =&gt; &#123; console.log(&#x27;current IP&#x27;, req.ip) res.json(&#123; code: 200, msg: &#x27;linux node server&#x27; &#125;)&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;node server at port 9999...&#x27;)&#125;) 通过 pm2 启动node服务12// node-serverpm2 start index.js --watch 通过 pm2 monit 查看 node 服务的打印日志 注意访问接口，如果打不开，大概率是因为没有放开防火墙。 http://124.221.230.105:9999/list 找到服务器地址，放开 node 服务对应的端口号 此时依然无法打开对应的接口 登录服务器，查看防火墙所有的端口 firewall-cmd –zone=public –list-ports 添加新的端口 firewall-cmd –zone=public –add-port=9999/tcp –permanent 删除 firewall-cmd –zone=public –remove-port=9999/tcp –permanent 表示永久有效 重启防火墙 firewall-cmd –reload 至此，就可以访问服务器上 node 服务的接口了。 参考资料小满Linux介绍 ↩","categories":[],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"}]},{"title":"Vue Router 4+","slug":"vue-router4","date":"2022-12-16T04:22:00.000Z","updated":"2023-05-12T10:49:20.014Z","comments":true,"path":"/post/vue-router4.html","link":"","permalink":"http://yoursite.com/post/vue-router4.html","excerpt":"富有表现力的路由语法、细致的导航控制、基于组件的配置方法、支持历史模式、 支持滚动控制、支持自动编码","text":"Vue Routerhistory1234const router = VueRouter.createRouter(&#123; history: VueRouter.createWebHashHistory(), // hash 模式 routes,&#125;) hash 模式底层是通过 hashchange 监听的： 1window.addEventListener(&#x27;hashchange&#x27;, () =&gt; &#123; ... &#125;) history 模式 (createWebHistory)，底层是通过 popstate 监听的: 1window.addEventListener(&#x27;popstate&#x27;, () =&gt; &#123; ... &#125;) 在 setup 中访问路由和当前路由因为我们在 setup 里面没有访问 this，所以我们不能再直接访问 this.$router 或 this.$route。 1234567891011121314151617import &#123; useRouter, useRoute &#125; from &#x27;vue-router&#x27;export default &#123; setup() &#123; const router = useRouter() const route = useRoute() function pushWithQuery(query) &#123; router.push(&#123; name: &#x27;search&#x27;, query: &#123; ...route.query, &#125;, &#125;) &#125; &#125;,&#125; route 对象是一个响应式对象，所以它的任何属性都可以被监听，但你应该避免监听整个 route 对象。在大多数情况下，你应该直接监听你期望改变的参数。 请注意，在模板中我们仍然可以访问 $router 和 $route，所以不需要在 setup 中返回 router 或 route。","categories":[],"tags":[{"name":"JS,Vue-Router,Vue3,","slug":"JS-Vue-Router-Vue3","permalink":"http://yoursite.com/tags/JS-Vue-Router-Vue3/"}]},{"title":"深入浅出Vue3","slug":"vue3","date":"2022-12-01T10:09:04.000Z","updated":"2023-05-12T10:49:20.017Z","comments":true,"path":"/post/vue3.html","link":"","permalink":"http://yoursite.com/post/vue3.html","excerpt":"渐进式 JavaScript 框架。易学易用，性能出色，适用场景丰富的 Web 前端框架","text":"ref 和 reactive 使用上有什么区别? ref 支持所有的类型，reactive 只接收引用类型（Array/Object/Map/Set） ref 取值和赋值都需要加 .value，reactive 不需要 .value reactive 不能直接赋值，否则会破坏响应式（proxy） 如果要改变数组，可以通过 push 方法，将要 push 的数组结构 (xx.push(…arr)) 如何抉择呢？因为社区大佬 basvanmeurs提出了一个新的 PR，大概就是重构了响应式的部分内容，由于重构内容过于庞大，所以一直等到 2021 年 8 月 5 号，伴随着 Vue3.2 的发布，尤大大才合并对应的代码。 ref 被重构之后，有了更高效的实现（提升了 约 260% 的读取速度 / 约 50% 的写入速度），依赖跟踪速度提高了约 40%，内存使用量减少了约 17%，毫无疑问这是一个伟大的变化。 那么，在以后的使用过程当中，能使用 ref 就用 ref吧，毕竟它的性能得到了如此大的提升。 defineProps 如何定义默认值？ 针对类型的 defineProps 声明的不足之处在于，它没有可以给 props 提供默认值的方式。 使用TS 特有的默认值方式 withDefaults 函数，无须引入开箱即用，接受一个props函数第二个参数是一个对象设置默认值。 123456789export interface Props &#123; msg?: string labels?: string[]&#125;const props = withDefaults(defineProps&lt;Props&gt;(), &#123; msg: &#x27;hello&#x27;, labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;]&#125;) 注意 如果使用 withDefaults 报错 &#39;withDefaults&#39; is not defined，我们修改 .eslintrc 文件 添加如下配置代码： 123globals: &#123; withDefaults: &#x27;readonly&#x27;&#125;, 动态组件 component 要渲染的实际组件由 is prop 决定。 当 is 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。 或者，is 也可以直接绑定组件。 按注册名渲染组件 1234567891011121314151617&lt;script&gt;import Foo from &#x27;./Foo.vue&#x27;import Bar from &#x27;./Bar.vue&#x27;export default &#123; components: &#123; Foo, Bar &#125;, data() &#123; return &#123; view: &#x27;Foo&#x27; &#125; &#125;&#125;&lt;/script&gt;&lt;template&gt; &lt;component :is=&quot;view&quot; /&gt;&lt;/template&gt; 按定义渲染组件 &lt;script setup&gt; 组合式 API： 1&lt;component :is=&quot;Math.random() &gt; 0.5 ? Foo : Bar&quot; /&gt; 渲染 HTML 元素 1&lt;component :is=&quot;href ? &#x27;a&#x27; : &#x27;span&#x27;&quot;&gt;&lt;/component&gt; 插槽默认插槽、具名插槽。 作用域插槽：:headerName=&quot;&#39;我是头部&#39;&quot;，父组件可以通过 v-slot=&quot;&#123; headerName &#125;&quot; 拿到组件内部暴露出来的数据 1234567891011121314// SlotComp.vue&lt;template&gt; &lt;div class=&quot;slot-wrapper&quot;&gt; &lt;header class=&quot;header&quot;&gt; &lt;slot name=&quot;header&quot; :headerName=&quot;&#x27;我是头部&#x27;&quot;&gt;&lt;/slot&gt; &lt;/header&gt; &lt;main class=&quot;content&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/main&gt; &lt;footer class=&quot;footer&quot;&gt; &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt; &lt;/footer&gt; &lt;/div&gt;&lt;/template&gt; 使用具有插槽的组件，headerName 是作用域插槽从内部提供的 12345&lt;SlotComp&gt; &lt;template v-slot:header=&quot;&#123; headerName &#125;&quot;&gt;&#123;&#123; headerName &#125;&#125;&lt;/template&gt; &lt;template v-slot&gt;default slot&lt;/template&gt; &lt;template v-slot:footer&gt;footer&lt;/template&gt;&lt;/SlotComp&gt; 插槽简写方式 # 12345&lt;SlotComp&gt; &lt;template #header=&quot;&#123; headerName &#125;&quot;&gt;&#123;&#123; headerName &#125;&#125;&lt;/template&gt; &lt;template #default&gt;default slot&lt;/template&gt; &lt;template #footer&gt;footer&lt;/template&gt;&lt;/SlotComp&gt; 动态插槽 1234567&lt;SlotComp&gt; &lt;template #[slotName]&gt;动态插槽&lt;/template&gt;&lt;/SlotComp&gt;// jsconst slotName = ref(&#x27;header&#x27;) 异步组件官方描述 在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。Vue 提供了 defineAsyncComponent 方法来实现此功能： 12345678import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;const AsyncComp = defineAsyncComponent(() =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; // ...从服务器获取组件 resolve(/* 获取到的组件 */) &#125;)&#125;) ES 模块动态导入 也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用。类似 Vite 和 Webpack 这样的构建工具也支持此语法 (并且会将它们作为打包时的代码分割点 分包、性能优化) 12345import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;const AsyncComp = defineAsyncComponent(() =&gt; import(&#x27;./components/MyComponent.vue&#x27;)) 最后得到的 AsyncComp 是一个外层包装过的组件，仅在页面需要它渲染时 才会调用加载内部实际组件的函数。 顶层 await&lt;script setup&gt; 中可以使用顶层 await。结果代码会被编译成 async setup()： 123&lt;script setup&gt;const post = await fetch(`/api/post/1`).then((r) =&gt; r.json())&lt;/script&gt; 搭配 Suspense 组件使用 定义异步组件 Sync.vue 123456789101112131415&lt;template&gt; &lt;div&gt; Name: &#123;&#123; name &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&#x27;ts&#x27;&gt;import &#123;ref, reactive&#125; from &#x27;vue&#x27;import iTools from &#x27;@/utils/Tools&#x27;const name = ref(&#x27;&#x27;)const &#123; data &#125; = await iTools.Axios.get(&#x27;./sync-data.json&#x27;) // 定义在 public 下的json文件name.value = data.name&lt;/script&gt; 通过 defineAsyncComponent 动态导入 Sync.vue 组件 1const Sync = defineAsyncComponent(() =&gt; import(&#x27;@/components/Sync.vue&#x27;)) 使用 Suspense 内置组件 在请求过程中，会一直显示 loading… 状态，真实项目中我们可以替换成骨架屏。当接口请求成功，才会显示 Sync.vue 的内容。 123456789&lt;Suspense&gt; &lt;template #default&gt; &lt;Sync /&gt; &lt;/template&gt; &lt;template #fallback&gt; Loading... &lt;/template&gt;&lt;/Suspense&gt; 性能优化当我们使用了 defineAsyncComponent 动态导入组件，build 项目时，会单独将 Sync.vue 的 js 包拎出来，不会将其打包到index.js 中，通过拆包的方式，减少入口文件的大小，从而减少白屏的时间。 Teleport 传送门将其插槽内容渲染到 DOM 中的另一个位置。 12345678910111213141516171819interface TeleportProps &#123; /** * 必填项。指定目标容器。 * 可以是选择器或实际元素。 */ to: string | HTMLElement /** * 当值为 `true` 时，内容将保留在其原始位置 * 而不是移动到目标容器中。 * 可以动态更改。 */ disabled?: boolean&#125;// examples&lt;teleport to=&quot;#some-id&quot; /&gt;&lt;teleport to=&quot;.some-class&quot; /&gt;&lt;teleport to=&quot;[data-teleport]&quot; /&gt;&lt;teleport to=&quot;body&quot; /&gt; MittVue 2可以支持$on，$off来实现event bus，但是 Vue3 已经不支持这些属性，不过Vue 3可以支持第三方event bus来实现事件通信， 这里使用 mitt，官方地址：https://github.com/developit/mitt 1234import mitt from &#x27;mitt&#x27;// vue3挂载到全局app.config.globalProperties.$mitt = mitt() tsx 安装插件 npm install @vitejs/plugin-vue-jsx -D 安装如果失败，将 node 版本切换至 v14.16.0 使用插件 123456import vueJsx from &quot;@vitejs/plugin-vue-jsx&quot;;export default defineConfig(&#123; plugins: [vue(), vueJsx()], // ...&#125;) 但是导入 .tsx 文件，TypeScript 会报错： 12345// 找不到模块“@/components/Foo”或其相应的类型声明。import Foo from &#x27;@/components/Foo&#x27; // 省略了 .tsx 后缀// 导入路径不能以“.tsx”扩展名结束。考虑改为导入“@/components/Bar.js”。import Bar from &#x27;@/components/Bar.tsx&#x27; 配置 tsconfig.json: 12345678&#123; &quot;compilerOptions&quot;: &#123; &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@/*&quot;: [&quot;src/*&quot;] &#125;, &#125;&#125; 之后我们导入 tsx 类型的组件，就不要带上后缀了。 编写 tsx 组件的3中方式 函数模式 12345export default function() &#123; return ( &lt;h1&gt;TSX componen111t&lt;/h1&gt; )&#125; options API 模式 1234567891011121314import &#123; defineComponent &#125; from &#x27;vue&#x27;export default defineComponent(&#123; data() &#123; return &#123; compname: &#x27;jsx comp&#x27; &#125; &#125;, render() &#123; return ( &lt;div&gt;&#123;this.compname&#125;&lt;/div&gt; ) &#125;&#125;) setup 函数模式 1234567891011121314151617181920interface IProps &#123; name?: string;&#125;export default defineComponent(&#123; props: &#123; name: String, &#125;, emits: [&#x27;on-click&#x27;], setup(props: IProps) &#123; const is = true // 返回渲染函数 return () =&gt; &#123; return ( &lt;h1 v-show=&#123;is&#125;&gt;setup 渲染函数 &#123;props?.name&#125;&lt;/h1&gt; ) &#125; &#125;&#125;) tsx slot 使用12345678910111213141516171819const Foo = (_, &#123; slots &#125;) =&gt; &#123; return (&lt;&gt; &lt;p&gt;&#123; slots?.header?.()&#125;&lt;/p&gt; &lt;h3&gt;slot comp&lt;/h3&gt; &lt;p&gt;&#123; slots.default ? slots.default() : &#x27;默认插槽&#x27; &#125;&lt;/p&gt; &lt;/&gt;)&#125;&lt;Foo v-slots=&#123;&#123; default() &#123; return &#x27;setup default slot&#x27; &#125;, header() &#123; return &#x27;header&#x27; &#125;&#125;&#125; /&gt; 自动引入 安装插件 unplugin-auto-import/vite https://github.com/antfu/unplugin-auto-import 注册完 plugin 之后，不再引入 ref, reactive 等等方法了，直接使用即可。 v-model 官网：https://cn.vuejs.org/guide/components/events.html v-model 在原生元素上的用法： 12345678&lt;input v-model=&quot;searchText&quot; /&gt;// 等价于&lt;input :value=&quot;searchText&quot; @input=&quot;searchText = $event.target.value&quot;/&gt; 而当使用在一个组件上时，v-model 会被展开为如下的形式： 123456789101112131415161718&lt;CustomInput :modelValue=&quot;searchText&quot; @update:modelValue=&quot;newValue =&gt; searchText = newValue&quot;/&gt;// 内部定义 props 和 方法const props = defineProps&lt;&#123; modelValue: boolean&#125;&gt;()const emits = defineEmits([&#x27;update:modelValue&#x27;])// 调用emits(&#x27;update:modelValue&#x27;, !props.modelValue) 当然，我们也可以给 v-model 指定一个参数，不使用默认的 modelValue: 12345&lt;MyComponent v-model:title=&quot;bookTitle&quot; /&gt;// 定义 propsdefineProps([&#x27;title&#x27;])defineEmits([&#x27;update:title&#x27;]) 我们还可以绑定多个 v-model: 1234&lt;UserName v-model:first-name=&quot;first&quot; v-model:last-name=&quot;last&quot;/&gt; 自定义指令 https://cn.vuejs.org/guide/reusability/custom-directives.html 12345678910111213141516171819const myDirective = &#123; // 在绑定元素的 attribute 前 // 或事件监听器应用前调用 created(el, binding, vnode, prevVnode) &#123;&#125;, // 在元素被插入到 DOM 前调用 beforeMount(el, binding, vnode, prevVnode) &#123;&#125;, // 在绑定元素的父组件 // 及他自己的所有子节点都挂载完成后调用 mounted(el, binding, vnode, prevVnode) &#123;&#125;, // 绑定元素的父组件更新前调用 beforeUpdate(el, binding, vnode, prevVnode) &#123;&#125;, // 在绑定元素的父组件 // 及他自己的所有子节点都更新后调用 updated(el, binding, vnode, prevVnode) &#123;&#125;, // 绑定元素的父组件卸载前调用 beforeUnmount(el, binding, vnode, prevVnode) &#123;&#125;, // 绑定元素的父组件卸载后调用 unmounted(el, binding, vnode, prevVnode) &#123;&#125;&#125; 123456789&lt;div v-example:foo.bar=&quot;baz&quot;&gt;// binding 参数会是一个这样的对象：&#123; arg: &#x27;foo&#x27;, modifiers: &#123; bar: true &#125;, value: /* `baz` 的值 */, oldValue: /* 上一次更新时 `baz` 的值 */&#125; 全局函数或变量在 Vue2 中，我们经常将全局用到的函数定义在 Vue 的 prototype 上，在 Vue3 中已经不这样使用了: 123456789const app = createApp(App)app.config.globalProperties.$env = &#x27;dev&#x27;app.config.globalProperties.$filters = &#123; format&lt;T&gt;(str: T): string &#123; return str.trim() &#125;&#125; 我们使用的时候，不需要导入什么，直接在 .vue 文件使用即可: 12345678&lt;div&gt;env &#123;&#123;$env&#125;&#125;&lt;/div&gt;&lt;script setup lang=&quot;ts&quot;&gt; const app = getCurrentInstance() console.log(app?.proxy?.$filters.format(&#x27;getCurrentInstance&#x27;))&lt;/script&gt; 在组件中使用全局的变量或者函数时，会出现 ts 报错，这时我们需要去声明它的类型: 12345678declare module &#x27;vue&#x27; &#123; export interface ComponentCustomProperties &#123; $filters: &#123; format&lt;T&gt;(str: T): string, &#125;, $env: string, &#125;&#125; 自定义插件 一个插件可以是一个拥有 install() 方法的对象，也可以直接是一个安装函数本身。 插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种： 通过 app.component() 和 app.directive() 注册一到多个全局组件或自定义指令。 通过 app.provide() 使一个资源可被注入进整个应用。 向 app.config.globalProperties 中添加一些全局实例属性或方法 以一个全局的 Loading 组件为例： 12345678910111213141516171819202122// Loading/index.tsimport type &#123; App, VNode &#125; from &#x27;vue&#x27;import &#123; createVNode, render &#125; from &#x27;vue&#x27;import Loading from &#x27;./index.vue&#x27;export default &#123; install (app: App) &#123; // Loading 需要转成 VNode const VNode: VNode = createVNode(Loading) // 将组件挂在到某个元素下 render(VNode, document.body) // Loading 组件通过 defineExpose 方法，暴露内部方法会在 exposed 字段上 app.config.globalProperties.$loading = &#123; onShow: VNode.component?.exposed?.onShow, onHide: VNode.component?.exposed?.onHide &#125; &#125;&#125; Loading 组件内部实现 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div class=&quot;loading&quot; v-if=&quot;show&quot; @click=&quot;onHide&quot;&gt; &lt;img src=&quot;../../assets/imgs/loading.gif&quot; alt=&quot;&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&#x27;ts&#x27;&gt;import &#123;ref, reactive&#125; from &#x27;vue&#x27;const show = ref(false)const onShow = () =&gt; show.value = trueconst onHide = () =&gt; show.value = false// 暴露内部方法供外部调用defineExpose(&#123; onShow, onHide,&#125;)&lt;/script&gt;&lt;style scoped lang=&quot;less&quot;&gt;.loading &#123; width: 100%; height: 100%; background-color: #1f2123; position: absolute; top: 0; left: 0; text-align: center;&#125;&lt;/style&gt; 这样我们就可以在任何地方使用 全局 Loading 了。 123456789// setupconst instance = getCurrentInstance()const showLoading = () =&gt; &#123; instance?.proxy?.$loading.onShow()&#125;// or 直接在 template 中使用&lt;button @click=&quot;$loading.onShow&quot;&gt;show loading&lt;/button&gt; 如果调用 $loading 报ts错误，我们可以声明全局类型 12345678declare module &#x27;vue&#x27; &#123; export interface ComponentCustomProperties &#123; $loading: &#123; onShow(): void; onHide(): void; &#125; &#125;&#125; Scoped原理 &amp; 样式穿透 给 HTML DOM节点加一个不重复的 data 属性（形如: data-v-xxxxx），来表示它的唯一性 在每句 CSS 选择器的末尾，加一个当前组件的 data 属性选择器，来私有化样式 如果组件内部包含其他组件，只会给其他组件的最外层标签加上当前组件的 data 属性. 想要直接修改开源组件的样式，大概率是失败的，解决方案就是要使用样式穿透 123456789/deep/ .input &#123; ...&#125;// or:deep(.input) &#123; ...&#125; css新特性插槽选择器我们在使用插槽时，如何在子组件中修改插槽内容的样式 123:slotted(.p-footer) &#123; color: red;&#125; 定义全局样式123:global(div) &#123; color: red;&#125; 动态 css123456789101112// jsconst color = ref(&#x27;red&#x27;)const font = ref(&#123; fontSize: &#x27;24px&#x27;, fontWeight: &#x27;bold&#x27;,&#125;)// css.box &#123; color: v-bind(color); font-size: v-bind(&#x27;font.fontSize&#x27;);&#125; 模块化 css给 style 标签加上 module 属性 123456789101112// template// 如果有多个，就写成数组形式&lt;div :class=&quot;[$style.box]&quot;&gt; 模块 css&lt;/div&gt;// css&lt;style module&gt;.box &#123; color: red&#125;&lt;/style&gt; $style 是固定的写法，如果不想用这个变量，我们可以指定 module=&quot;myStyle&quot; 。 我们还可以通过 useCssModule 获取当前组件下的样式类名 123456// 默认const class = useCssModule()const class = useCssModule(&#x27;$style&#x27;)// 如果指定了 moduleconst class = useCssModule(&#x27;myStyle&#x27;) 集成 Tailwind CSS https://blog.csdn.net/qq1195566313/article/details/124951311?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167109189716782427434983%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=167109189716782427434983&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124951311-null-null.nonecase&amp;utm_term=tailwind&amp;spm=1018.2226.3001.4450 安装 vscode 提示插件 Tailwind CSS IntelliSense h函数1234567891011import &#123; h &#125; from &#x27;vue&#x27;const Btn = (props, ctx) =&gt; &#123; return h(&#x27;div&#x27;, &#123; class: [...], onClick: () =&gt; &#123; ctx.emit(&#x27;on-click&#x27;, &#x27;hello world&#x27;) &#125;, &#125;, ctx.slots.default())&#125; 参考资料Vue3+Vite+Ts 项目实战 01 Vite 创建项目、ESLint+TS+GitCommit配置、Vue3新特性介绍 ↩","categories":[],"tags":[{"name":"JS,Vue3","slug":"JS-Vue3","permalink":"http://yoursite.com/tags/JS-Vue3/"}]},{"title":"高性能渲染十万条数据(虚拟列表)","slug":"virtual-list","date":"2022-11-23T12:43:13.000Z","updated":"2023-05-12T10:49:20.014Z","comments":true,"path":"/post/virtual-list.html","link":"","permalink":"http://yoursite.com/post/virtual-list.html","excerpt":"使用虚拟列表的方式，来同时加载大量数据。","text":"前言在工作中，有时会遇到需要一些不能使用分页方式来加载列表数据的业务情况，对于此，我们称这种列表叫做长列表。比如，在一些外汇交易系统中，前端会实时的展示用户的持仓情况(收益、亏损、手数等)，此时对于用户的持仓列表一般是不能分页的。 时间分片 提到了可以使用时间分片的方式来对长列表进行渲染，但这种方式更适用于列表项的DOM结构十分简单的情况。本文会介绍使用虚拟列表的方式，来同时加载大量数据。 当我们渲染10w条数据时，其实主要是的时间花费在 Recalculate Style 和 Layout 上 Recalculate Style：样式计算，浏览器根据css选择器计算哪些元素应该应用哪些规则，确定每个元素具体的样式。 Layout：布局，知道元素应用哪些规则之后，浏览器开始计算它要占据的空间大小及其在屏幕的位置。 在实际的工作中，列表项必然不会像例子中仅仅只由一个li标签组成，必然是由复杂DOM节点组成的。 那么可以想象的是，当列表项数过多并且列表项结构复杂的时候，同时渲染时，会在Recalculate Style和Layout阶段消耗大量的时间。 而虚拟列表就是解决这一问题的一种实现。 什么是虚拟列表虚拟列表其实是按需显示的一种实现，即只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。 假设有1万条记录需要同时渲染，我们屏幕的可见区域的高度为1000px,而列表项的高度为50px，则此时我们在屏幕中最多只能看到20个列表项，那么在首次渲染的时候，我们只需加载20条即可。 说完首次加载，再分析一下当滚动发生时，我们可以通过计算当前滚动值得知此时在屏幕可见区域应该显示的列表项。 假设滚动发生，滚动条距顶部的位置为150px,则我们可得知在可见区域内的列表项为第4项至`第13项。 实现虚拟列表的实现，实际上是在首屏加载的时候，只加载 可视区域 内需要的列表项，当滚动发生时，通过计算动态获得可视区域内的列表项，并将非可视区域内存在的列表项删除。 计算当前可视区域起始数据索引（startIndex） 计算当前可视区域结束数据索引（endIndex） 计算当前可视区域的数据，并渲染到页面中 计算startIndex对应的数据在整个列表中的偏移位置startOffset并设置到列表上 由于只是对可视区域内的列表项进行渲染，所以为了保持列表容器的高度并可正常的触发滚动，将Html结构设计成如下结构： 1234567891011121314151617181920&lt;div ref=&quot;list&quot; class=&quot;infinite-list-container&quot; @scroll=&quot;scrollEvent($event)&quot;&gt; &lt;!-- 所有数据的总高度 --&gt; &lt;div class=&quot;infinite-list-phantom&quot; :style=&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt; &lt;!-- 可视区区域，可以当做滑块看待 --&gt; &lt;div class=&quot;infinite-list&quot; :style=&quot;&#123; transform: getTransform &#125;&quot;&gt; &lt;!-- 每一项数据 --&gt; &lt;div ref=&quot;items&quot; class=&quot;infinite-list-item&quot; v-for=&quot;item in visibleData&quot; :key=&quot;item.id&quot; :style=&quot;&#123; height: itemSize + &#x27;px&#x27;, lineHeight: itemSize + &#x27;px&#x27; &#125;&quot; &gt; &#123;&#123; item.value &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 接着，监听infinite-list-container的 scroll事件，获取滚动位置 scrollTop。 列表总高度 listHeight = listData.length * itemSize 可显示的列表项数 visibleCount = Math.ceil(screenHeight / itemSize) 数据的起始索引 startIndex = Math.floor(scrollTop / itemSize) 数据的结束索引 endIndex = startIndex + visibleCount 列表显示数据为 visibleData = listData.slice(startIndex,endIndex) 12345678910111213scrollEvent() &#123; //当前滚动位置 let scrollTop = this.$refs.list.scrollTop; //此时的开始索引（向下取整），itemSize 是 100 this.start = Math.floor(scrollTop / this.itemSize); //此时的结束索引 this.end = this.start + this.visibleCount; //此时的偏移量 this.startOffset = scrollTop - (scrollTop % this.itemSize);&#125;, 当滚动后，由于 渲染区域 相对于 可视区域 已经发生了偏移，此时我需要获取一个 偏移量startOffset，通过样式控制将渲染区域偏移至可视区域中，当用户在滑动时，渲染区域就会根据 startOffset 计算出偏移量，渲染区域就会一直在可视区域内呈现。 1234567this.startOffset = scrollTop - (scrollTop % this.itemSize);// computed//偏移量对应的stylegetTransform() &#123; return `translate3d(0,$&#123;this.startOffset&#125;px,0)`;&#125;, 完整代码12345678910111213141516&lt;style&gt; html&#123; height: 100%; &#125; body&#123; height: 100%; margin:0; &#125; #app&#123; height:100%; &#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;VirtualList :listData=&quot;state.data&quot; :itemSize=&quot;100&quot; /&gt;&lt;/div&gt; VirtualList comp. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&lt;script&gt;export default &#123; name: &quot;VirtualList&quot;, props: &#123; //所有列表数据 listData: &#123; type: Array, default: () =&gt; [], &#125;, //每项高度 itemSize: &#123; type: Number, default: 200, &#125;, &#125;, computed: &#123; //列表总高度 listHeight() &#123; return this.listData.length * this.itemSize; &#125;, //可显示的列表项数 visibleCount() &#123; // 向上取整: Math.ceil(13.06) =&gt; 14，表示整个屏幕，可以放 14 条数据 return Math.ceil(this.screenHeight / this.itemSize); &#125;, //偏移量对应的style getTransform() &#123; return `translate3d(0,$&#123;this.startOffset&#125;px,0)`; &#125;, //获取真实显示列表数据 visibleData() &#123; return this.listData.slice( this.start, Math.min(this.end, this.listData.length) ); &#125;, &#125;, mounted() &#123; // this.$el 表示当前组件的根节点，这里是 infinite-list-container this.screenHeight = this.$el.clientHeight; this.start = 0; this.end = this.start + this.visibleCount; &#125;, data() &#123; return &#123; //可视区域高度 screenHeight: 0, //偏移量 startOffset: 0, //起始索引 start: 0, //结束索引 end: null, &#125;; &#125;, methods: &#123; scrollEvent() &#123; //当前滚动位置 let scrollTop = this.$refs.list.scrollTop; //此时的开始索引（向下取整），itemSize 是 100 this.start = Math.floor(scrollTop / this.itemSize); //此时的结束索引 this.end = this.start + this.visibleCount; //此时的偏移量 this.startOffset = scrollTop - (scrollTop % this.itemSize); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;template&gt; &lt;div ref=&quot;list&quot; class=&quot;infinite-list-container&quot; @scroll=&quot;scrollEvent($event)&quot;&gt; &lt;!-- 所有数据的总高度 --&gt; &lt;div class=&quot;infinite-list-phantom&quot; :style=&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt; &lt;!-- 可视区区域，可以当做滑块看待 --&gt; &lt;div class=&quot;infinite-list&quot; :style=&quot;&#123; transform: getTransform &#125;&quot;&gt; &lt;div ref=&quot;items&quot; class=&quot;infinite-list-item&quot; v-for=&quot;item in visibleData&quot; :key=&quot;item.id&quot; :style=&quot;&#123; height: itemSize + &#x27;px&#x27;, lineHeight: itemSize + &#x27;px&#x27; &#125;&quot; &gt; &#123;&#123; item.value &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.infinite-list-container &#123; height: 100%; overflow: auto; position: relative; -webkit-overflow-scrolling: touch;&#125;.infinite-list-phantom &#123; position: absolute; left: 0; top: 0; right: 0; z-index: -1;&#125;.infinite-list &#123; left: 0; right: 0; top: 0; position: absolute; text-align: center;&#125;.infinite-list-item &#123; padding: 10px; color: #555; box-sizing: border-box; border-bottom: 1px solid #999;&#125;&lt;/style&gt; 列表项动态高度在之前的实现中，列表项的高度是固定的，因为高度固定，所以可以很轻易的获取列表项的整体高度以及滚动时的显示数据与对应的偏移量。 而实际应用的时候，当列表中包含文本之类的可变内容，会导致 列表项的高度并不相同。 比如这样： 在虚拟列表中应用动态高度的解决方案一般有如下三种： 1.对组件属性itemSize进行扩展，支持传递类型为数字、数组、函数 可以是一个固定值，如 100，此时列表项是固高的 可以是一个包含所有列表项高度的数据，如 [50, 20, 100, 80, …] 可以是一个根据列表项索引返回其高度的函数：(index: number): number 这种方式虽然有比较好的灵活度，但仅适用于可以预先知道或可以通过计算得知列表项高度的情况，依然无法解决列表项高度由内容撑开的情况。 2.将列表项 渲染到屏幕外，对其高度进行测量并缓存，然后再将其渲染至可视区域内。 由于 预先渲染至屏幕外，再渲染至屏幕内，这导致渲染成本增加一倍，这对于数百万用户在低端移动设备上使用的产品来说是不切实际的。 3.以预估高度先行渲染，然后获取真实高度并缓存。 这是可以选择的实现方式，可以避免前两种方案的不足。","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"高性能渲染十万条数据(时间分片)","slug":"time-fragment","date":"2022-11-23T11:53:52.000Z","updated":"2023-05-12T10:49:20.014Z","comments":true,"path":"/post/time-fragment.html","link":"","permalink":"http://yoursite.com/post/time-fragment.html","excerpt":"渲染大量数据。","text":"最粗暴的做法（一次性渲染JS的运行时间为187ms，还是蛮快的，但是最终渲染完成后的总时间确是2844ms，中间会白屏一段时间。 1234567891011121314151617// 记录任务开始时间let now = Date.now();// 插入十万条数据const total = 100000;// 获取容器let ul = document.getElementById(&#x27;container&#x27;);// 将数据插入容器中for (let i = 0; i &lt; total; i++) &#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = i ul.appendChild(li);&#125;console.log(&#x27;JS运行时间：&#x27;, Date.now() - now);setTimeout(() =&gt; &#123; console.log(&#x27;总运行时间：&#x27;, Date.now() - now);&#125;, 0) 使用定时器页面的卡顿是由于同时渲染大量DOM所引起的，所以考虑将渲染过程分批进行，这里用到的就是 setTimeout。 1234567891011121314151617181920212223242526let ul = document.getElementById(&#x27;container&#x27;);// 插入十万条数据let total = 100000;// 一次插入 20 条let once = 20;//总页数let page = total / once//每条记录的索引let index = 0;//循环加载数据function loop(curTotal, curIndex) &#123; if (curTotal &lt;= 0) &#123; return false; &#125; //每页多少条 let pageCount = Math.min(curTotal, once); setTimeout(() =&gt; &#123; for (let i = 0; i &lt; pageCount; i++) &#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = curIndex + i + &#x27; : &#x27; + ~~(Math.random() * total) ul.appendChild(li) &#125; loop(curTotal - pageCount, curIndex + pageCount) &#125;, 0)&#125;loop(total, index); 页面加载的时间已经非常快了，每次刷新时可以很快的看到第一屏的所有数据，但是当我们快速滚动页面的时候，会发现页面出现闪屏或白屏的现象。 为什么会出现闪屏现象呢首先，理清一些概念。FPS表示的是每秒钟画面更新次数。我们平时所看到的连续画面都是由一幅幅静止画面组成的，每幅画面称为一帧，FPS是描述帧变化速度的物理量。 大多数电脑显示器的刷新频率是60Hz，大概相当于每秒钟重绘60次，FPS为60frame/s，为这个值的设定受屏幕分辨率、屏幕尺寸和显卡的影响。 因此，当你对着电脑屏幕什么也不做的情况下，大多显示器也会以每秒60次的频率正在不断的更新屏幕上的图像。 为什么你感觉不到这个变化？ 那是因为人的眼睛有视觉停留效应，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了，这中间只间隔了16.7ms(1000/60≈16.7)，所以会让你误以为屏幕上的图像是静止不动的。 而屏幕给你的这种感觉是对的，试想一下，如果刷新频率变成1次/秒，屏幕上的图像就会出现严重的闪烁，这样就很容易引起眼睛疲劳、酸痛和头晕目眩等症状。 大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms。 直观感受，不同帧率的体验： 帧率能够达到 50 ～ 60 FPS 的动画将会相当流畅，让人倍感舒适； 帧率在 30 ～ 50 FPS 之间的动画，因各人敏感程度不同，舒适度因人而异； 帧率在 30 FPS 以下的动画，让人感觉到明显的卡顿和不适感； 帧率波动很大的动画，亦会使人感觉到卡顿。 简单聊一下 setTimeout 和闪屏现象 setTimeout的执行时间并不是确定的。在JS中，setTimeout任务被放进事件队列中，只有主线程执行完才会去检查事件队列中的任务是否需要执行，因此setTimeout的实际执行时间可能会比其设定的时间晚一些。 刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。 以上两种情况都会导致setTimeout的执行步调和屏幕的刷新步调不一致。 在setTimeout中对dom进行操作，必须要等到屏幕下次绘制时才能更新到屏幕上，如果两者步调不一致，就可能导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素，从而导致丢帧现象。 使用 requestAnimationFrame与setTimeout相比，requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。 如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame 的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。 将 setTimeout 替换成 requestAnimationFrame: 123456789101112// 其他 ...window.requestAnimationFrame(function()&#123; for(let i = 0; i &lt; pageCount; i++)&#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = curIndex + i + &#x27; : &#x27; + ~~(Math.random() * total) ul.appendChild(li) &#125; loop(curTotal - pageCount,curIndex + pageCount)&#125;)// ... 使用 DocumentFragment DocumentFragment，文档片段接口，表示一个没有父级文件的最小文档对象。它被作为一个轻量版的Document使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会触发DOM树的（重新渲染) ，且不会导致性能等问题。可以使用document.createDocumentFragment方法或者构造函数来创建一个空的DocumentFragment 从MDN的说明中，我们得知DocumentFragments是DOM节点，但并不是DOM树的一部分，可以认为是存在内存中的，所以将子元素插入到文档片段时不会引起页面回流（什么是回流? 回流是会导致页面重新渲染的一些元素,从而影响性能）。 当append元素到document中时，被append进去的元素的样式表的计算是同步发生的，此时调用 getComputedStyle 可以得到样式的计算值。 而append元素到 documentFragment 中时，是不会计算元素的样式表，所以documentFragment 性能更优。当然现在浏览器的优化已经做的很好了， 当append元素到document中后，没有访问 getComputedStyle 之类的方法时，现代浏览器也可以把样式表的计算推迟到脚本执行之后。 1234567891011121314// 其他 ...window.requestAnimationFrame(function()&#123; const fragment = document.createDocumentFragment() for(let i = 0; i &lt; pageCount; i++)&#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = curIndex + i + &#x27; : &#x27; + ~~(Math.random() * total) fragment.appendChild(li) &#125; ul.appendChild(fragment) loop(curTotal - pageCount,curIndex + pageCount)&#125;)// ...","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"ESM/ESBuild","slug":"ESM-ESBuild","date":"2022-09-13T09:11:35.000Z","updated":"2023-05-12T10:49:20.012Z","comments":true,"path":"/post/ESM-ESBuild.html","link":"","permalink":"http://yoursite.com/post/ESM-ESBuild.html","excerpt":"继 CommonJS、AMD、CMD 几种模块化规范由社区提出后，ES 2015（ES6）在语言层面上实现了模块功能，且实现简单，可以替代CommonJS和AMD规范，成为在服务器和浏览器通用的解决方案。","text":"ESModule继 CommonJS、AMD、CMD 几种模块化规范由社区提出后，ES 2015（ES6）在语言层面上实现了模块功能，且实现简单，可以替代CommonJS和AMD规范，成为在服务器和浏览器通用的解决方案。 在浏览器中通过 &lt;script type=&quot;module&quot;&gt; 原生支持 ESM。 https://www.cnblogs.com/zhaojian-08/p/14385312.html 导入/导出12345678// esm_index.jsexport const hello_world = 1export default function() &#123;&#125;&lt;script type=&quot;module&quot;&gt; import fn, &#123; hello_world &#125; from &#x27;./esm_index.js&#x27;&lt;/script&gt; 动态加载123456789101112// dynamic-m.jsexport const dynamic_value = &#x27;动态加载&#x27;export default function() &#123; console.log(&#x27;default&#x27;)&#125;mport(&#x27;./dynamic-m.js&#x27;) .then(module =&gt; &#123; // module: &#123; default: fn, dynamic_value: &#x27;动态加载&#x27; &#125; console.log(&#x27;动态&#x27;, module) &#125;) ESBuild https://esbuild.github.io/api/ 介绍: https://juejin.cn/post/6918927987056312327","categories":[],"tags":[{"name":"ESM ESModule ESBuild","slug":"ESM-ESModule-ESBuild","permalink":"http://yoursite.com/tags/ESM-ESModule-ESBuild/"}]},{"title":"深入浅出TypeScript","slug":"深入浅出TypeScript","date":"2022-09-09T02:35:36.000Z","updated":"2023-05-12T10:49:20.018Z","comments":true,"path":"/post/深入浅出TypeScript.html","link":"","permalink":"http://yoursite.com/post/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript.html","excerpt":"TypeScript","text":"TypeScript.d.ts 和 declare 是干嘛用的如果一个文件有扩展名 .d.ts，则表示它是一个声明文件，可以用来声明全局的类型定义和接口，或者是其它模块。比如： 1234567891011121314151617181920// global.d.ts// 声明接口declare interface Person &#123; name: string; age: number;&#125;// 声明类型 (别名)declare type TName = string;// 声明模块declare module &#x27;*.css&#x27;;declare module &#x27;*.less&#x27;;declare module &#x27;*.png&#x27;;// 拓展 window 属性，在 window 对象上显式设置属性declare interface Window &#123; MyNameSpace: any&#125; 但是也不是说创建了.d.ts文件，里面声明的东西就能生效了，毕竟归根到底也是.ts文件，需要预编译，所以需要在tsconfig.json文件里面的include数组里面添加 global.d.ts 文件。 1&quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;] .d.ts 文件中的顶级声明必须以 “declare” 或 “export” 修饰符开头。通过declare声明的类型或者变量或者模块，在include包含的文件范围内，都可以直接引用。 12345// .vue setup / .tsconst me: Person = &#123; name: &#x27;alex.cheng&#x27;, age: 18&#125; 注意.d.ts文件顶级声明declare最好不要跟export同级使用，不然在其他ts文件引用这个.d.ts的内容的时候，就需要手动import导入了。 12345678// global.d.tsexport type TName = string;// 这个时候，外部 ts 就无法直接使用 Person 了，需要引入 import &#123; Person &#125; from &#x27;../global.d.ts&#x27;export declare interface Person &#123; name: string; age: number;&#125; 给对象分配动态（未知）属性1234567891011121314const o: &#123; [key: string]: any &#125; = &#123;&#125;// 使用 ts 内置工具 Record，效果同上const o: Record&lt;string, any&gt; = &#123;&#125;interface IPerson extends Record&lt;string, any&gt; &#123; name: string; age?: number;&#125;const me1: IPerson = &#123; name: &#x27;alex&#x27;, hair: &#x27;black&#x27;&#125; interface 和 type 有什么区别 接口和类型别名都可以用来描述对象的形状或函数签名。 与接口类型不一样的是，类型别名可以用于一些其他类型，比如原始类型、联合类型（|）和元组。 接口和类型别名都能够被扩展，但语法有所不同。此外，接口和类型别名不是互斥的。接口可以扩展类型别名，而反过来是不行的。 interface 扩展（接口、类型）使用 extends 关键字，类型别名扩展（接口、类型）使用的是 交叉类型（&amp;）: 123456789101112131415// 接口扩展interface IPerson &#123; name: string;&#125;interface IMe extends IPerson &#123; age: number;&#125;// 类型扩展type TPerson = &#123; name: string;&#125;type TMe = TPerson &amp; &#123; age: number;&#125; 类可以以相同的方式实现(implements)接口或类型别名，但类不能实现使用类型别名定义的联合类型 12345678910111213// Error:type PartialPoint = &#123; x: number; &#125; | &#123; y: number; &#125;;class SomePartialPoint implements PartialPoint &#123; // 类只能实现具有静态已知成员的对象类型或对象类型的交集。ts(2422) x = 1; y = 2;&#125;// Successtype PartialPoint = &#123; x: number; &#125; &amp; &#123; y: number; &#125;;class SomePartialPoint implements PartialPoint &#123; x = 1; y = 2;&#125; 与类型别名不同，接口可以定义多次，会被自动合并为单个接口。 123456789101112interface IMerge &#123; a: 1;&#125;interface IMerge &#123; b: 2&#125;const ab: IMerge = &#123;&#125;; // 类型“&#123;&#125;”缺少类型“IMerge”中的以下属性: a, bts(2739)// Error: 标识符“TOne”重复。ts(2300)type TOne = string;type TOne = number; 类型保护 typeof instanceof in 参考资料TS 学习指南 ↩深入理解TypeScript ↩","categories":[],"tags":[{"name":"TypeScript TS","slug":"TypeScript-TS","permalink":"http://yoursite.com/tags/TypeScript-TS/"}]},{"title":"移动端开发实践","slug":"app-h5","date":"2022-06-09T06:26:40.000Z","updated":"2023-05-12T10:49:20.012Z","comments":true,"path":"/post/app-h5.html","link":"","permalink":"http://yoursite.com/post/app-h5.html","excerpt":"React Native 、H5移动端开发实践","text":"WebView现在 Android App大多嵌入了 Android Webview 组件进行 Hybrid 开发，它具备开发周期短、灵活性好的优点，但是缺点也很明显，加载速度慢 &amp; 消耗流量。引起缺点的主要原因如下： js解析效率，以及手机硬件设备的性能 页面资源的下载（图片、js文件、css文件） 参考资料Android Webview H5 秒开方案实现 ↩","categories":[],"tags":[{"name":"RN H5","slug":"RN-H5","permalink":"http://yoursite.com/tags/RN-H5/"}]},{"title":"如何编写高标准的 JavaScript 代码","slug":"js-advice","date":"2022-03-31T02:12:23.000Z","updated":"2023-05-12T10:49:20.013Z","comments":true,"path":"/post/js-advice.html","link":"","permalink":"http://yoursite.com/post/js-advice.html","excerpt":"代码量少，运行速度不一定快；代码量多，运行速度也不一定慢。","text":"概述你是否曾经为了提供一个简单的应用解决方案而彻夜地查看源代码？你是否曾经为了理解某个框架而冥思苦想、阅览群书？你是否曾经为了提升0.1s的DOM性能而对多种实现方案进行严格测试和对比？你是否曾经为了避免兼容问题而遍寻高手共同“诊治”？ 跟我一起，专注高质量 JavaScript 代码，少出 Bug🐛，早下班 ! 期望为读者带来如下帮助 📚： ❑ 能写出简单、清晰、高效的代码。 ❑ 能搭建一个稳定、健壮、快捷的应用框架。 ❑ 能回答一个困扰很多人的技术问题。 ❑ 能修复一个应用开发中遇到的大的Bug。 ❑ 能非常熟悉某个开源产品。 ❑ 能提升客户端应用性能。 JavaScript 基础代码量少，运行速度不一定快；代码量多，运行速度也不一定慢。 减少全局变量 多个全局变量都追加在一个名称空间下，将显著降低与其他应用程序产生冲突的概率 123const namespace = &#123;&#125;namespace.name = &#x27;my namespace&#x27; 使用闭包体将信息隐藏，它是另一种有效减少“全局污染”的方法。 1234567const sayName = function() &#123; const name = &#x27;closure&#x27; return function() &#123; alert(name) &#125;&#125;() 作用域控制着变量与参数的可见性及生命周期。 JavaScript支持函数作用域，定义在函数中的参数和变量在函数外部是不可见的，并且在一个函数中的任何位置定义的变量在该函数中的任何地方都可见。它不仅减少了名称冲突，并且提供了自动内存管理。 ES6 模块化编程中每个 js 文件内部定义的变量，外部无法获取。如果外部需要模块内部变量，通过 export 导出。 1234567891011&lt;script&gt; var windowA = &#x27;window a&#x27; console.log(window.windowA) // 输出 &#x27;window a&#x27;&lt;/script&gt;&lt;script type=&quot;module&quot;&gt; var moduleA = &#x27;module a&#x27; console.log(window.moduleA) // 输出 undefined&lt;/script&gt; 谨慎JS数据类型在自动转换数据类型时，JavaScript一般遵循：如果某个类型的值被用于需要其他类型的值的环境中，JavaScript就自动将这个值转换成所需要的类型。 类型转换慎用JavaScript类型自动转换，注意自动转换规则: 如果把非空对象用在逻辑运算环境中，则对象被转换为true。此时的对象包括所有类型的对象，即使是值为false的包装对象也被转换为true。 果把对象用在数值运算环境中，则对象会被自动转换为数字，如果转换失败，则返回值为NaN。 当数组被用在数值运算环境中时，数组将根据包含的元素来决定转换的值。如果数组为空数组，则被转换为数值0。如果数组仅包含一个数字元素，则被转换为该数字的数值。如果数组包含多个元素，或者仅包含一个非数字元素，则返回NaN。 🌰 123456789101112// 对象const obj = &#123;&#125;obj &amp;&amp; 1 &gt;&gt; 1obj + 1 &gt;&gt; &#x27;[object Object]1&#x27;obj.valueOf = function() &#123; return 99 &#125;obj + 1 &gt;&gt; 100// 数组自动转换规则+[] &gt;&gt; 0+[1] &gt;&gt; 1+[1,2] &gt;&gt; NaN 类型判断 typeof对于任何变量来说，使用typeof运算符总是以字符串的形式返回以下6种类型之一：❑ “number”❑ “string”❑ “boolean”❑ “object”❑ “function”❑ “undefined” 令人疑惑的是，在使用 typeof 检测null值时，返回的是“object”，而不是“null”。 12345typeof null &gt;&gt; &#x27;object&#x27;typeof [] &gt;&gt; &#x27;object&#x27;typeof &#123;&#125; &gt;&gt; &#x27;object&#x27; instanceof instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。 这个在判断对象时存在一些不确定性，来看下例子： 🌰 123456function Person(name) &#123; this.name = name&#125;const p = new Person(&#x27;hello&#x27;)p instanceof Person &gt;&gt; truep instanceof Object &gt;&gt; true 再看一个🌰: 123456789101112131415function Person(name) &#123; this.name = name&#125;function Child(name) &#123; this.name = name&#125;Child.prototype = Person.prototypeChild.prototype.constructor = Childconst p = new Child(&#x27;hello child&#x27;)p instanceof Person &gt;&gt; truep instanceof Object &gt;&gt; true 如果是判断数组呢? 1234567[] instanceof Array &gt;&gt; true[] instanceof Object &gt;&gt; true// 当然这种方式存在不确定性，我们可以使用 Array.isArray() 方法来判断Array.isArray([]) &gt;&gt; trueArray.isArray(&#123;&#125;) &gt;&gt; false 从上面例子可以看出，使用 instanceof 来判断时存在种种不确定性，只要出现在原型链上的对象都会返回 true，使用的时候还需要着重注意！ 为什么会这样，想必大家应该想起来了！ Object类是所有对象类型的的父类! toString() 方法 每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 “[object type]”，其中 type 是对象的类型。 toString() 方法，它定义在 Object 的原型对象上，对象在调用时会返回一个表示该对象的字符串。 使用 toString() 方法检测对象类型是最安全、最准确的。调用toString()方法把对象转换为字符串，然后通过检测字符串中是否包含数组所特有的标志字符可以确定对象的类型。 为什么说 toString 方法用来检测对象类型是最安全、最准确的，我们慢慢来看吧~ 先看看在对象上直接使用 toString会是什么结果： 1234567891011121314const obj = &#123; a: 1 &#125;const arr = [1, 2]obj.toString() &gt;&gt; &#x27;[object Object]&#x27;// 如果是数组的话，则输出字符串arr.toString() &gt;&gt; &#x27;1,2&#x27;// 当然我们可以重写/覆盖原型链上的 toString 方法obj.toString = function() &#123; return &#x27;overwrite&#x27;&#125;obj.toString() &gt;&gt; &#x27;overwrite&#x27; 既然 toString 方法定义在原型对象上，我们看看如果单独调用它，会是什么结果呢? 1Object.prototype.toString() &gt;&gt; &#x27;[object Object]&#x27; 如果通过 call/apply 方法，改变 toString 方法内部的 this 执行，又会是什么结果呢? 看到如下结果，我相信这绝对可以完美 cover 住项目里面所有的类型判断了！所以说它是最安全、最准确的类型判断，没有异议吧😏 12345678910111213141516171819202122Object.prototype.toString.call(&#123;&#125;) &gt;&gt; &#x27;[object Object]&#x27;Object.prototype.toString.call([]) &gt;&gt; &#x27;[object Array]&#x27;Object.prototype.toString.call(function()&#123;&#125;) &gt;&gt; &#x27;[object Function]&#x27;Object.prototype.toString.call(&#x27;&#x27;) &gt;&gt; &#x27;[object String]&#x27;Object.prototype.toString.call(1) &gt;&gt; &#x27;[object Number]&#x27;Object.prototype.toString.call(true) &gt;&gt; &#x27;[object Boolean]&#x27;Object.prototype.toString.call(null) &gt;&gt; &#x27;[object Null]&#x27;Object.prototype.toString.call(undefined) &gt;&gt; &#x27;[object Undefined]&#x27;Object.prototype.toString.call() &gt;&gt; &#x27;[object Undefined]&#x27;Object.prototype.toString.call(new Date()) &gt;&gt; &#x27;[object Date]&#x27;Object.prototype.toString.call(/at/) &gt;&gt; &#x27;[object RegExp]&#x27; 那么它是如何做到的呢，我们来扒一扒它的原理！在 toString 方法被调用时，会执行以下几个操作步骤: 获取this指向的那个对象的[[Class]]属性的值。（call/apply 改变 this 指向） 计算出三个字符串”[object “、 第一步的操作结果、 以及 “]” 连接后的新字符串。 返回第二步的操作结果，也就是类似 &#39;[object Type]&#39; 这种格式字符串。 需要注意的是，对象的[[Class]]属性是无法直接访问的，它一个内部属性，所有的对象(原生对象和宿主对象)都拥有该属性，且不能被任何人修改。在规范中，[[Class]]是这么定义的：内部属性描述。 如果要单独或者对象的 [[Class]]，我们可以这样做: 12const targetObj = []Object.prototype.toString.call(targetObj).slice(8, -1) &gt;&gt; &#x27;Array&#x27; 既然它如此好用，难道就没有缺点吗？ 答案是当然有的，毕竟凡事都不可能那么绝对的嘛！ 那么缺点是什么呢？第一，toString() 会进行装箱操作，产生很多临时对象。（装箱就是将基本类型的数据，通过引用类型包装起来，从而可以使用引用类上的方法） 12345// 你肯定不能这样用1.toString() &gt;&gt; SyntaxError: Invalid or unexpected token// 你必须这样用(1).toString() &gt;&gt; &#x27;1&#x27; 第二，无法区分自定义对象类型，用来判断这类对象时，返回的都是Object，这样我们就需要通过 instanceof 来判断了。 1234function Person()&#123;&#125;const p = new Person()Object.prototype.toString.call(p) &gt;&gt; &#x27;[object Object]&#x27; 字符串JavaScript解释器强制约定字符串在堆区存储的数据是不可变的，也就是说，JavaScript解释器强制约定字符串在堆区存储的数据是不可变的。 参考资料参考资料 ↩参考资料2 ↩","categories":[],"tags":[{"name":"JavaScript, ES6","slug":"JavaScript-ES6","permalink":"http://yoursite.com/tags/JavaScript-ES6/"}]},{"title":"React Hooks","slug":"react-hooks","date":"2022-03-26T10:41:01.000Z","updated":"2023-05-12T10:53:24.159Z","comments":true,"path":"/post/react-hooks.html","link":"","permalink":"http://yoursite.com/post/react-hooks.html","excerpt":"什么是React Hooks，为什么需要它？如何高效的使用React Hooks？如何自定义 Hooks ？如何通过 Hooks 做性能优化？","text":"Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 动机Hook 规则 只在最顶层使用 Hook 只在 React 函数中调用 Hook。（或：在自定义 Hook 中调用其他 Hook） 使用 useCallback、useMemo、memo 做性能优化尽可能的保证组件不去发生变化，发生变化的因素有：state、props、context。 那么 React 是如何比较这三者的呢？ 答案是 内存地址。 比如说，对比一个 function，对比的就是这个函数在内存中的地址，通过地址的判断，从而判断 props 是否发生了改变。 React.memo https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate React.memo 包裹一个组件，来对它的 props 进行浅比较。等效于 PureComponent，但它只比较 props。（也可以通过第二个参数指定一个自定义的比较函数来比较新旧 props。如果函数返回 true，就会跳过更新。） 123456789101112131415161718192021222324// 不使用 memo，每一次 setCount，都会造成 Child 组件重新 renderconst Child = () =&gt; &#123; console.log(&#x27;Child&#x27;) return ( &lt;&gt;Child component&lt;/&gt; )&#125;const Demo = () =&gt; &#123; const [count, setCount] = useState(0) return ( &lt;&gt; &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; &lt;Child /&gt; &lt;/&gt; )&#125;// 通过 memo 包裹后，Child 组件不会再重新 render了。const Child = memo(() =&gt; &#123; console.log(&#x27;Child&#x27;) return ( &lt;&gt;Child component&lt;/&gt; )&#125;) 当 memo 感知 props 没有发生改变时，不会重新 render 组件。如果传入 count 进来，Child组件就会重新 render。 总结： 如果我们将 setCount 当做 prop 传入进来，Child 不会重新render（因为 setCount 在内存中的地址没有发生改变） 如果传入我们自己定义的方法 (fn)进来，Child会重新 render，因为 Demo 组件每次更新 count 后，重新生成了 fn 函数。 只是传了个 fn ，不想让 Child 组件更新怎么办？那就要用到 useCallback 钩子了 useMemo把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算。 1234// 只有当 count 发生变化时，才会重新计算const computedCount = useMemo(() =&gt; &#123; return count * 2&#125;, [count]) useMemo 也允许你跳过一次子节点的昂贵的重新渲染，比如组件初始化时，需要一次大量的计算，后续就不会再改变了： 123456789101112function Parent(&#123; a, b &#125;) &#123; // Only re-rendered if `a` changes: const child1 = useMemo(() =&gt; &lt;Child1 a=&#123;a&#125; /&gt;, [a]); // Only re-rendered if `b` changes: const child2 = useMemo(() =&gt; &lt;Child2 b=&#123;b&#125; /&gt;, [b]); return ( &lt;&gt; &#123;child1&#125; &#123;child2&#125; &lt;/&gt; )&#125; useCallback把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。 下面这个例子，即使我们用 memo 包裹了组件，因为 setCount 每次会引起 Demo 组件重新 render，生成了新的 fn 函数(内存地址发生了变化)，导致 Child 也会重新 render。 123456789101112131415161718192021interface IChild &#123; fn: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;&#125;const Child = memo((props: IChild) =&gt; &#123; console.log(&#x27;Child&#x27;) return ( &lt;&gt;Child component&lt;/&gt; )&#125;)const Demo = () =&gt; &#123; const [count, setCount] = useState(0) const fn = () =&gt; console.log(&#x27;is fn&#x27;) return ( &lt;&gt; &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; &lt;Child fn=&#123;fn&#125; /&gt; &lt;/&gt; )&#125; 我们不想让 fn 函数的 内存地址 发生变化，怎么办呢？使用 useCallback 钩子将其包裹起来即可。 注意：useMemo 也可以这样用，缓存 fn，从而使得 Child 组件不会重复 render。 1234567// 省略...const fn = useCallback(() =&gt; &#123; console.log(&#x27;is fn&#x27;)&#125;, [])// 省略... 这样 fn 函数就是一个缓存函数了，即使 count 不停的发生变化，也不会造成 Child 组件重复 render。 总结: 当 Demo 组件内部 state 发生了改变引起 Demo 和 Child 组件重新 render 并且 Child 组件接受了一个来自 Demo 组件自定义的方法（fn） 如果不希望 Child 组件重新 render，那么就需要用 useCallback 钩子将自定义方法 fn 包裹起来 因为 Child 组件 props 里面的 fn 和 useCallback 返回的 fn 指向的是内存中的同一个地址，那么 Child 组件就不会更新 useCallback 返回新函数的条件是：依赖项（第二个参数）发生了改变。 如果说我们的 Child 组件，本身就是需要根据 count 变化而变化，那么就不需要加这个缓存 API了，反而增加其计算负担。 设计组件不要为了使用钩子，过渡的使用钩子，好的页面设计，也许用不上这些钩子。 把不变的组件和变化的组件抽离出来！ 比如可以把 count 相关部分抽离成一个 Count 组件，使其和 Child 组件同层级排列，Count 组件和 Child 组件分开了，也不会引起 Child 组件做多余的 render。 12&lt;Count /&gt;&lt;Child prop=&#123;fn&#125; /&gt; 或者是通过 props.children 渲染 Child，也不会造成 Child 重新 render。 12345678910111213141516171819202122const Count = (props: any) =&gt; &#123; const [count, setCount] = useState(0) return ( &lt;&gt; &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; &#123;/* children 不会重新 render */&#125; &#123;props.children&#125; &lt;/&gt; )&#125;const Demo = () =&gt; &#123; // fn 永远不会变化 const fn = () =&gt; &#123;&#125; return ( &lt;&gt; &lt;Count&gt; &lt;Child fn=&#123;fn&#125; /&gt; &lt;/Count&gt; &lt;/&gt; )&#125; useRef / createRef 访问 DOM 节点 123456const inputEle = useRef(null)const inputEle = React.createRef()inputEle.current.focus() 测量 DOM节点？1234567891011121314151617const getHeight = useMemo(() =&gt; &#123; return (node: HTMLObjectElement) =&gt; &#123; if (node) &#123; setHeight(node.getBoundingClientRect().height) &#125; &#125;&#125;, [])// 或者const getHeight = useCallback((node: HTMLObjectElement) =&gt; &#123; if (node) &#123; setHeight(node.getBoundingClientRect().height) &#125;&#125;, []) 将 ref 逻辑抽离成一个 Hook 1234567891011121314151617181920// hookconst useClientRect = () =&gt; &#123; const [rect, setRect] = useState(null) const ref = useCallback(node =&gt; &#123; if (node) &#123; setRect(node.getBoundingClientRect()) &#125; &#125;, []) return [rect, ref]&#125;// 使用const [rect, ref] = useClientRect()&lt;h1 ref=&#123;ref&#125;&gt;是 H1 标签 &#123;count&#125;&lt;/h1&gt;&#123; rect &amp;&amp; &lt;span&gt;&#123;rect.height&#125;&lt;/span&gt;&#125; React.forwardRef React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。 123456789const FancyInput = forwardRef((props, ref) =&gt; ( &lt;input ref=&#123;inputRef&#125; &#123;...props&#125; /&gt;))// 这样可以拿到 input 元素了const inputEle = React.createRef()&lt;FancyInput ref=&#123;inputEle&#125; /&gt; useImperativeHandle useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值。 12345678910111213141516171819202122232425const FancyInput = forwardRef((props, ref) =&gt; &#123; const inputRef = useRef(); useImperativeHandle(ref, () =&gt; (&#123; focus: () =&gt; &#123; inputRef.current.focus(); &#125;, alert () &#123; alert(1) &#125; &#125;)); return &lt;input ref=&#123;inputRef&#125; &#123;...props&#125; /&gt;;&#125;)const inputEle = React.createRef()&lt;FancyInput ref=&#123;inputEle&#125; /&gt;// 通过 inputEle 获取到 useImperativeHandle 定义的方法inputEle.current.focus()inputEle.current.alert() 参考资料ahooks 官网 ↩","categories":[],"tags":[{"name":"React，Hooks","slug":"React，Hooks","permalink":"http://yoursite.com/tags/React%EF%BC%8CHooks/"}]},{"title":"Hello_AlexCc","slug":"first-article","date":"2019-07-29T15:37:50.000Z","updated":"2023-05-12T10:49:20.012Z","comments":true,"path":"/post/first-article.html","link":"","permalink":"http://yoursite.com/post/first-article.html","excerpt":"First Article","text":"What This is my first Blog. No.212345if (true) &#123; console.log(&quot;Hello_AlexCc!&quot;)&#125;return &quot;ヾ(◍°∇°◍)ﾉﾞ&quot;","categories":[],"tags":[{"name":"One","slug":"One","permalink":"http://yoursite.com/tags/One/"}]}],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"组件","slug":"组件","permalink":"http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"},{"name":"微前端","slug":"微前端","permalink":"http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"},{"name":"工程化,Vue3,通用功能","slug":"工程化-Vue3-通用功能","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD/"},{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"},{"name":"工程化,Vue3,Config","slug":"工程化-Vue3-Config","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-Config/"},{"name":"Reactive,Vue3","slug":"Reactive-Vue3","permalink":"http://yoursite.com/tags/Reactive-Vue3/"},{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"},{"name":"JS,Vue-Router,Vue3,","slug":"JS-Vue-Router-Vue3","permalink":"http://yoursite.com/tags/JS-Vue-Router-Vue3/"},{"name":"JS,Vue3","slug":"JS-Vue3","permalink":"http://yoursite.com/tags/JS-Vue3/"},{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"},{"name":"ESM ESModule ESBuild","slug":"ESM-ESModule-ESBuild","permalink":"http://yoursite.com/tags/ESM-ESModule-ESBuild/"},{"name":"TypeScript TS","slug":"TypeScript-TS","permalink":"http://yoursite.com/tags/TypeScript-TS/"},{"name":"RN H5","slug":"RN-H5","permalink":"http://yoursite.com/tags/RN-H5/"},{"name":"JavaScript, ES6","slug":"JavaScript-ES6","permalink":"http://yoursite.com/tags/JavaScript-ES6/"},{"name":"React，Hooks","slug":"React，Hooks","permalink":"http://yoursite.com/tags/React%EF%BC%8CHooks/"},{"name":"One","slug":"One","permalink":"http://yoursite.com/tags/One/"}]}